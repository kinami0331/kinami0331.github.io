<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>《操作系统》xv6阅读报告之进程模型</title>
    <url>/2021/04/15/%E3%80%8A%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E3%80%8Bxv6%E9%98%85%E8%AF%BB%E6%8A%A5%E5%91%8A%E4%B9%8B%E8%BF%9B%E7%A8%8B%E6%A8%A1%E5%9E%8B/</url>
    <content><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>本次XV6源码阅读主要关注XV6中的进程模型的实现，包括XV6中的PCB（进程控制块）结构、进程常用方法的实现、系统对进程的调度等。与该功能实现有关的<strong>主要</strong>代码文件以及该文件的主要内容如下表格所示。</p>
<table>
<thead>
<tr>
<th>文件名</th>
<th>主要功能</th>
</tr>
</thead>
<tbody><tr>
<td><code>proc.h</code></td>
<td>主要声明了三个<code>struct</code>:<code>cpu</code>,<code>context</code>,<code>proc</code>，分别是内核中的CPU、上下文以及我们重点关注的PCB信息，除此之外还定义了一个枚举型，定义了xv6中进程的可能状态</td>
</tr>
<tr>
<td><code>proc.c</code></td>
<td>声明了进程表的数据结构<code>ptable</code>以及与进程有关的核心函数，在本次报告中会对这些函数详细解读</td>
</tr>
<tr>
<td><code>vm.c</code></td>
<td>实现了一些与虚拟内存有关的函数，其中与进程有关的部分包括为内核和用户分配内存，切换到当前进程页面的<code>switchuvm()</code>，切换到内核页面的<code>switchkvm()</code>，以及用于拷贝父进程空间到子进程空间的<code>copyuvm()</code>等</td>
</tr>
<tr>
<td><code>swtch.S</code></td>
<td>用汇编实现的一个用于切换上下文的函数</td>
</tr>
<tr>
<td><code>kalloc.c</code></td>
<td>主要实现了用于分配和释放物理内存的<code>kalloc()</code>以及<code>kfree()</code></td>
</tr>
</tbody></table>
<p>除此之外，还有定义了一些数据结构的其他头文件，这里不特别列出，在用到的时候会说明。在本次报告中，我们主要关注进程相关的内容，即<code>proc.h</code>和<code>proc.c</code>这两个文件中的内容。</p>
<h2 id="核心代码解读"><a href="#核心代码解读" class="headerlink" title="核心代码解读"></a>核心代码解读</h2><h3 id="proc-h"><a href="#proc-h" class="headerlink" title="proc.h"></a><code>proc.h</code></h3><p>在<code>proc.h</code>中，定义了以下数据：</p>
<ol>
<li><p><code>struct cpu</code>：这是CPU在呢何种的表示，在这个结构体中，会有一个指向<code>struct proc</code>的指针，用于表示当前正在执行的进程。此外还声明了一个<code>cpus</code>数组，用于支持多核处理器。</p>
</li>
<li><p><code>struct context</code>，表示上下文信息的一个结构体，如下所示：</p>
 <figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">context</span> &#123;</span></span><br><span class="line">  uint edi;</span><br><span class="line">  uint esi;</span><br><span class="line">  uint ebx;</span><br><span class="line">  uint ebp;</span><br><span class="line">  uint eip;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>struct proc</code>，这是XV6中的进程控制块（PCB），如下所示：</p>
 <figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">proc</span> &#123;</span></span><br><span class="line">  uint sz;</span><br><span class="line">  <span class="keyword">pde_t</span>* pgdir;</span><br><span class="line">  <span class="keyword">char</span> *kstack;</span><br><span class="line">  <span class="class"><span class="keyword">enum</span> <span class="title">procstate</span> <span class="title">state</span>;</span></span><br><span class="line">  <span class="keyword">volatile</span> <span class="keyword">int</span> pid;</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">proc</span> *<span class="title">parent</span>;</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">trapframe</span> *<span class="title">tf</span>;</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">context</span> *<span class="title">context</span>;</span></span><br><span class="line">  <span class="keyword">void</span> *chan;</span><br><span class="line">  <span class="keyword">int</span> killed;</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">file</span> *<span class="title">ofile</span>[<span class="title">NOFILE</span>];</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">inode</span> *<span class="title">cwd</span>;</span></span><br><span class="line">  <span class="keyword">char</span> name[<span class="number">16</span>];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p> 其中各个数据项的详细意义如下：</p>
<table>
<thead>
<tr>
<th>数据</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td><code>uint sz</code></td>
<td>进程内存空间的大小，单位为byte</td>
</tr>
<tr>
<td><code>pde_t* pgdir</code></td>
<td>指向进程的page table</td>
</tr>
<tr>
<td><code>char *kstack</code></td>
<td>指向内核栈的底部</td>
</tr>
<tr>
<td><code>enum procstate state</code></td>
<td>表示内核当前的状态，其中<code>enum procstate</code>是一个枚举结构，该枚举结构的定义为<code> enum procstate &#123; UNUSED, EMBRYO, SLEEPING, RUNNABLE, RUNNING, ZOMBIE &#125;;</code>除了未使用（UNUSED）状态之外，进程共有五种状态。</td>
</tr>
<tr>
<td><code>volatile int pid</code></td>
<td>进程的id</td>
</tr>
<tr>
<td><code>struct proc *parent</code></td>
<td>指向父进程结构</td>
</tr>
<tr>
<td><code>struct trapframe *tf</code></td>
<td>指向一个中断帧（<code>trapframe</code>），这个结构体定义在<code>x86.h</code>这个文件中。当进程中断时，这个变量指向进程对应的中断帧。</td>
</tr>
<tr>
<td><code>struct context *context</code></td>
<td>切换进程时需要保存的上下文信息，其中<code>context</code>结构体已经在之前介绍过。</td>
</tr>
<tr>
<td><code>void *chan</code></td>
<td>这是一个与睡眠&amp;唤醒有关的数据，如果<code>chan</code>不为空，说明当前进程在<code>chan</code>上休眠，其中<code>chan</code>指的是一个等待队列（wait channel），在xv6中通过调用<code>sleep(chan)</code>来让进程在一个<code>chan</code>上休眠，用<code>wakeup(chan)</code>唤醒一个<code>chan</code>上的进程。</td>
</tr>
<tr>
<td><code>int killed</code></td>
<td>当<code>killed</code>不为0时，说明这个进程被杀死</td>
</tr>
<tr>
<td><code>struct file *ofile[NOFILE]</code></td>
<td>打开的文件，其中<code>struct file</code>是一个与文件有关的结构，这里暂且不详细说明。</td>
</tr>
<tr>
<td><code>struct inode *cwd</code></td>
<td>当前工作目录</td>
</tr>
<tr>
<td><code>char name[16]</code></td>
<td>进程的名称，debug用</td>
</tr>
</tbody></table>
</li>
</ol>
<h3 id="proc-c"><a href="#proc-c" class="headerlink" title="proc.c"></a><code>proc.c</code></h3><ol>
<li>在<code>proc.c</code>中，首先定义了一个重要的数据结构<code>ptable</code>，在xv6中，所有的进程信息都储存在这个结构中，这个结构体如下所示： <figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">spinlock</span> <span class="title">lock</span>;</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">proc</span> <span class="title">proc</span>[<span class="title">NPROC</span>];</span></span><br><span class="line">&#125; ptable;</span><br></pre></td></tr></table></figure>
 其中<code>spinloc lock</code>是一个互斥锁。<code>NPROC</code>为xv6中进程数量的上限，定义在<code>param.h</code>中，在xv6，进程的上限数为64。</li>
<li><code>allocproc()</code>函数，该函数的主要功能为在<code>ptable</code>中寻找一个空位，如果找到空位，则创建一个新的进程，并返回指向该进程的一个指针。<br> 该函数的声明为<code>static struct proc* allocproc(void)</code>。<br> 首先，函数遍历<code>ptable</code>中的<code>proc</code>数组，如果找到了一个空位置，则继续之后的工作，如果遍历全部之后还没有找到则直接返回0（NULL指针），代码如下所示。其中涉及到了<code>acquire()</code>和<code>release()</code>这两个与锁有关的函数，不是我们这一节的重点，暂时忽略。 <figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">struct</span> <span class="title">proc</span>*</span></span><br><span class="line"><span class="class"><span class="title">allocproc</span>(<span class="title">void</span>)</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="comment">/* part 1 */</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">proc</span> *<span class="title">p</span>;</span></span><br><span class="line">  <span class="keyword">char</span> *sp;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">acquire</span>(&amp;ptable.lock);</span><br><span class="line">  <span class="keyword">for</span>(p = ptable.proc; p &lt; &amp;ptable.proc[NPROC]; p++)</span><br><span class="line">    <span class="keyword">if</span>(p-&gt;state == UNUSED)</span><br><span class="line">      <span class="keyword">goto</span> found;</span><br><span class="line">  <span class="built_in">release</span>(&amp;ptable.lock);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
 在运行<code>goto found</code>之后，<code>p</code>即为一个状态为<code>UNUSED</code>的<code>proc</code>位置，将这个进程设置为<code>EMBRYO</code>状态，并且分配一个<code>pid</code>。其中<code>pid</code>由全局变量<code>nextpid</code>来分配，每分配一个新的<code>pid</code>，<code>nextpid</code>进行一次自增操作。该部分代码如下。 <figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">struct</span> <span class="title">proc</span>*</span></span><br><span class="line"><span class="class"><span class="title">allocproc</span>(<span class="title">void</span>)</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="comment">/* part 2 */</span></span><br><span class="line">found:</span><br><span class="line">  p-&gt;state = EMBRYO;</span><br><span class="line">  p-&gt;pid = nextpid++;</span><br><span class="line">  <span class="built_in">release</span>(&amp;ptable.lock);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
 之后，需要为内核栈分配空间，需要调用定义在<code>kalloc.c</code>中的<code>kalloc()</code>函数，如果分配失败，该进程并不能顺利创建，则将进程的状态重新设置为<code>UNUSED</code>并返回空指针。代码如下。 <figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">struct</span> <span class="title">proc</span>*</span></span><br><span class="line"><span class="class"><span class="title">allocproc</span>(<span class="title">void</span>)</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="comment">/* part 3 */</span></span><br><span class="line">  <span class="keyword">if</span>((p-&gt;kstack = <span class="built_in">kalloc</span>()) == <span class="number">0</span>)&#123;</span><br><span class="line">    p-&gt;state = UNUSED;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
 之后，要对内核栈的其他部分进行建立，最终结构如下图所示（代码略）<br> <img src="/2021/04/15/%E3%80%8A%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E3%80%8Bxv6%E9%98%85%E8%AF%BB%E6%8A%A5%E5%91%8A%E4%B9%8B%E8%BF%9B%E7%A8%8B%E6%A8%A1%E5%9E%8B/f1-3.png" alt="figure1-3"><br> 在<code>allocproc()</code>中的最后一步为<code>p-&gt;context-&gt;eip = (uint)forkret</code>，使得新进程首先运行在<code>forkret</code>这个函数中，该函数中判断了是否为第一个创建的线程，之后就没有做别的事情，直接返回，返回后会进入<code>trapret</code>函数，<code>trapret</code>为从中断中返回的函数，该函数定义在<code>trapasm.S</code>中，用于恢复用户寄存器，恢复后使用<code>iret</code>从中断中返回。</li>
<li><code>userinit()</code>函数，用于创建第一个进程。在xv6中，<code>main()</code>函数初始化了一些设备和子系统后，会调用该函数创建第一个进程。在该函数中，首先调用<code>allocproc()</code>在分配一个进程并进行初始化，之后调用<code>setupkvm()</code>创建一个映射内核区的页表，这个函数设计虚拟内存相关知识，这里不详细说明。最终得到如下结构：<br> <img src="/2021/04/15/%E3%80%8A%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E3%80%8Bxv6%E9%98%85%E8%AF%BB%E6%8A%A5%E5%91%8A%E4%B9%8B%E8%BF%9B%E7%A8%8B%E6%A8%A1%E5%9E%8B/f1-1.png" alt="figure1-1"><br> 之后，<code>userinit()</code>函数将<code>trapframe</code>设为初始的用户模式状态，该部分代码如下： <figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">p-&gt;tf-&gt;cs = (SEG_UCODE &lt;&lt; <span class="number">3</span>) | DPL_USER;</span><br><span class="line">  p-&gt;tf-&gt;ds = (SEG_UDATA &lt;&lt; <span class="number">3</span>) | DPL_USER;</span><br><span class="line">  p-&gt;tf-&gt;es = p-&gt;tf-&gt;ds;</span><br><span class="line">  p-&gt;tf-&gt;ss = p-&gt;tf-&gt;ds;</span><br><span class="line">  p-&gt;tf-&gt;eflags = FL_IF;</span><br><span class="line">  p-&gt;tf-&gt;esp = PGSIZE;</span><br><span class="line">  p-&gt;tf-&gt;eip = <span class="number">0</span>; <span class="comment">// beginning of initcode.S</span></span><br></pre></td></tr></table></figure>
这里我们主要关注最后一行代码，将<code>trapframe</code>的<code>eip</code>设为了0，这是初始化代码<code>initcode.S</code>的入口<br> 最后，设置进程状态为<code>RUNNABLE</code>，正式开始工作。</li>
<li><code>fork()</code>函数。除了第一个进程之外，其他的进程都是由父进程调用<code>fork()</code>创建的，实现过程如下。<br> 首先，分配一个进程。 <figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Allocate process.</span></span><br><span class="line"><span class="keyword">if</span> ((np = <span class="built_in">allocproc</span>()) == <span class="number">0</span>)</span><br><span class="line">  <span class="keyword">return</span> <span class="number">-1</span>;</span><br></pre></td></tr></table></figure>
 之后复制父进程的地址空间，如果失败（返回值不为0）则回收进程空间并返回一个错误。 <figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> ((np-&gt;pgdir = <span class="built_in">copyuvm</span>(proc-&gt;pgdir, proc-&gt;sz)) == <span class="number">0</span>)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">kfree</span>(np-&gt;kstack);</span><br><span class="line">    np-&gt;kstack = <span class="number">0</span>;</span><br><span class="line">    np-&gt;state = UNUSED;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="comment">// 如果成功，则复制以下信息</span></span><br><span class="line">np-&gt;sz = proc-&gt;sz;</span><br><span class="line">np-&gt;parent = proc;</span><br><span class="line">*np-&gt;tf = *proc-&gt;tf;</span><br></pre></td></tr></table></figure>
 之后，设置<code>np-&gt;tf-&gt;eax = 0</code>，当子进程从中断返回时，会返回0。<br> 然后子进程继承父进程打开的文件、当前工作目录以及父进程的名字。 <figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; NOFILE; i++)</span><br><span class="line">  <span class="keyword">if</span> (proc-&gt;ofile[i])</span><br><span class="line">    np-&gt;ofile[i] = <span class="built_in">filedup</span>(proc-&gt;ofile[i]);</span><br><span class="line">np-&gt;cwd = <span class="built_in">idup</span>(proc-&gt;cwd);</span><br><span class="line">	</span><br><span class="line">pid = np-&gt;pid;</span><br><span class="line">np-&gt;state = RUNNABLE;</span><br><span class="line"><span class="built_in">safestrcpy</span>(np-&gt;name, proc-&gt;name, <span class="built_in"><span class="keyword">sizeof</span></span>(proc-&gt;name));</span><br></pre></td></tr></table></figure>
 最后，在父进程中返回<code>pid</code>，其中<code>pid</code>由<code>pid = np-&gt;pid</code>得到，是子进程的<code>pid</code>。</li>
<li><code>exit()</code>函数，退出当前进程，退出的进程会变为<code>ZOMBIE</code>状态直到它的父进程调用<code>wait()</code>来发现它已经退出。实现过程如下。<br> 首先关闭所有的文件，之后调用<code>wakeup1()</code>来唤醒父进程（这里会先加锁所以父进程并不会马上唤醒）。如果当前进程有子进程，则需要设置子进程的父进程变为<code>initproc</code>。最后，将当前进程的状态设置为<code>ZOMBIE</code>。</li>
<li><code>wait()</code>函数，等待一个子进程退出，返回子进程的<code>pid</code>，如果没有子进程则返回-1。实现流程如下。（代码略）<br> 遍历<code>ptable</code>中的<code>proc</code>数组，查找是否有子进程，如果有子进程则会将一个<code>havekids</code>标记为1，如果循环了一遍后<code>havekids</code>还是0，则直接返回-1。如果有子进程但是子进程未退出，则会调用<code>sleep()</code>来等待子进程唤醒。在发现处于<code>ZOMBIE</code>状态的子进程之后会释放子进程空间的使用，将这个进程块的状态设置为<code>UNUSED</code>，最后返回子进程的<code>pid</code>。</li>
<li><code>scheduler()</code>函数，该函数会被每个CPU都调用，该函数会遍历进程表，找到一个状态为<code>RUNNABLE</code>的进程来执行，如果没找到则会把当前CPU的<code>proc</code>（表示当前CPU正在执行的进程）设为空指针。其核心代码如下 <figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (p = ptable.proc; p &lt; &amp;ptable.proc[NPROC]; p++)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">if</span> (p-&gt;state != RUNNABLE)</span><br><span class="line">    <span class="keyword">continue</span>;</span><br><span class="line">  proc = p;</span><br><span class="line">  <span class="built_in">switchuvm</span>(p);</span><br><span class="line">  p-&gt;state = RUNNING;</span><br><span class="line">  <span class="built_in">swtch</span>(&amp;cpu-&gt;scheduler, proc-&gt;context);</span><br><span class="line">  <span class="built_in">switchkvm</span>();</span><br><span class="line">  proc = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
 当找到一个处于<code>RUNNABLE</code>状态的进程后，会调用三个重要的函数<code>switchuvm()</code>,<code>swtch()</code>以及<code>switchkvm()</code>。其中<code>switchuvm()</code>会根据<code>proc</code>结构中的<code>pgdir</code>来找到当前进程需要使用的页表，并进行切换。<code>swtch</code>是一个使用汇编编写的函数，在<code>swtch.S</code>中编写，用于保存当前进程的上下文，然后返回到要切换的进程的上下文（<code>cpu-&gt;scheduler</code>）中。<code>switchkvm()</code>用于切换到内核页表。 在xv6中的实现里，这个调度函数采用了最简单的实现方法：直接遍历进程数组寻找，在真实的操作系统中往往会采用更复杂的调度算法来获得更好的体验。</li>
</ol>
<h2 id="总结及收获"><a href="#总结及收获" class="headerlink" title="总结及收获"></a>总结及收获</h2><p>略</p>
]]></content>
      <categories>
        <category>课程作业</category>
        <category>操作系统</category>
      </categories>
      <tags>
        <tag>操作系统</tag>
        <tag>作业</tag>
      </tags>
  </entry>
  <entry>
    <title>《操作系统》xv6阅读报告之进程调度</title>
    <url>/2021/04/14/%E3%80%8A%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E3%80%8Bxv6%E9%98%85%E8%AF%BB%E6%8A%A5%E5%91%8A%E4%B9%8B%E8%BF%9B%E7%A8%8B%E8%B0%83%E5%BA%A6/</url>
    <content><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>本次XV6源码阅读，主要是在上次阅读<strong>进程模型</strong>的基础上，进一步研究xv6中在进程<strong>调度</strong>方面的细节。主要需要阅读的代码文件和上次类似，有以下这些：<br>| 文件名     | 主要功能                                                     |<br>| ———- | ———————————————————— |<br>| <code>proc.h</code>   | 主要声明了三个<code>struct</code>:<code>cpu</code>,<code>context</code>,<code>proc</code>，分别是内核中的CPU、上下文以及我们重点关注的PCB信息，除此之外还定义了一个枚举型，定义了xv6中进程的可能状态 |<br>| <code>proc.c</code>   | 声明了进程表的数据结构<code>ptable</code>以及与进程有关的核心函数，在本次报告中会对这些函数详细解读 |<br>| <code>vm.c</code>     | 实现了一些与虚拟内存有关的函数，其中与进程有关的部分包括为内核和用户分配内存，切换到当前进程页面的<code>switchuvm()</code>，切换到内核页面的<code>switchkvm()</code>，以及用于拷贝父进程空间到子进程空间的<code>copyuvm()</code>等 |<br>| <code>swtch.S</code>  | 用汇编实现的一个用于切换上下文的函数                         |<br>| <code>kalloc.c</code> | 主要实现了用于分配和释放物理内存的<code>kalloc()</code>以及<code>kfree()</code>    |<br>除此之外，还有定义了一些数据结构的其他头文件，这里不特别列出，在用到的时候会说明。在本次报告中，我们主要关注进程相关的内容，即<code>proc.h</code>和<code>proc.c</code>这两个文件中的内容。</p>
<h2 id="核心代码解读"><a href="#核心代码解读" class="headerlink" title="核心代码解读"></a>核心代码解读</h2><h3 id="proc-h"><a href="#proc-h" class="headerlink" title="proc.h"></a><code>proc.h</code></h3><p>该部分说明直接复用上次阅读报告，因为定义的结构体之后要用到。<br>在<code>proc.h</code>中，定义了以下数据：</p>
<ol>
<li><p><code>struct cpu</code>：这是CPU在呢何种的表示，在这个结构体中，会有一个指向<code>struct proc</code>的指针，用于表示当前正在执行的进程。此外还声明了一个<code>cpus</code>数组，用于支持多核处理器。</p>
</li>
<li><p><code>struct context</code>，表示上下文信息的一个结构体，如下所示：</p>
 <figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">context</span> &#123;</span></span><br><span class="line">  uint edi;</span><br><span class="line">  uint esi;</span><br><span class="line">  uint ebx;</span><br><span class="line">  uint ebp;</span><br><span class="line">  uint eip;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>struct proc</code>，这是XV6中的进程控制块（PCB），如下所示：</p>
 <figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">proc</span> &#123;</span></span><br><span class="line">  uint sz;</span><br><span class="line">  <span class="keyword">pde_t</span>* pgdir;</span><br><span class="line">  <span class="keyword">char</span> *kstack;</span><br><span class="line">  <span class="class"><span class="keyword">enum</span> <span class="title">procstate</span> <span class="title">state</span>;</span></span><br><span class="line">  <span class="keyword">volatile</span> <span class="keyword">int</span> pid;</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">proc</span> *<span class="title">parent</span>;</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">trapframe</span> *<span class="title">tf</span>;</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">context</span> *<span class="title">context</span>;</span></span><br><span class="line">  <span class="keyword">void</span> *chan;</span><br><span class="line">  <span class="keyword">int</span> killed;</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">file</span> *<span class="title">ofile</span>[<span class="title">NOFILE</span>];</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">inode</span> *<span class="title">cwd</span>;</span></span><br><span class="line">  <span class="keyword">char</span> name[<span class="number">16</span>];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p> 其中各个数据项的详细意义如下：</p>
<table>
<thead>
<tr>
<th>数据</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td><code>uint sz</code></td>
<td>进程内存空间的大小，单位为byte</td>
</tr>
<tr>
<td><code>pde_t* pgdir</code></td>
<td>指向进程的page table</td>
</tr>
<tr>
<td><code>char *kstack</code></td>
<td>指向内核栈的底部</td>
</tr>
<tr>
<td><code>enum procstate state</code></td>
<td>表示内核当前的状态，其中<code>enum procstate</code>是一个枚举结构，该枚举结构的定义为<code> enum procstate &#123; UNUSED, EMBRYO, SLEEPING, RUNNABLE, RUNNING, ZOMBIE &#125;;</code>除了未使用（UNUSED）状态之外，进程共有五种状态。</td>
</tr>
<tr>
<td><code>volatile int pid</code></td>
<td>进程的id</td>
</tr>
<tr>
<td><code>struct proc *parent</code></td>
<td>指向父进程结构</td>
</tr>
<tr>
<td><code>struct trapframe *tf</code></td>
<td>指向一个中断帧（<code>trapframe</code>），这个结构体定义在<code>x86.h</code>这个文件中。当进程中断时，这个变量指向进程对应的中断帧。</td>
</tr>
<tr>
<td><code>struct context *context</code></td>
<td>切换进程时需要保存的上下文信息，其中<code>context</code>结构体已经在之前介绍过。</td>
</tr>
<tr>
<td><code>void *chan</code></td>
<td>这是一个与睡眠&amp;唤醒有关的数据，如果<code>chan</code>不为空，说明当前进程在<code>chan</code>上休眠，其中<code>chan</code>指的是一个等待队列（wait channel），在xv6中通过调用<code>sleep(chan)</code>来让进程在一个<code>chan</code>上休眠，用<code>wakeup(chan)</code>唤醒一个<code>chan</code>上的进程。</td>
</tr>
<tr>
<td><code>int killed</code></td>
<td>当<code>killed</code>不为0时，说明这个进程被杀死</td>
</tr>
<tr>
<td><code>struct file *ofile[NOFILE]</code></td>
<td>打开的文件，其中<code>struct file</code>是一个与文件有关的结构，这里暂且不详细说明。</td>
</tr>
<tr>
<td><code>struct inode *cwd</code></td>
<td>当前工作目录</td>
</tr>
<tr>
<td><code>char name[16]</code></td>
<td>进程的名称，debug用</td>
</tr>
</tbody></table>
</li>
</ol>
<h3 id="proc-c"><a href="#proc-c" class="headerlink" title="proc.c"></a><code>proc.c</code></h3><ul>
<li><code>scheduler()</code>函数<br>  在<code>proc.c</code>中，实现了一个跟进程调度有关的函数<code>scheduler()</code>，该函数不接受参数也没有返回值，作用为遍历进程表，找到一个状态为<code>RUNNABLE</code>的进程来执行。代码如下：      <figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (p = ptable.proc; p &lt; &amp;ptable.proc[NPROC]; p++)</span><br><span class="line">	&#123;</span><br><span class="line">	  <span class="keyword">if</span> (p-&gt;state != RUNNABLE)</span><br><span class="line">	    <span class="keyword">continue</span>;</span><br><span class="line">	  proc = p;</span><br><span class="line">	  switchuvm(p);</span><br><span class="line">	  p-&gt;state = RUNNING;</span><br><span class="line">	  swtch(&amp;cpu-&gt;scheduler, proc-&gt;context);</span><br><span class="line">	  switchkvm();</span><br><span class="line">	  proc = <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>
  其中<code>ptable.proc</code>是一个储存着所有<code>proc</code>结构体的数组，该函数从数组的第一个元素开始进行遍历（在实际的工作中其实是从前一次切换的位置开始遍历，这个我们之后说明），当找到一个状态为<code>RUNNABLE</code>的进程之后，会调用三个重要的函数<code>switchuvm()</code>,<code>swtch()</code>以及<code>switchkvm()</code>。其中<code>switchuvm()</code>会根据<code>proc</code>结构中的<code>pgdir</code>来找到当前进程需要使用的页表，并进行切换。<code>swtch</code>是一个使用汇编编写的函数，在<code>swtch.S</code>中编写，用于保存当前进程的上下文，然后返回到要切换的进程的上下文（<code>cpu-&gt;scheduler</code>）中。<code>switchkvm()</code>用于切换到内核页表。由代码可见，在xv6的实现里，这个调度函数采用了最简单的实现方法：通过遍历储存着所有进程<code>proc</code>结构的数组来寻找下一个可以开始工作的进程。<br>  在上次报告中，对该部分的解读到此为止，这次我们继续探寻一些细节。</li>
<li><code>yield()</code>函数<br>  <code>yield()</code>函数代码如下：  <figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">yield</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  acquire(&amp;ptable.lock); <span class="comment">//DOC: yieldlock</span></span><br><span class="line">  proc-&gt;state = RUNNABLE;</span><br><span class="line">  sched();</span><br><span class="line">  release(&amp;ptable.lock);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
  可见其中的逻辑很简单，主要就是将当前进程的状态设置为<code>RUNNABLE</code>，然后再调用<code>sched()</code>函数</li>
<li><code>sched()</code>函数  <figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sched</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> intena;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!holding(&amp;ptable.lock))</span><br><span class="line">    panic(<span class="string">&quot;sched ptable.lock&quot;</span>);</span><br><span class="line">  <span class="keyword">if</span> (cpu-&gt;ncli != <span class="number">1</span>)</span><br><span class="line">    panic(<span class="string">&quot;sched locks&quot;</span>);</span><br><span class="line">  <span class="keyword">if</span> (proc-&gt;state == RUNNING)</span><br><span class="line">    panic(<span class="string">&quot;sched running&quot;</span>);</span><br><span class="line">  <span class="keyword">if</span> (readeflags() &amp; FL_IF)</span><br><span class="line">    panic(<span class="string">&quot;sched interruptible&quot;</span>);</span><br><span class="line">  intena = cpu-&gt;intena;</span><br><span class="line">  swtch(&amp;proc-&gt;context, cpu-&gt;scheduler);</span><br><span class="line">  cpu-&gt;intena = intena;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
  在该函数中，最重要的一句为<code>swtch(&amp;proc-&gt;context, cpu-&gt;scheduler);</code>即进行上下文切换的语句，关于这里的工作逻辑，在我们分析完下面的代码后进行说明。</li>
</ul>
<h3 id="swtch-S"><a href="#swtch-S" class="headerlink" title="swtch.S"></a><code>swtch.S</code></h3><p>在这个汇编文件中，实现了一个由汇编写的函数<code>swtch</code>，它是在进程调度时用于保存上下文的核心内容，代码如下</p>
<ul>
<li><code>swtch()</code>函数  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.globl swtch</span><br><span class="line">swtch:</span><br><span class="line">  movl 4(%esp), %eax</span><br><span class="line">  movl 8(%esp), %edx</span><br><span class="line"></span><br><span class="line">  # Save old callee-save registers</span><br><span class="line">  pushl %ebp</span><br><span class="line">  pushl %ebx</span><br><span class="line">  pushl %esi</span><br><span class="line">  pushl %edi</span><br><span class="line"></span><br><span class="line">  # Switch stacks</span><br><span class="line">  movl %esp, (%eax)</span><br><span class="line">  movl %edx, %esp</span><br><span class="line"></span><br><span class="line">  # Load new callee-save registers</span><br><span class="line">  popl %edi</span><br><span class="line">  popl %esi</span><br><span class="line">  popl %ebx</span><br><span class="line">  popl %ebp</span><br><span class="line">  ret</span><br></pre></td></tr></table></figure>
  代码的注释中指出，<code>swtch</code>函数接受两个参数:<code>void swtch(struct context **old, struct context *new);</code>，注意两个参数的类型不一样，前一个参数是一个指向<code>context</code>结构指针的指针。<br>  首先3,4两行代码取出了传给<code>swtch</code>的两个参数，其中<code>%eax</code>为<code>old</code>，<code>%edx</code>为<code>new</code>。<br>  7,8,9,10四行则按顺序保存四个寄存器，在保存之前，<code>%esp</code>中存储的内容为返回地址，之后按顺序压入<code>ebp</code>,<code>ebx</code>,<code>esi</code>,<code>edi</code>。操作完成后栈中结构如下：  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">地址高位</span><br><span class="line">	返回地址</span><br><span class="line">	ebp</span><br><span class="line">	ebx</span><br><span class="line">	esi</span><br><span class="line">	edi # 现在的栈顶</span><br><span class="line">地址地位</span><br></pre></td></tr></table></figure>
  可以发现这个结构对应的正是一个<code>context</code>结构，所以此时的<code>%esp</code>可以看作是一个指向一个<code>context</code>结构的指针。之后第13行，将这个指针保存在第一个参数指向的地方（第一个参数是一个指向<code>context</code>指针的指针），这里的实现相对我们做过的Nachos来说不太一样，所以后面会给出整理后的具体调度流程。  之后，第14行将用第二个参数替换栈顶，然后在17-20行恢复寄存器数据，此时的返回地址是要切换到的线程的返回地址，返回后另一个线程直接开始工作。</li>
</ul>
<h3 id="调度逻辑总结"><a href="#调度逻辑总结" class="headerlink" title="调度逻辑总结"></a>调度逻辑总结</h3><p>由于xv6是一个支持多核心的操作系统，在xv6中，每个核心都会有自己的一套上下文以及调度器。在上一部分的代码实现中可以看到，<code>swtch</code>函数的一个参数为<code>cpu-&gt;scheduler</code>。这是<code>struct cpu</code>中的一个成员变量，类型为<code>context *</code>，事实上，它指向的是调度器的上下文。</p>
<p>在xv6工作时，每个CPU会启动一个调度器，在<code>main()</code>函数中调用，调度器的完整代码如下所示：</p>
<ul>
<li><code>scheduler()</code>完整代码  <figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">scheduler</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">proc</span> *<span class="title">p</span>;</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (;;)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="comment">// 这里是我们之前解读过的核心代码</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<p>可见，这个调度器是不会返回的，一直在循环。代码在调度器中运行时，其实是<code>main()</code>函数的上下文，可以认为是主进程的上下文中（之后称为调度器上下文），然后从这里切换到其他的进程。所以在<code>scheduler()</code>中调用<code>swtch</code>函数时第一个参数为<code>&amp;cpu-&gt;scheduler</code>，将当前调度器进程的上下文保存在<code>cpu-&gt;scheduler</code>中，然后切换到目标进程的上下文中。</p>
<p>在当前工作的进程<code>yield()</code>时调用了<code>sched()</code>函数，而在这个函数中，我们可以看到调用<code>swtch</code>的函数为<code>swtch(&amp;proc-&gt;context, cpu-&gt;scheduler);</code>实际上当一个进程<code>yield()</code>之后，是先回到调度器进程中，之后再由调度器进程负责找到下一个进程再切换一次，实际上是两次切换，切换到目标进程的工作是由调度器进程完成的。</p>
<h2 id="总结及收获"><a href="#总结及收获" class="headerlink" title="总结及收获"></a>总结及收获</h2><p>懂得都懂</p>
]]></content>
      <categories>
        <category>课程作业</category>
        <category>操作系统</category>
      </categories>
      <tags>
        <tag>操作系统</tag>
        <tag>作业</tag>
      </tags>
  </entry>
  <entry>
    <title>《计算机网络概论》lab 2 ipv4分组收发</title>
    <url>/2021/04/14/%E3%80%8A%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E6%A6%82%E8%AE%BA%E3%80%8Blab-2-ipv4%E5%88%86%E7%BB%84%E6%94%B6%E5%8F%91/</url>
    <content><![CDATA[<h2 id="实验流程"><a href="#实验流程" class="headerlink" title="实验流程"></a>实验流程</h2><h3 id="实验要求"><a href="#实验要求" class="headerlink" title="实验要求"></a>实验要求</h3><p>根据计算机网络实验系统所提供的上下层接口函数和协议中分组收发的主要流程，独立设计实现一个简单的IPv4分组收发模块。要求实现的主要功能包括：</p>
<ol>
<li>IPv4分组的基本接收处理；</li>
<li>IPv4分组的封装发送。</li>
</ol>
<h3 id="实验思路"><a href="#实验思路" class="headerlink" title="实验思路"></a>实验思路</h3><p>在本次实验中，最重要的部分是理解IPv4的头部结构，应当使用合适的方法对头部信息进行读取、校验、写入等操作。在实验指导书中给出的头部信息结构如下：</p>
<p><img src="/2021/04/14/%E3%80%8A%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E6%A6%82%E8%AE%BA%E3%80%8Blab-2-ipv4%E5%88%86%E7%BB%84%E6%94%B6%E5%8F%91/lab2-1.png" alt="lab2-1"></p>
<p>在接收时，使用合适的方法读取并验证头部信息，写入时用合适的方法写入正确的值，就是我们本次实验需要完成的内容。</p>
<h3 id="实验细节"><a href="#实验细节" class="headerlink" title="实验细节"></a>实验细节</h3><h4 id="IPv4分组的基本接收处理"><a href="#IPv4分组的基本接收处理" class="headerlink" title="IPv4分组的基本接收处理"></a>IPv4分组的基本接收处理</h4><p>正如之前所述，本次实验的关键在于读取头部信息，首先我们对头部信息进行读取，代码如下：</p>
<ul>
<li><p>读取头部信息</p>
<p>在本次实验中，只需读取下列我们感兴趣的信息即可。需要注意的是在读取超过1个字节的值时需要将网络序转换为本地序。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 读取头部信息</span></span><br><span class="line"><span class="keyword">int</span> version = pBuffer[<span class="number">0</span>] &gt;&gt; <span class="number">4</span>;</span><br><span class="line"><span class="keyword">int</span> headLength = pBuffer[<span class="number">0</span>] &amp; <span class="number">0xf</span>; <span class="comment">//0b00001111</span></span><br><span class="line"><span class="keyword">int</span> timeToLive = (<span class="keyword">unsigned</span> <span class="keyword">short</span>) pBuffer[<span class="number">8</span>];</span><br><span class="line"><span class="keyword">int</span> headCheckSum = ntohs(*(<span class="keyword">unsigned</span> <span class="keyword">short</span> *) (pBuffer + <span class="number">10</span>));</span><br><span class="line"><span class="keyword">int</span> dstAddr = ntohl(*(<span class="keyword">unsigned</span> <span class="keyword">int</span> *) (pBuffer + <span class="number">16</span>));</span><br></pre></td></tr></table></figure></li>
<li><p>判断<code>timeToLive</code>值是否出错</p>
  <figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// TTL值出错</span></span><br><span class="line"><span class="keyword">if</span> (timeToLive &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="built_in">ip_DiscardPkt</span>(pBuffer, STUD_IP_TEST_TTL_ERROR);</span><br><span class="line">   <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>判断IP版本号是否出错</p>
  <figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// IP版本号错</span></span><br><span class="line"><span class="keyword">if</span> (version != <span class="number">4</span>) &#123;</span><br><span class="line">    <span class="built_in">ip_DiscardPkt</span>(pBuffer, STUD_IP_TEST_VERSION_ERROR);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>判断头部长度是否出错</p>
  <figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 头部长度错</span></span><br><span class="line"><span class="keyword">if</span> (headLength &lt; <span class="number">5</span>) &#123;</span><br><span class="line">    <span class="built_in">ip_DiscardPkt</span>(pBuffer, STUD_IP_TEST_HEADLEN_ERROR);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>校验<code>checksum</code>，直接把头部的长度按照规则相加，和应该为<code>0xffff</code></p>
<p>  这里要注意的细节是，由于我们用<code>unsigned short</code>进行计算，而<code>checksum</code>的规则要求如果相加大于<code>0xffff</code>，需要把高16位的值加到低16位上，因此，每次相加前我们需要判断相加是否大于<code>0xffff</code>，需要采用判断<code>0xffff - sum</code>和<code>temp</code>的关系来实现来避免溢出，如代码的11行所示。</p>
  <figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 校验checksum</span></span><br><span class="line"><span class="comment">// sum为计算的和</span></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">short</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="comment">// temp用于辅助计算</span></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">short</span> temp = <span class="number">0</span>;</span><br><span class="line"><span class="comment">// 每16字节为一组</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; headLength * <span class="number">2</span>; i++) &#123;</span><br><span class="line">    <span class="comment">// 注意字节序，前8位为高位，后8位为低位</span></span><br><span class="line">    temp = (((<span class="keyword">unsigned</span> <span class="keyword">char</span>) pBuffer[i * <span class="number">2</span>]) &lt;&lt; <span class="number">8</span>) + ((<span class="keyword">unsigned</span> <span class="keyword">char</span>) pBuffer[i * <span class="number">2</span> + <span class="number">1</span>]);</span><br><span class="line">    <span class="comment">// 如果相加之后进1，将进的1位加上</span></span><br><span class="line">    <span class="number">0xffff</span> - sum &lt; temp ? sum = sum + temp + <span class="number">1</span> : sum = sum + temp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 如果和不为0xffff，说明出错</span></span><br><span class="line"><span class="keyword">if</span> (sum != <span class="number">0xffff</span>) &#123;</span><br><span class="line">    <span class="built_in">ip_DiscardPkt</span>(pBuffer, STUD_IP_TEST_CHECKSUM_ERROR);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>如果经过上面的操作都没有返回，说明该分组没有问题，可以接受，如下</p>
  <figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//成功接受</span></span><br><span class="line">ip_SendtoUp(pBuffer, length);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="IPv4分组的封装发送"><a href="#IPv4分组的封装发送" class="headerlink" title="IPv4分组的封装发送"></a>IPv4分组的封装发送</h4><p>该部分主要需要实现对头部信息的写入。流程如下：</p>
<ul>
<li><p>首先，需要创建一个完整的分组结构</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 分配空间，头需要20字节，内容字节数为len</span></span><br><span class="line"><span class="keyword">char</span> *IPBuffer = (<span class="keyword">char</span> *) <span class="built_in">malloc</span>((<span class="number">20</span> + len) * <span class="keyword">sizeof</span>(<span class="keyword">char</span>));</span><br><span class="line"><span class="comment">// 将数据初始化为0</span></span><br><span class="line"><span class="built_in">memset</span>(IPBuffer, <span class="number">0</span>, len + <span class="number">20</span>);</span><br></pre></td></tr></table></figure></li>
<li><p>填充<code>Version</code>和<code>IHL</code>，内容为<code>0b10001001=0x45</code>，如下</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">IPBuffer[<span class="number">0</span>] = <span class="number">0x45</span>;</span><br></pre></td></tr></table></figure></li>
<li><p>计算分组长度，转换成网络序后填写</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"> <span class="comment">//分组总长度，需要转换成网络序</span></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">short</span> totalLength = htons(len + <span class="number">20</span>); </span><br><span class="line"><span class="comment">// 填写total_length信息</span></span><br><span class="line"><span class="built_in">memcpy</span>(IPBuffer + <span class="number">2</span>, &amp;totalLength, <span class="number">2</span>);</span><br></pre></td></tr></table></figure></li>
<li><p>填写<code>timeToLive</code>和<code>protocol</code></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">IPBuffer[<span class="number">8</span>] = timeToLive;        <span class="comment">//timeToLive</span></span><br><span class="line">IPBuffer[<span class="number">9</span>] = protocol;   <span class="comment">//协议</span></span><br></pre></td></tr></table></figure></li>
<li><p>填写源地址和目标地址，注意转换成网络序</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> src = htonl(srcAddr);</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> dst = htonl(dstAddr);</span><br><span class="line"><span class="built_in">memcpy</span>(IPBuffer + <span class="number">12</span>, &amp;src, <span class="number">4</span>);</span><br><span class="line"><span class="built_in">memcpy</span>(IPBuffer + <span class="number">16</span>, &amp;dst, <span class="number">4</span>);</span><br></pre></td></tr></table></figure></li>
<li><p>计算<code>checksum</code>，由于我们在刚开始就使用<code>memset</code>将所有位初始化为了<code>0</code>，因此我们在这里可以用和第一个实验一模一样的代码来计算<code>checksum</code>，放置<code>checksum</code>的字节现在值为0，并不会影响计算，之后，用<code>0xffff</code>减去我们计算的结果就是应该填充的<code>checksum</code>。代码如下：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">unsigned</span> <span class="keyword">short</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">short</span> temp = <span class="number">0</span>;</span><br><span class="line"><span class="comment">// 计算sum</span></span><br><span class="line"><span class="comment">// 此时原本的header checksum部分为0，因为已经memset过了，所以直接加就可以</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">    temp = (((<span class="keyword">unsigned</span> <span class="keyword">char</span>) IPBuffer[i * <span class="number">2</span>]) &lt;&lt; <span class="number">8</span>) + ((<span class="keyword">unsigned</span> <span class="keyword">char</span>) IPBuffer[i * <span class="number">2</span> + <span class="number">1</span>]);</span><br><span class="line">    <span class="number">0xffff</span> - sum &lt; temp ? sum = sum + temp + <span class="number">1</span> : sum = sum + temp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>以上代码为求和，以下为填充。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">unsigned</span> <span class="keyword">short</span> headCheckSum = <span class="number">0</span>;</span><br><span class="line">headCheckSum = htons(<span class="number">0xffff</span> - sum);</span><br><span class="line"><span class="comment">// 填充checksum值</span></span><br><span class="line"><span class="built_in">memcpy</span>(IPBuffer + <span class="number">10</span>, &amp;headCheckSum, <span class="number">2</span>);</span><br></pre></td></tr></table></figure></li>
<li><p>最后，将携带的信息填充并发送即可</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="built_in">memcpy</span>(IPBuffer + <span class="number">20</span>, pBuffer, len);</span><br><span class="line">ip_SendtoLower(IPBuffer, len + <span class="number">20</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br></pre></td></tr></table></figure></li>
</ul>
<p>至此，实验代码结束，在测试平台上测试通过。</p>
<h2 id="实验中遇到的问题"><a href="#实验中遇到的问题" class="headerlink" title="实验中遇到的问题"></a>实验中遇到的问题</h2><ol>
<li>本次实验较为顺利，没遇到太多的疑难问题。</li>
</ol>
<h2 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h2><p>完整代码即为将实验细节部分的代码拼凑而成，但还是在这里给出。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;sysInclude.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;malloc.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">extern</span> <span class="keyword">void</span> <span class="title">ip_DiscardPkt</span><span class="params">(<span class="keyword">char</span> *pBuffer, <span class="keyword">int</span> type)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">extern</span> <span class="keyword">void</span> <span class="title">ip_SendtoLower</span><span class="params">(<span class="keyword">char</span> *pBuffer, <span class="keyword">int</span> length)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">extern</span> <span class="keyword">void</span> <span class="title">ip_SendtoUp</span><span class="params">(<span class="keyword">char</span> *pBuffer, <span class="keyword">int</span> length)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">extern</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> <span class="title">getIpv4Address</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 头部一共有20个字节，以字节为单位结构如下:</span></span><br><span class="line"><span class="comment">// pBuffer[0] 高4位为Version 低4位为IHL</span></span><br><span class="line"><span class="comment">// pBuffer[1] 高6位为TypeOfService</span></span><br><span class="line"><span class="comment">// pBuffer[2]-pBuffer[3] Total Length</span></span><br><span class="line"><span class="comment">// pBuffer[4]-pBuffer[5] Identification</span></span><br><span class="line"><span class="comment">// pBuffer[6]的第6位第7位分别为MF和DF</span></span><br><span class="line"><span class="comment">// pBuffer[6]的前5位+pBuffer[7] 为Fragment offset</span></span><br><span class="line"><span class="comment">// pBuffer[8] : time to live</span></span><br><span class="line"><span class="comment">// pBuffer[9]: Protocol</span></span><br><span class="line"><span class="comment">// pBuffer[10]-pBuffer[11] Header checksum</span></span><br><span class="line"><span class="comment">// pBuffer[12]-pBuffer[15] source address </span></span><br><span class="line"><span class="comment">// pBuffer[16]-pBuffer[19] destination address</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">stud_ip_recv</span><span class="params">(<span class="keyword">char</span> *pBuffer, <span class="keyword">unsigned</span> <span class="keyword">short</span> length)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 读取头部信息</span></span><br><span class="line">    <span class="keyword">int</span> version = pBuffer[<span class="number">0</span>] &gt;&gt; <span class="number">4</span>;</span><br><span class="line">    <span class="keyword">int</span> headLength = pBuffer[<span class="number">0</span>] &amp; <span class="number">0xf</span>; <span class="comment">//0b00001111</span></span><br><span class="line">    <span class="keyword">int</span> timeToLive = (<span class="keyword">unsigned</span> <span class="keyword">short</span>) pBuffer[<span class="number">8</span>];</span><br><span class="line">    <span class="keyword">int</span> headCheckSum = <span class="built_in">ntohs</span>(*(<span class="keyword">unsigned</span> <span class="keyword">short</span> *) (pBuffer + <span class="number">10</span>));</span><br><span class="line">    <span class="keyword">int</span> dstAddr = <span class="built_in">ntohl</span>(*(<span class="keyword">unsigned</span> <span class="keyword">int</span> *) (pBuffer + <span class="number">16</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// TTL值出错</span></span><br><span class="line">    <span class="keyword">if</span> (timeToLive &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">ip_DiscardPkt</span>(pBuffer, STUD_IP_TEST_TTL_ERROR);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// IP版本号错</span></span><br><span class="line">    <span class="keyword">if</span> (version != <span class="number">4</span>) &#123;</span><br><span class="line">        <span class="built_in">ip_DiscardPkt</span>(pBuffer, STUD_IP_TEST_VERSION_ERROR);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 头部长度错</span></span><br><span class="line">    <span class="keyword">if</span> (headLength &lt; <span class="number">5</span>) &#123;</span><br><span class="line">        <span class="built_in">ip_DiscardPkt</span>(pBuffer, STUD_IP_TEST_HEADLEN_ERROR);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 目的地址错</span></span><br><span class="line">    <span class="keyword">if</span> (dstAddr != <span class="built_in">getIpv4Address</span>() &amp;&amp; dstAddr != <span class="number">0xffff</span>) &#123;</span><br><span class="line">        <span class="built_in">ip_DiscardPkt</span>(pBuffer, STUD_IP_TEST_DESTINATION_ERROR);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 校验checksum</span></span><br><span class="line">    <span class="comment">// sum为计算的和</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">short</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// temp用于辅助计算</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">short</span> temp = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 每16字节为一组</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; headLength * <span class="number">2</span>; i++) &#123;</span><br><span class="line">        <span class="comment">// 注意字节序，前8位为高位，后8位为低位</span></span><br><span class="line">        temp = (((<span class="keyword">unsigned</span> <span class="keyword">char</span>) pBuffer[i * <span class="number">2</span>]) &lt;&lt; <span class="number">8</span>) + ((<span class="keyword">unsigned</span> <span class="keyword">char</span>) pBuffer[i * <span class="number">2</span> + <span class="number">1</span>]);</span><br><span class="line">        <span class="comment">// 如果相加之后进1，将进的1位加上</span></span><br><span class="line">        <span class="number">0xffff</span> - sum &lt; temp ? sum = sum + temp + <span class="number">1</span> : sum = sum + temp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (sum != <span class="number">0xffff</span>) &#123;</span><br><span class="line">        <span class="built_in">ip_DiscardPkt</span>(pBuffer, STUD_IP_TEST_CHECKSUM_ERROR);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//成功接受</span></span><br><span class="line">    <span class="built_in">ip_SendtoUp</span>(pBuffer, length);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">stud_ip_Upsend</span><span class="params">(<span class="keyword">char</span> *pBuffer, <span class="keyword">unsigned</span> <span class="keyword">short</span> len, <span class="keyword">unsigned</span> <span class="keyword">int</span> srcAddr, <span class="keyword">unsigned</span> <span class="keyword">int</span> dstAddr, byte protocol, byte timeToLive)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 分配空间，头需要20字节，内容字节数为len</span></span><br><span class="line">    <span class="keyword">char</span> *IPBuffer = (<span class="keyword">char</span> *) <span class="built_in">malloc</span>((<span class="number">20</span> + len) * <span class="built_in"><span class="keyword">sizeof</span></span>(<span class="keyword">char</span>));</span><br><span class="line">    <span class="built_in">memset</span>(IPBuffer, <span class="number">0</span>, len + <span class="number">20</span>);</span><br><span class="line">    <span class="comment">// pBuffer[0] 高4位为Version 低4位为IHL</span></span><br><span class="line">    <span class="comment">// 0b10001001</span></span><br><span class="line">    IPBuffer[<span class="number">0</span>] = <span class="number">0x45</span>;</span><br><span class="line">    <span class="comment">//分组总长度，需要转换成网络序</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">short</span> totalLength = <span class="built_in">htons</span>(len + <span class="number">20</span>); </span><br><span class="line">    <span class="comment">// 填写total_length信息</span></span><br><span class="line">    <span class="built_in">memcpy</span>(IPBuffer + <span class="number">2</span>, &amp;totalLength, <span class="number">2</span>);</span><br><span class="line">    IPBuffer[<span class="number">8</span>] = timeToLive;        <span class="comment">//timeToLive</span></span><br><span class="line">    IPBuffer[<span class="number">9</span>] = protocol;   <span class="comment">//协议</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> src = <span class="built_in">htonl</span>(srcAddr);</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> dst = <span class="built_in">htonl</span>(dstAddr);</span><br><span class="line">    <span class="built_in">memcpy</span>(IPBuffer + <span class="number">12</span>, &amp;src, <span class="number">4</span>);   <span class="comment">//源与目的IP地址</span></span><br><span class="line">    <span class="built_in">memcpy</span>(IPBuffer + <span class="number">16</span>, &amp;dst, <span class="number">4</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">short</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">short</span> temp = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 计算checksum</span></span><br><span class="line">    <span class="comment">// 此时原本的header checksum部分为0，因为已经memset过了，所以直接加就可以</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">        temp = (((<span class="keyword">unsigned</span> <span class="keyword">char</span>) IPBuffer[i * <span class="number">2</span>]) &lt;&lt; <span class="number">8</span>) + ((<span class="keyword">unsigned</span> <span class="keyword">char</span>) IPBuffer[i * <span class="number">2</span> + <span class="number">1</span>]);</span><br><span class="line">        <span class="number">0xffff</span> - sum &lt; temp ? sum = sum + temp + <span class="number">1</span> : sum = sum + temp;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">short</span> headCheckSum = <span class="number">0</span>;</span><br><span class="line">    headCheckSum = <span class="built_in">htons</span>(<span class="number">0xffff</span> - sum);</span><br><span class="line">    <span class="built_in">memcpy</span>(IPBuffer + <span class="number">10</span>, &amp;headCheckSum, <span class="number">2</span>);</span><br><span class="line">    <span class="built_in">memcpy</span>(IPBuffer + <span class="number">20</span>, pBuffer, len);</span><br><span class="line">    <span class="built_in">ip_SendtoLower</span>(IPBuffer, len + <span class="number">20</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>课程作业</category>
        <category>计算机网络</category>
      </categories>
      <tags>
        <tag>作业</tag>
        <tag>计算机网络</tag>
      </tags>
  </entry>
  <entry>
    <title>《计算机网络概论》lab 3 ipv4路由</title>
    <url>/2021/04/14/%E3%80%8A%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E6%A6%82%E8%AE%BA%E3%80%8Blab-3-ipv4%E8%B7%AF%E7%94%B1/</url>
    <content><![CDATA[<h2 id="实验流程"><a href="#实验流程" class="headerlink" title="实验流程"></a>实验流程</h2><h3 id="实验要求"><a href="#实验要求" class="headerlink" title="实验要求"></a>实验要求</h3><p>在前面IPv4分组收发实验的基础上，增加分组转发功能。具体来说，对于每一个到达本机的IPv4分组，根据其目的IPv4地址决定分组的处理行为，对该分组进行如下的几类操作：</p>
<ol>
<li>向上层协议上交目的地址为本机地址的分组；</li>
<li>根据路由查找结果，丢弃查不到路由的分组；</li>
<li> 根据路由查找结果，向相应接口转发不是本机接收的分组。</li>
</ol>
<h3 id="实验思路"><a href="#实验思路" class="headerlink" title="实验思路"></a>实验思路</h3><p>在本次实验中，我们首先需要定义一个路由表结构，并且实现一个增加路由的函数。在实验指导书中给出了一种路由结构如下：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">stud_route_msg</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	<span class="keyword">unsigned</span> <span class="keyword">int</span> dest;</span><br><span class="line">	<span class="keyword">unsigned</span> <span class="keyword">int</span> masklen;</span><br><span class="line">	<span class="keyword">unsigned</span> <span class="keyword">int</span> nexthop;</span><br><span class="line">&#125; stud_route_msg;</span><br></pre></td></tr></table></figure>

<p>其中，<code>masklen</code>应当指子网掩码中从左往右数的1的个数而不是子网掩码的内容，这一点需要注意。因此，我们的路由表也仿照这样的结构设计即可。需要注意的是，由上层传来的路由表的数据是网络序，为了方便我们转换成本地序处理。</p>
<p>在接受分组时，首先应该查看目的地址是否为本机，然后查看该分组是否已经失效（例如<code>TTL</code>值小于等于0），然后在路由表中查找，查找不到则丢弃。</p>
<h3 id="实验细节"><a href="#实验细节" class="headerlink" title="实验细节"></a>实验细节</h3><h4 id="路由表的设计"><a href="#路由表的设计" class="headerlink" title="路由表的设计"></a>路由表的设计</h4><p>路由表设计如下，和实验系统中的设计一致。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">RouteInfo</span> &#123;</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> dest;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> masklen;   <span class="comment">// 子网掩码的长度（1的个数）</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> nexthop;</span><br><span class="line">    RouteInfo(<span class="keyword">int</span> d, <span class="keyword">int</span> m, <span class="keyword">int</span> n) &#123;</span><br><span class="line">        dest = d, masklen = m, nexthop = n;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">vector</span>&lt;RouteInfo&gt; routeTable;   <span class="comment">//路由表</span></span><br></pre></td></tr></table></figure>

<h4 id="初始化路由表函数"><a href="#初始化路由表函数" class="headerlink" title="初始化路由表函数"></a>初始化路由表函数</h4><p>初始化时清空路由表即可。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 初始化路由表</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">stud_Route_Init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    routeTable.clear();</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="增加一条新的路由信息"><a href="#增加一条新的路由信息" class="headerlink" title="增加一条新的路由信息"></a>增加一条新的路由信息</h4><p>注意需要将网络序转换为本地序。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 增加路由</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">stud_route_add</span><span class="params">(stud_route_msg *proute)</span> </span>&#123;</span><br><span class="line">    <span class="function">RouteInfo <span class="title">t</span><span class="params">(ntohl(proute-&gt;dest), proute-&gt;masklen, ntohl(proute-&gt;nexthop))</span></span>;</span><br><span class="line">    routeTable.push_back(t);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="系统处理收到的IP分组的函数"><a href="#系统处理收到的IP分组的函数" class="headerlink" title="系统处理收到的IP分组的函数"></a>系统处理收到的IP分组的函数</h4><ul>
<li><p>首先，读取我们感兴趣的头部信息</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 头部长度</span></span><br><span class="line">  <span class="keyword">int</span> headerLength = pBuffer[<span class="number">0</span>] &amp; <span class="number">0xf</span>;</span><br><span class="line">  <span class="comment">// timeToLive</span></span><br><span class="line">  <span class="keyword">int</span> timeToLive = (<span class="keyword">int</span>) pBuffer[<span class="number">8</span>];</span><br><span class="line">  <span class="comment">// 头部校验和</span></span><br><span class="line">  <span class="keyword">int</span> IHL = ntohs(*(<span class="keyword">unsigned</span> <span class="keyword">short</span> *) (pBuffer + <span class="number">10</span>));</span><br><span class="line">  <span class="comment">// 目的IP地址</span></span><br><span class="line">  <span class="keyword">int</span> dstAddr = ntohl(*(<span class="keyword">unsigned</span> <span class="keyword">int</span> *) (pBuffer + <span class="number">16</span>));</span><br></pre></td></tr></table></figure></li>
<li><p>判断<code>timeToLive</code>值是否出错</p>
  <figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 判断timeToLive</span></span><br><span class="line"><span class="keyword">if</span> (timeToLive &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="comment">// 错误</span></span><br><span class="line">     <span class="built_in">fwd_DiscardPkt</span>(pBuffer,STUD_FORWARD_TEST_TTLERROR);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>遍历路由表进行查找</p>
  <figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 遍历路由表</span></span><br><span class="line"><span class="keyword">for</span> (vector&lt;RouteInfo&gt;::iterator it = routeTable.<span class="built_in">begin</span>(); it != routeTable.<span class="built_in">end</span>(); it++) &#123;</span><br><span class="line">    <span class="comment">// 计算子网掩码</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> subnetMask = <span class="number">0xffffffff</span> &lt;&lt; (<span class="number">32</span> - it-&gt;masklen);</span><br><span class="line">    <span class="comment">// 查找路由表</span></span><br><span class="line">    <span class="keyword">if</span> ((it-&gt;dest &amp; subnetMask) == (dstAddr &amp; subnetMask)) &#123;</span><br><span class="line">        <span class="comment">// 如果找到了应该更新新的head信息</span></span><br><span class="line">        <span class="comment">// 构造新的ipv4头部内容</span></span><br><span class="line">        <span class="keyword">char</span> *buffer = <span class="keyword">new</span> <span class="keyword">char</span>[length];</span><br><span class="line">        <span class="built_in">memcpy</span>(buffer, pBuffer, length);</span><br><span class="line">        <span class="comment">// timeToLive-1</span></span><br><span class="line">        buffer[<span class="number">8</span>]--;</span><br><span class="line">        <span class="comment">// 清空checksum，便于之后求和计算</span></span><br><span class="line">        buffer[<span class="number">10</span>] = buffer[<span class="number">11</span>] = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 计算校验和</span></span><br><span class="line">        <span class="comment">// sum为计算的和</span></span><br><span class="line">        <span class="keyword">unsigned</span> <span class="keyword">short</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// temp用于辅助计算</span></span><br><span class="line">        <span class="keyword">unsigned</span> <span class="keyword">short</span> temp = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// 每16字节为一组</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; headLength * <span class="number">2</span>; i++) &#123;</span><br><span class="line">            <span class="comment">// 注意字节序，前8位为高位，后8位为低位</span></span><br><span class="line">            temp = (((<span class="keyword">unsigned</span> <span class="keyword">char</span>) buffer[i * <span class="number">2</span>]) &lt;&lt; <span class="number">8</span>) + ((<span class="keyword">unsigned</span> <span class="keyword">char</span>) buffer[i * <span class="number">2</span> + <span class="number">1</span>]);</span><br><span class="line">            <span class="comment">// 如果相加之后进1，将进的1位加上</span></span><br><span class="line">            <span class="number">0xffff</span> - sum &lt; temp ? sum = sum + temp + <span class="number">1</span> : sum = sum + temp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 计算并填充checkNum</span></span><br><span class="line">        <span class="keyword">unsigned</span> <span class="keyword">short</span> headCheckSum = <span class="built_in">htons</span>(<span class="number">0xffff</span> - sum);</span><br><span class="line">        <span class="built_in">memcpy</span>(buffer + <span class="number">10</span>, &amp;headCheckSum, <span class="number">2</span>);</span><br><span class="line">        <span class="comment">// 发送信息  </span></span><br><span class="line">        <span class="built_in">fwd_SendtoLower</span>(buffer, length, it-&gt;nexthop);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>如果遍历之后还没返回，说明没找到路由信息，丢弃。</p>
  <figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 没有路由器</span></span><br><span class="line"><span class="built_in">fwd_DiscardPkt</span>(pBuffer, STUD_FORWARD_TEST_NOROUTE);</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br></pre></td></tr></table></figure></li>
</ul>
<p>至此，实验代码结束，在测试平台上测试通过。</p>
<h2 id="实验中遇到的问题"><a href="#实验中遇到的问题" class="headerlink" title="实验中遇到的问题"></a>实验中遇到的问题</h2><ol>
<li>本次实验较为顺利，没遇到太多的疑难问题。</li>
</ol>
<h2 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h2><p>完整代码在这里给出。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;sysInclude.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> std::vector;</span><br><span class="line"><span class="comment">// system support</span></span><br><span class="line"><span class="function"><span class="keyword">extern</span> <span class="keyword">void</span> <span class="title">fwd_LocalRcv</span><span class="params">(<span class="keyword">char</span> *pBuffer, <span class="keyword">int</span> length)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">extern</span> <span class="keyword">void</span> <span class="title">fwd_SendtoLower</span><span class="params">(<span class="keyword">char</span> *pBuffer, <span class="keyword">int</span> length, <span class="keyword">unsigned</span> <span class="keyword">int</span> nexthop)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">extern</span> <span class="keyword">void</span> <span class="title">fwd_DiscardPkt</span><span class="params">(<span class="keyword">char</span> *pBuffer, <span class="keyword">int</span> type)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">extern</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> <span class="title">getIpv4Address</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">RouteInfo</span> &#123;</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> dest;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> masklen;   <span class="comment">// 子网掩码的长度（1的个数）</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> nexthop;</span><br><span class="line">    <span class="built_in">RouteInfo</span>(<span class="keyword">int</span> d, <span class="keyword">int</span> m, <span class="keyword">int</span> n) &#123;</span><br><span class="line">        dest = d, masklen = m, nexthop = n;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">vector&lt;RouteInfo&gt; routeTable;   <span class="comment">//路由表</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化路由表</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">stud_Route_Init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    routeTable.<span class="built_in">clear</span>();</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 增加路由</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">stud_route_add</span><span class="params">(stud_route_msg *proute)</span> </span>&#123;</span><br><span class="line">    <span class="function">RouteInfo <span class="title">t</span><span class="params">(ntohl(proute-&gt;dest), proute-&gt;masklen, ntohl(proute-&gt;nexthop))</span></span>;</span><br><span class="line">    routeTable.<span class="built_in">push_back</span>(t);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">stud_fwd_deal</span><span class="params">(<span class="keyword">char</span> *pBuffer, <span class="keyword">int</span> length)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 头部长度</span></span><br><span class="line">    <span class="keyword">int</span> headerLength = pBuffer[<span class="number">0</span>] &amp; <span class="number">0xf</span>;</span><br><span class="line">    <span class="comment">// timeToLive</span></span><br><span class="line">    <span class="keyword">int</span> timeToLive = (<span class="keyword">int</span>) pBuffer[<span class="number">8</span>];</span><br><span class="line">    <span class="comment">// 头部校验和</span></span><br><span class="line">    <span class="keyword">int</span> Head_Checksum = <span class="built_in">ntohs</span>(*(<span class="keyword">unsigned</span> <span class="keyword">short</span> *) (pBuffer + <span class="number">10</span>));</span><br><span class="line">    <span class="comment">// 目的IP地址</span></span><br><span class="line">    <span class="keyword">int</span> dstAddr = <span class="built_in">ntohl</span>(*(<span class="keyword">unsigned</span> <span class="keyword">int</span> *) (pBuffer + <span class="number">16</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果本机地址等于目的IP地址， 接收</span></span><br><span class="line">    <span class="keyword">if</span> (dstAddr == <span class="built_in">getIpv4Address</span>()) &#123;</span><br><span class="line">        <span class="built_in">fwd_LocalRcv</span>(pBuffer, length);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 判断timeToLive</span></span><br><span class="line">    <span class="keyword">if</span> (timeToLive &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">// 错误</span></span><br><span class="line">        <span class="built_in">fwd_DiscardPkt</span>(pBuffer, STUD_FORWARD_TEST_TTLERROR);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 遍历路由表</span></span><br><span class="line">    <span class="keyword">for</span> (vector&lt;RouteInfo&gt;::iterator it = routeTable.<span class="built_in">begin</span>(); it != routeTable.<span class="built_in">end</span>(); it++) &#123;</span><br><span class="line">        <span class="comment">// 计算子网掩码</span></span><br><span class="line">        <span class="keyword">unsigned</span> <span class="keyword">int</span> subnetMask = <span class="number">0xffffffff</span> &lt;&lt; (<span class="number">32</span> - it-&gt;masklen);</span><br><span class="line">        <span class="comment">// 查找路由表</span></span><br><span class="line">        <span class="keyword">if</span> ((it-&gt;dest &amp; subnetMask) == (dstAddr &amp; subnetMask)) &#123;</span><br><span class="line">            <span class="comment">// 构造新的ipv4头部内容</span></span><br><span class="line">            <span class="keyword">char</span> *buffer = <span class="keyword">new</span> <span class="keyword">char</span>[length];</span><br><span class="line">            <span class="built_in">memcpy</span>(buffer, pBuffer, length);</span><br><span class="line">            <span class="comment">// timeToLive-1</span></span><br><span class="line">            buffer[<span class="number">8</span>]--;</span><br><span class="line">            <span class="comment">// 清空checksum</span></span><br><span class="line">            buffer[<span class="number">10</span>] = buffer[<span class="number">11</span>] = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 计算校验和</span></span><br><span class="line">            <span class="comment">// sum为计算的和</span></span><br><span class="line">            <span class="keyword">unsigned</span> <span class="keyword">short</span> sum = <span class="number">0</span>;</span><br><span class="line">            <span class="comment">// temp用于辅助计算</span></span><br><span class="line">            <span class="keyword">unsigned</span> <span class="keyword">short</span> temp = <span class="number">0</span>;</span><br><span class="line">            <span class="comment">// 每16字节为一组</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; headLength * <span class="number">2</span>; i++) &#123;</span><br><span class="line">                <span class="comment">// 注意字节序，前8位为高位，后8位为低位</span></span><br><span class="line">                temp = (((<span class="keyword">unsigned</span> <span class="keyword">char</span>) buffer[i * <span class="number">2</span>]) &lt;&lt; <span class="number">8</span>) + ((<span class="keyword">unsigned</span> <span class="keyword">char</span>) buffer[i * <span class="number">2</span> + <span class="number">1</span>]);</span><br><span class="line">                <span class="comment">// 如果相加之后进1，将进的1位加上</span></span><br><span class="line">                <span class="number">0xffff</span> - sum &lt; temp ? sum = sum + temp + <span class="number">1</span> : sum = sum + temp;</span><br><span class="line">                <span class="comment">// if (0xffff - sum &lt; temp)</span></span><br><span class="line">                <span class="comment">//     sum = sum + temp + 1;</span></span><br><span class="line">                <span class="comment">// else</span></span><br><span class="line">                <span class="comment">//     sum = sum + temp;</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">unsigned</span> <span class="keyword">short</span> headCheckSum = <span class="built_in">htons</span>(<span class="number">0xffff</span> - sum);</span><br><span class="line">            <span class="built_in">memcpy</span>(buffer + <span class="number">10</span>, &amp;headCheckSum, <span class="number">2</span>);</span><br><span class="line">            </span><br><span class="line">            <span class="built_in">fwd_SendtoLower</span>(buffer, length, it-&gt;nexthop);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 没有路由器</span></span><br><span class="line">    <span class="built_in">fwd_DiscardPkt</span>(pBuffer, STUD_FORWARD_TEST_NOROUTE);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>课程作业</category>
        <category>计算机网络</category>
      </categories>
      <tags>
        <tag>作业</tag>
        <tag>计算机网络</tag>
      </tags>
  </entry>
  <entry>
    <title>OJ上的注意事项汇总 (21 fall)</title>
    <url>/2021/11/11/OJ%E4%B8%8A%E7%9A%84%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9%E6%B1%87%E6%80%BB/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="密码错误" data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="a6b1eab995475ebdfa15fa51b23158a154b77938acde9c4d082583db5b9b704a"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-wave">
      <input class="hbe hbe-input-field hbe-input-field-wave" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-wave" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-wave"></span>
      </label>
      <svg class="hbe hbe-graphic hbe-graphic-wave" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">
        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>
      </svg>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>计算概论C</category>
        <category>计算概论C(21 fall)</category>
      </categories>
      <tags>
        <tag>计算概论C(21 fall)</tag>
        <tag>计算概论C</tag>
      </tags>
  </entry>
  <entry>
    <title>《计算概论C》上机作业要求 (21 fall)</title>
    <url>/2021/11/11/%E3%80%8A%E8%AE%A1%E7%AE%97%E6%A6%82%E8%AE%BAC%E3%80%8B%E4%B8%8A%E6%9C%BA%E4%BD%9C%E4%B8%9A%E8%A6%81%E6%B1%82-2021-11-11/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="密码错误" data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="6f5a59f2c9f2307e404a42eb70700727138d5f1bacaaed42d807d74e51cc6c25"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-wave">
      <input class="hbe hbe-input-field hbe-input-field-wave" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-wave" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-wave"></span>
      </label>
      <svg class="hbe hbe-graphic hbe-graphic-wave" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">
        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>
      </svg>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>计算概论C</category>
        <category>计算概论C(21 fall)</category>
      </categories>
      <tags>
        <tag>计算概论C(21 fall)</tag>
        <tag>计算概论C</tag>
      </tags>
  </entry>
  <entry>
    <title>专题：浮点数的精度问题</title>
    <url>/2021/11/11/%E4%B8%93%E9%A2%98%EF%BC%9A%E6%B5%AE%E7%82%B9%E6%95%B0%E7%9A%84%E7%B2%BE%E5%BA%A6%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<p>一位同学曾经在群里问了这样一个问题：以下代码的输出为什么没有遵循遇5结果为偶的规则呢？</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="built_in">round</span>(<span class="number">3.155</span>,<span class="number">2</span>))</span><br><span class="line"><span class="comment"># 上述语句输出为3.15而不是3.16</span></span><br></pre></td></tr></table></figure>

<p>这是由于计算机表示数的能力有限导致的。我们应该都知道无限循环小数这个概念，在十进制下，许多有理数都是无限循环小数，例如<code>1/3</code>，<code>1/7</code>等。同理，在二进制下，同样有很多有理数也是无限循环小数，例如上面出现的这个<code>3.155</code>，转换成二进制的结果如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">11.001 00111101011100001010 00111101011100001010 001111...</span><br></pre></td></tr></table></figure>

<p>但是计算机表示一个数的时候，只能用有限的数位来表示，因此有些数字表示成二进制小数后就会被截断，从而比原来的值小（这个大小关系应该是显然的），因此，<code>3.155</code>这个数字在计算机中实际储存的值应该是一个比<code>3.155</code>更小的值，具体的值如下：</p>
<p><img src="/2021/11/11/%E4%B8%93%E9%A2%98%EF%BC%9A%E6%B5%AE%E7%82%B9%E6%95%B0%E7%9A%84%E7%B2%BE%E5%BA%A6%E9%97%AE%E9%A2%98/image-20211111104545769.png" alt="image-20211111104545769"></p>
<p>因此，保留到两位小数之后就会变成<code>3.15</code>而不是<code>3.16</code>。</p>
<p>这是一个很好的了解浮点数的精度问题的实例，你只要能通过这个例子认识到浮点数的精度问题大概是怎么来的就行了。</p>
]]></content>
      <categories>
        <category>计算概论C</category>
      </categories>
      <tags>
        <tag>计算概论C</tag>
        <tag>计算概论C专题</tag>
      </tags>
  </entry>
  <entry>
    <title>例题：打印月历</title>
    <url>/2021/11/11/%E4%BE%8B%E9%A2%98%EF%BC%9A%E6%89%93%E5%8D%B0%E6%9C%88%E5%8E%86/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="密码错误" data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="8406c4d0a70f4e9af50afb2efaa4c751160631fd8bea294f55f9e5c6c8032165"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-wave">
      <input class="hbe hbe-input-field hbe-input-field-wave" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-wave" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-wave"></span>
      </label>
      <svg class="hbe hbe-graphic hbe-graphic-wave" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">
        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>
      </svg>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>计算概论C</category>
        <category>例题</category>
      </categories>
      <tags>
        <tag>计算概论C(21 fall)</tag>
        <tag>计算概论C</tag>
      </tags>
  </entry>
  <entry>
    <title>必读：如何看加密文章</title>
    <url>/2021/11/11/%E5%A6%82%E4%BD%95%E7%9C%8B%E5%8A%A0%E5%AF%86%E6%96%87%E7%AB%A0/</url>
    <content><![CDATA[<p>当你点开一片文章时，如果发现长下面这样：</p>
<p><img src="/2021/11/11/%E5%A6%82%E4%BD%95%E7%9C%8B%E5%8A%A0%E5%AF%86%E6%96%87%E7%AB%A0/image-20211111025338844.png" alt="image-20211111025338844"></p>
<p>注意，这并不是一篇没有内容的文章，只是内容被加密了。中间那个横线就是密码输入框，在此处输入密码并按回车键就可以解密查看了！（手机也是按虚拟键盘上的回车键）</p>
<p>如下：</p>
<p><img src="/2021/11/11/%E5%A6%82%E4%BD%95%E7%9C%8B%E5%8A%A0%E5%AF%86%E6%96%87%E7%AB%A0/image-20211111025449872.png" alt="image-20211111025449872"></p>
]]></content>
      <categories>
        <category>计算概论C</category>
      </categories>
      <tags>
        <tag>计算概论C</tag>
      </tags>
  </entry>
  <entry>
    <title>《计算概论C》常见问题汇总</title>
    <url>/2021/11/11/%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98%E6%B1%87%E6%80%BB/</url>
    <content><![CDATA[<h1 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h1><p>在当助教的几个学期里，发现很多同学都会问一些相似的问题，这些问题的原因和解决方法都是类似的，但是在答疑时可能就需要反复的讲很多遍，这是非常没有效率的一件事。为了解决这个问题，决定在此开一个常见问题汇总，将常见的一些问题记录下来，方便同学们查阅，减少相似问题的提问次数，提高效率。</p>
<p>同学们的常见问题大概可以分为以下四类：</p>
<ol>
<li>编程环境上的问题，包括 VS Code 的使用，电脑上的 python 环境等</li>
<li>代码的语法错误，即由于写的语法不对造成的 syntax error</li>
<li>代码的运行时错误，即在代码运行过程中因为各种各样的 error 导致的程序 crash，没有正常退出</li>
<li>代码的逻辑错误，即<strong>纯粹</strong>由于逻辑写的有问题导致的得不到一个正确的结果</li>
</ol>
<p>其中，第2类错误是应该同学们自己解决的，当你发现你的报错里面出现了<code>syntax error</code>（即语法错误）的字样时且你还不理解为什么的时候，你应该去看ppt和老师的示例，对比哪里出现了问题。</p>
<p>而第4类错误是一个纯粹的debug的过程，不太好作为<strong>常见问题</strong>来总结，之后可以找一些同学们的错误代码来写写一个debug过程的示例，也欢迎同学们投稿自己的错误代码。</p>
<p>综上，我们在这里主要总结第1类和第3类错误，其中又以第3类错误为重点，因为第1类错误往往在前两次上机课的时候就会现场解决掉，所以不作为重点。</p>
<p>关于第2类错误，我也会<strong>随缘</strong>更新点东西进去。</p>
<p>如果你觉得有什么应该在这里写一下而现在还没写的东西，也可以积极来找助教提建议，建议采纳后会在对应的条目前加一句“来自xx级x同学的提议”。</p>
<p>随缘更新中。</p>
<h1 id="0-一些基本的知识"><a href="#0-一些基本的知识" class="headerlink" title="0. 一些基本的知识"></a>0. 一些基本的知识</h1><h2 id="请务必学会查看错误提示"><a href="#请务必学会查看错误提示" class="headerlink" title="请务必学会查看错误提示"></a>请务必学会查看错误提示</h2><h3 id="一个语法错误的例子"><a href="#一个语法错误的例子" class="headerlink" title="一个语法错误的例子"></a>一个语法错误的例子</h3><p>相信不少同学都遇到过类似下面这样的报错</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"> File &quot;...（这一长串是你的文件路径）\（这里是你的文件名）.py&quot;, line 5</span><br><span class="line">    for i in range(1,a+1)</span><br><span class="line">                        ^</span><br><span class="line">SyntaxError: invalid syntax</span><br></pre></td></tr></table></figure>

<p>请注意，这个错误提示中给出了足够多的<strong>用于定位错误</strong>的信息。</p>
<p>第1行，写出了产生错误的文件和行号，有的时候你会看到报错提示中有多个<code>File ....</code>，这与调用栈有关，但是你不需要理解调用栈这个奇怪的词组是什么意思，你<strong>只需要看最后一个<code>File</code>出现的地方</strong>，这个地方一般是你自己写的代码，你看文件名就知道是不是你自己写的了（如果不是，且你看不懂，且本文档中没有写，且你自己也查不到什么资料，在群里问就完事了）。在这一行的末尾，标了一个<code>line 5</code>，意思是这个错误发生在前面这个文件的第5行，非常直观。</p>
<p>第2行，写出了产生错误的代码，就是上述文件中第5行的那一句代码。</p>
<p>第3行，是一个箭头，这个箭头你可以理解为<strong>运行到这里的时候发现了错误</strong>，一般来说实际造成错误的代码就在标记的这个地方<strong>附近</strong>（附近的意思就是可能在上面可能在下面也可能就在这里），在本例中，产生错误的位置就是标记的地方，错误原因是少了一个冒号。</p>
<p>第4行，是错误类型及简单的说明。一般来说都是<code>XxxxError:xxxxxxxx</code>的形式，冒号前面是错误名，冒号后面是关于错误的简单说明。在本例中，<code>SyntaxError</code>就说明了这个错误是一个语法错误，冒号后面的那句话就是“错误的语法”，非常好理解。<strong>如果有不认识的词，可以先查一下</strong>。</p>
<p>在理想的情况下，我会在本文中更新一些常见的<code>XxxError</code>的说明，前期内容比较少的时候大家也可以积极提建议，我会优先更新出现频率比较高的错误。</p>
<h3 id="又一个语法错误的例子"><a href="#又一个语法错误的例子" class="headerlink" title="又一个语法错误的例子"></a>又一个语法错误的例子</h3><p>请看如下代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br><span class="line">a = math.sqrt(<span class="built_in">sum</span>(<span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">int</span>, <span class="built_in">input</span>().split())))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;test&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>运行此代码，报错提示如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">File &quot;xxx\text.py&quot;, line 3</span><br><span class="line">    print(&quot;test&quot;)</span><br><span class="line">    ^</span><br><span class="line">SyntaxError: invalid syntax</span><br></pre></td></tr></table></figure>

<p>同样是一个语法错误，箭头位置指向了第三行的开头，但是第三行怎么看也不像有错误的样子，这时候应该怎么办？</p>
<p><strong>注意，实际错误的地方可能在箭头的前面</strong>，箭头只是代表到了这个位置时发现了错误，既然位置在第三行开头，那说明实际的错误可能在第二行结尾。仔细看第二行，你会发现少了一个括号（可以数一下），加上一个括号就OK了。</p>
<h3 id="一个运行时错误的例子"><a href="#一个运行时错误的例子" class="headerlink" title="一个运行时错误的例子"></a>一个运行时错误的例子</h3><p>下面是某位同学作业中的代码片段：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">    s = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">6</span>):</span><br><span class="line">        s += random.rand()</span><br><span class="line">    average = s/<span class="number">6</span></span><br></pre></td></tr></table></figure>

<p>运行这个片段，会得到如下报错：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;...（这一长串是你的文件路径）\（这里是你的文件名）.py&quot;, line 4, in &lt;module&gt;</span><br><span class="line">    s +&#x3D; random.rand()</span><br><span class="line">AttributeError: module &#39;random&#39; has no attribute &#39;rand&#39;</span><br></pre></td></tr></table></figure>

<p>可以发现，这样的错误和语法错误不太一样，例如第1行多了一个<code>Traceback</code>，顾名思义，就是你代码的历史轨迹（因为有的时候实际错误不是在你写的代码的那个地方发生的），这里可能会有若干个<code>File ....</code>，但是正如前面说的，你看最后一个就行。</p>
<p>第2行和之前看到的一样，只是最后出现了一个<code>in &lt;module&gt;</code>，这里指出了是在哪个模块中产生的错误，你大可不用管。</p>
<p>第3行写出了产生错误的那一行代码，也是一样的。然后你会发现这里没有了之前语法错误时的那个指示箭头，这是因为语法错误可以很容易的发现在哪一处出错，而运行时错误大多是你某一行的语句产生了错误，因此只写了这一行就够了。</p>
<p>第4行写出了错误类型，是<code>AttributeError</code>，后面给出了一句简短的描述。如果你不知道这是什么意思，<strong>那么你就可以先来看看这个文档（当然也可以直接上网搜）</strong></p>
<h2 id="请务必学会使用搜索引擎（以及学会查阅课件及课本）"><a href="#请务必学会使用搜索引擎（以及学会查阅课件及课本）" class="headerlink" title="请务必学会使用搜索引擎（以及学会查阅课件及课本）"></a>请务必学会使用搜索引擎（以及学会查阅课件及课本）</h2><p>举个简单的例子，请看以下代码（可能有些同学对这个代码还挺眼熟的）：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="built_in">print</span>(random.random(<span class="number">0</span>, <span class="number">1</span>))</span><br></pre></td></tr></table></figure>

<p>运行以上代码，报错如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;xxx\text.py&quot;, line 2, in &lt;module&gt;</span><br><span class="line">    print(random.random(1, 2))</span><br><span class="line">TypeError: random() takes no arguments (2 given)</span><br></pre></td></tr></table></figure>

<p>注意第4行的提示，说<code>random()</code>这个方法不接受参数（<code>argument</code>就是我们讲函数时常说的那个参数，更准确的说，指的是实参），后面的括号里说<code>(2 given)</code>意思就是你给了它两个参数，当然，你确实给了它两个参数。</p>
<p>出现这样的问题，往往说明你这个方法用错了，用错的原因<strong>大概率是老师讲了PPT及课本写了但是你忘了</strong>。这种时候请查阅PPT、课本或者先自己搜索。当然最方便的是自己搜索，搜索教程如下：</p>
<p>首先打开<a href="https://cn.bing.com/">必应搜索</a>如下：</p>
<p><img src="/2021/11/11/%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98%E6%B1%87%E6%80%BB/image-20211111112856612.png" alt="image-20211111112856612"></p>
<p>一般来说，如果你想查找某个函数或者模块的信息，可以直接输<code>python3 xxxx</code>，其中<code>xxxx</code>是你要查找的函数或者模块。在本例中，你是想知道<code>random</code>模块的<code>random()</code>方法怎么用，那么你可以搜索<code>python3 random.random()</code>，前面使用<code>python3</code>是因为可能会搜到一些<code>python 2.x</code>版本的资料，所以明确一下版本。搜索结果如下：</p>
<p><img src="/2021/11/11/%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98%E6%B1%87%E6%80%BB/image-20211111113144011.png" alt="image-20211111113144011"></p>
<p>其中第一个链接是菜鸟教程，这个网站是一个还不错的中文python教程网站（我刚开始速成python的时候就是去翻了一下这个），基本上常见方法都有讲解以及实例，简洁明了。例如第一个链接点进去如下：</p>
<p><img src="/2021/11/11/%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98%E6%B1%87%E6%80%BB/image-20211111113327191.png" alt="image-20211111113327191"></p>
<p>相信你一看就能看懂。</p>
<p>另外，可以看到搜索结果第二条有一个类似的，那里面是<code>python2</code>的教程，所以一定注意，搜索的时候显示的指明：<strong>我要搜<code>python3</code>!</strong></p>
<p><strong>请注意，推荐用搜索引擎并不是助教想偷懒，而是因为一般来说网上都会有非常详细的资料，正如这个例子中所示，有说明有实例，这比我给你说要来的详细很多，毕竟助教也不是行走的文档，我们在自己写代码的时候也时不时要去查一下某个东西怎么用。</strong></p>
<p>另外，英文好的同学更推荐直接<code>google</code>用用英文搜，例如想搜<code>turtle</code>这个库怎么用，可以直接搜<code>python turtle doc</code>。结果如下：</p>
<p><img src="/2021/11/11/%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98%E6%B1%87%E6%80%BB/image-20211111113720394.png" alt="image-20211111113720394"></p>
<p>基本马上就能搜到第一手的官方文档，图中第一个就是。有兴趣的同学可以去看看<a href="https://docs.python.org/3/library/turtle.html">这个链接</a>，里面详细介绍了<code>turtle</code>这个库里都有什么方法。</p>
<p>（我点进去看了一下发现也是有对应的中文文档的，在<a href="https://docs.python.org/zh-cn/3/library/turtle.html">这个链接</a>，可以看到讲的非常详细了）</p>
<h2 id="如果你遇到了奇怪的错误"><a href="#如果你遇到了奇怪的错误" class="headerlink" title="如果你遇到了奇怪的错误"></a>如果你遇到了奇怪的错误</h2><p>如果你运行代码，但是在<code>terminal</code>里没有看到与上述报错提示类似的输出，请先尝试重启<code>VS Code</code>，仍然不行的话请在群里提问。</p>
<p>有一个比较常见的错误，当你发现你的<code>terminal</code>里显示了三个箭头<code>&gt;&gt;&gt;</code>时，如下：</p>
<p><img src="/2021/11/11/%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98%E6%B1%87%E6%80%BB/image-20211111120400691.png" alt="image-20211111120400691"></p>
<p>这是因为你可能无意间启动了一个<code>python</code>解释器环境，在这个环境下你可以直接输入python代码并按回车，这里就会直接输出结果。此时你直接使用<code>F5</code>运行会报错，退出这个环境就好了，可以输入<code>exit()</code>加回车或者<code>ctrl + z</code>（按键盘）加回车来退出，可以自己试试。</p>
<h1 id="1-环境相关的错误"><a href="#1-环境相关的错误" class="headerlink" title="1. 环境相关的错误"></a>1. 环境相关的错误</h1><h1 id="2-语法错误"><a href="#2-语法错误" class="headerlink" title="2. 语法错误"></a>2. 语法错误</h1><h2 id="SyntaxError"><a href="#SyntaxError" class="headerlink" title="SyntaxError"></a><code>SyntaxError</code></h2><p>请根据第0节的示例确定你的错误位置并检查你的代码。</p>
<h2 id="TabError"><a href="#TabError" class="headerlink" title="TabError"></a><code>TabError</code></h2><p>请看以下代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;hi&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;hello&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>是不是看起来没什么问题？但是当你运行时你可能会发现下面这个报错：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">File &quot;xxx\text.py&quot;, line 3</span><br><span class="line">    print(&quot;hello&quot;)</span><br><span class="line">                 ^</span><br><span class="line">TabError: inconsistent use of tabs and spaces in indentation</span><br></pre></td></tr></table></figure>

<p>阅读报错提示可知，错误原因是混用了<code>tab</code>和<code>space</code>，其中的<code>tab</code>指制表符，对应的转义字符为<code>\t</code>，<code>space</code>就是普通的空格。python中是允许使用制表符或者空格来进行缩进的，但是<strong>不能混用</strong>。一般来说，为了在各个地方阅读的代码都是一致的，强烈建议使用<strong>四个空格</strong>来缩进，如果你使用的是 VS code，那么在其默认设置中，你按一下<code>tab</code>键，实际上会打出四个空格（即<code>soft tab</code>），所以你不用管这个事情。一般这个问题常常出现在你从别的地方复制代码时（例如老师的某些示例代码）。</p>
<p>那么怎么分辨出是<code>tab</code>还是<code>space</code>呢？在 VS Code 中，你可以选中你的代码，如下：</p>
<p><img src="/2021/11/11/%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98%E6%B1%87%E6%80%BB/image-20211111125334189.png" alt="image-20211111125334189"></p>
<p>可以看到，同样是空白的部分，第2行显示的是四个点，第三行显示的是一个箭头，点表示的就是空格，箭头表示的是<code>tab</code>。</p>
<p><strong>如何改正</strong>：请统一使用四个空格缩进。</p>
<p><strong>拓展阅读</strong>：空格与制表符的区别、硬tab与软tab</p>
<p>（请自行在搜索引擎中使用提供的关键词搜索相关资料）</p>
<h1 id="3-运行时的各种错误"><a href="#3-运行时的各种错误" class="headerlink" title="3. 运行时的各种错误"></a>3. 运行时的各种错误</h1><h2 id="AttributeError"><a href="#AttributeError" class="headerlink" title="AttributeError"></a><code>AttributeError</code></h2><p>继续用在第0部分使用过的这个示例代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">    s = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">6</span>):</span><br><span class="line">        s += random.rand()</span><br><span class="line">    average = s/<span class="number">6</span></span><br></pre></td></tr></table></figure>

<p>运行这个片段，会得到如下报错：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;xxx\text.py&quot;, line 4, in &lt;module&gt;</span><br><span class="line">    s +&#x3D; random.rand()</span><br><span class="line">AttributeError: module &#39;random&#39; has no attribute &#39;rand&#39;</span><br></pre></td></tr></table></figure>

<p><code>Arrtibute Error</code>，即属性错误，简单理解就是<strong>这个库里没有这个东西</strong>，这个东西<strong>可能是一个常量</strong>，例如<code>math.pi</code>，<strong>可能是一个函数</strong>，例如<code>random.random()</code>，<strong>可能是一个成员变量</strong>（如果课程中学了<code>class</code>就知道在说什么了）。</p>
<p>那么到底是什么东西没有呢，请看后面的说明。后面这句话说了模块<code>random</code>中没有<code>rand</code>这个属性，但是你代码中写了<code>random.rand()</code>，这就是错误的原因。</p>
<p><strong>如何改正</strong>：检查拼写错误，看看是不是拼错了，或者干脆就脑补出来一个名字写了上去。</p>
<h2 id="RecursionError"><a href="#RecursionError" class="headerlink" title="RecursionError"></a><code>RecursionError</code></h2><blockquote>
<p>RecursionError: maximum recursion depth exceeded while calling a Python object</p>
</blockquote>
<p>在同学们学到递归之后，可以遇到的错误种类又增加了！在开始示例之前，请牢记<code>recursion</code>这个词在计算机术语中就指的是递归。</p>
<p>我们已经知道，递归调用说白了就是自己调用自己（当然也可以是间接的自己调用自己，例如A调用B，B中又调用A）。在编写递归程序时最需要关注的一个问题就是：<strong>你这个程序能不能停下来</strong>。这是一个很简单的道理，如果一个函数在执行过程中调用了自己，下一次调用中又调用了自己……之后的每次执行都调用自己，子子孙孙无穷匮也，那这个程序显然是不能结束的，类似死循环。但是与死循环不同的是，在计算机中，每一次的调用是会产生额外开销的，例如需要更多的内存，所以有限的计算机资源是无法满足你无限的递归需求的。在<code>python</code>中，这种无限递归产生的最终结果就是报一个<code>RecursionError</code>错误。</p>
<p>我们可以很容易的复现这个错误，编写代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span>(<span class="params">n</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(n)</span><br><span class="line">    f(n - <span class="number">1</span>)</span><br><span class="line">f(<span class="number">10</span>)</span><br></pre></td></tr></table></figure>

<p>显然，因为这个代码中并不能使递归终结，所以就会无限调用下去直到报错。可以尝试运行这个代码，马上就可以收获错误。</p>
<p><strong>如何改正</strong>：检查你的递归是否能够终结，如果你认为你明明写了递归终结条件（即满足某某条件时就不再继续调用自己了而是直接返回）但还是报了这个错误，那大概率就是你的递归终结条件始终没有满足，你可以通过<code>print()</code>debug法来观察你的递归条件的变化，看看哪里出错了。</p>
<p>例如上述示例代码可以修改为如下形式，就可以正常运行了：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span>(<span class="params">n</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(n)</span><br><span class="line">    <span class="keyword">if</span> n &gt; <span class="number">0</span>:</span><br><span class="line">        f(n - <span class="number">1</span>)</span><br><span class="line">f(<span class="number">10</span>)</span><br></pre></td></tr></table></figure>



<h1 id="4-一些debug思路示例"><a href="#4-一些debug思路示例" class="headerlink" title="4. 一些debug思路示例"></a>4. 一些debug思路示例</h1>]]></content>
      <categories>
        <category>计算概论C</category>
      </categories>
      <tags>
        <tag>计算概论C</tag>
      </tags>
  </entry>
  <entry>
    <title>改作业时发现的常见问题 (21 fall)</title>
    <url>/2021/11/11/%E6%94%B9%E4%BD%9C%E4%B8%9A%E6%97%B6%E5%8F%91%E7%8E%B0%E7%9A%84%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="密码错误" data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="2321f0550efe5034ee0dcc5835bb7ff88fd4c05c5b42a47fe27903eb51000da0"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-wave">
      <input class="hbe hbe-input-field hbe-input-field-wave" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-wave" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-wave"></span>
      </label>
      <svg class="hbe hbe-graphic hbe-graphic-wave" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">
        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>
      </svg>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>计算概论C</category>
        <category>计算概论C(21 fall)</category>
      </categories>
      <tags>
        <tag>计算概论C(21 fall)</tag>
        <tag>计算概论C</tag>
      </tags>
  </entry>
  <entry>
    <title>《计算机网络概论》lab 1 滑动窗口</title>
    <url>/2021/04/13/%E3%80%8A%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E6%A6%82%E8%AE%BA%E3%80%8Blab-1-%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3/</url>
    <content><![CDATA[<h2 id="实验流程"><a href="#实验流程" class="headerlink" title="实验流程"></a>实验流程</h2><h3 id="实验要求"><a href="#实验要求" class="headerlink" title="实验要求"></a>实验要求</h3><p>本次实验要求在一个数据链路层的模拟实现环境下，用C语言实现三个数据链路层协议：1比特滑动窗口协议、回退N帧滑动窗口协议、选择性重传协议。</p>
<h3 id="实验思路"><a href="#实验思路" class="headerlink" title="实验思路"></a>实验思路</h3><p>通过阅读实验指导书可以发现，回退N帧滑动窗口协议是最重要的一个，其他两个协议都可以看作在此基础上的一点小修改，所以本次实验中最重要的一点是实现回退N帧滑动窗口协议。<br>在回退N帧实验中，系统和我需要实现的函数的函数交互方式如下：</p>
<blockquote>
<p><strong>等停协议和回退N帧协议：</strong><br>当发送端需要发送帧时，会调用学生测试函数，并置参数<code>messageType</code>为<code>MSG_TYPE_SEND</code>，测试函数应该将该帧缓存，存入发送队列中。若发送窗口还未打开到规定限度，则打开一个窗口，并将调用<code>SendFRAMEPacket</code>函数将该帧发送。若发送窗口已开到限度，则直接返回，相当于直接进入等待状态。</p>
<p>当发送端收到接收端的<code>ACK</code> 后，会调用学生测试函数，并置参数<code>messageType</code>为<code>MSG_TYPE_RECEIVE</code>，测试函数应该检查<code>ACK</code>值后，将该<code>ACK</code> 对应的窗口关闭。由于关闭了窗口，等待发送的帧可以进入窗口并发送，因此，此时若发送队列中存在等待发送的帧应该将一个等待发送的帧发送并打开一个新的窗口。</p>
<p>发送每发送一个帧，系统都会为他创建一个定时器，当被成功<code>ACK</code> 后，定时器会被取消，若某个帧在定时器超时时间仍未被<code>ACK</code>，系统则会调用测试函数，并置参数<code>messageType</code> 为<code>MSG_TYPE_TIMEOUT</code>，告知测试函数某帧超时，测试函数应该将根据帧序号将该帧以及后面发送过的帧重新发送。</p>
</blockquote>
<p>可见，系统通过反复调用我实现的函数，通过<code>messageType</code>来标注是什么样的操作要求。因此我们可以考虑通过<code>switch</code>来区分开不同的操作，每个操作进行单独的实现。除此之外，在运行过程中，还有数据保存要求，所以我们需要全局变量或者静态变量来存储一些数据，考虑到每个函数功能的单独性，用静态变量实现会更优雅，在本次实验中选择这样实现。</p>
<h3 id="实验细节"><a href="#实验细节" class="headerlink" title="实验细节"></a>实验细节</h3><p>正如之前所述，我将以回退N帧数函数为基础完成整个实验，在此部分进行一些代码细节的说明。<br>首先，定义的一些常量以及结构如下：</p>
<ul>
<li><p>两个窗口大小的常量</p>
  <figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> WINDOW_SIZE_STOP_WAIT 1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> WINDOW_SIZE_BACK_N_FRAME 4</span></span><br></pre></td></tr></table></figure></li>
<li><p>表示帧状态的枚举型</p>
  <figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">enum</span> &#123;</span></span><br><span class="line">    data,</span><br><span class="line">    ack,</span><br><span class="line">    nak</span><br><span class="line">&#125; frame_kind;</span><br></pre></td></tr></table></figure></li>
<li><p>系统中定义的<code>frame</code>结构</p>
  <figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">frame_head</span> &#123;</span></span><br><span class="line">    frame_kind kind;		<span class="comment">// 帧类型</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> seq;		<span class="comment">// 序列号</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> ack;		<span class="comment">// 确认号</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> data[<span class="number">100</span>];<span class="comment">//数据</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">frame</span> &#123;</span></span><br><span class="line">    frame_head head;		<span class="comment">//帧头</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> size;  	<span class="comment">//帧的大小</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li>
<li><p>自定义的用于存储帧的<code>Buffer</code>结构。其中<code>pBuffer</code>和<code>pFrame</code>指针指向同一片地方只是生命的类型不同，主要是便于之后调用时不再手动强制类型转换。</p>
  <figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Buffer</span> &#123;</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> *pBuffer;	<span class="comment">// 向`SendFRAMEPacket`函数传的第一个参数</span></span><br><span class="line">    frame *pFrame; 			<span class="comment">// 存储的frame的指针</span></span><br><span class="line">    <span class="keyword">int</span> bufferSize;			<span class="comment">// size，向`SendFRAMEPacket`函数传的第二个参数</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">Buffer</span>() &#123;</span><br><span class="line">        <span class="comment">// 分配一块储存frame的空间</span></span><br><span class="line">        pFrame = <span class="keyword">new</span> <span class="built_in">frame</span>();	</span><br><span class="line">        <span class="comment">// 将分配的地址指针赋值给pBuffer</span></span><br><span class="line">        pBuffer = (<span class="keyword">unsigned</span> <span class="keyword">char</span> *) pFrame;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 用于储存frame的工具成员函数</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">save</span><span class="params">(<span class="keyword">char</span> *_pBuffer, <span class="keyword">int</span> _bufferSize)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 注意不能是复制指针，而是需要把内容复制过来</span></span><br><span class="line">        (*pFrame) = *((frame *) _pBuffer);</span><br><span class="line">        bufferSize = _bufferSize;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li>
<li><p>一个用于通过指针获得<code>ACK</code>的宏函数</p>
  <figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> GET_ACK(pBuffer) ntohl(((frame *) pBuffer)-&gt;head.ack)</span></span><br></pre></td></tr></table></figure></li>
</ul>
<p>之后，回退N帧测试函数<code>stud_slide_window_back_n_frame</code>内定义的用于存储数据的静态变量如下：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">stud_slide_window_back_n_frame</span><span class="params">(<span class="keyword">char</span> *pBuffer, <span class="keyword">int</span> bufferSize, UINT8 messageType)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> lower = <span class="number">0</span>, upper = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">static</span> queue&lt;Buffer&gt; wait_queue;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">static</span> <span class="keyword">int</span> WINDOW_SIZE = WINDOW_SIZE_BACK_N_FRAME;</span><br><span class="line">    <span class="keyword">static</span> Buffer windows[WINDOW_SIZE];</span><br><span class="line">    </span><br><span class="line">    <span class="built_in"><span class="keyword">switch</span></span> (messageType) &#123;</span><br><span class="line">        <span class="comment">// switch body .......</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>其中各变量的意义如下：</p>
<ul>
<li><code>lower</code>: 滑动窗口的下界</li>
<li><code>upper</code>: 滑动窗口上界的下一个</li>
<li><code>wait_queue</code>: 由于窗口打开到上限不能直接<code>send</code>的帧的等待队列</li>
<li><code>WINDOW_SIZE</code>: 在本函数中的窗口大小，每个函数中可能不一样</li>
<li><code>windows[WINDOW_SIZE]</code>: 用于存储各窗口发出的帧的数组，大小和窗口大小一样</li>
</ul>
<p>此外，需要注意的是，实际打开的窗口的<strong>窗口号</strong>下界为<code>lower % WINDOW_SIZE</code>，上界的下一个<strong>窗口号</strong>为<code>(upper + 1) % WINDOW_SIZE</code>。因为实际窗口号是在一定范围内轮流使用，例如<code>0,1,2,3,0,1,2,...</code>这样，但是如果将下界和上界直接这样表示有时会带来额外的麻烦，例如当窗口大小为1时，只存在一个窗口号<code>0</code>，此时<strong>上界的下一个窗口号</strong>也还是<code>0</code>，刚开始实现时就是因为这样，导致回退N帧测试函数不能直接修改<code>WINDOW_SIZE</code>来用在等停测试函数中。</p>
<p>之后便是<code>swtich</code>中各个功能的实现，实现细节如下：</p>
<ul>
<li><code>MSG_TYPE_SEND</code>  <figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">case</span> MSG_TYPE_SEND: &#123;</span><br><span class="line">	<span class="comment">// 保存帧的内容</span></span><br><span class="line">	Buffer buffer;</span><br><span class="line">	buffer.<span class="built_in">save</span>(pBuffer, bufferSize);</span><br><span class="line">	wait_queue.<span class="built_in">push</span>(buffer);</span><br><span class="line">	<span class="comment">// 发送等待序列中的帧</span></span><br><span class="line">    <span class="comment">// 当队列不为空且窗口大小小于最大大小时进行发送。</span></span><br><span class="line">	<span class="keyword">while</span> (!wait_queue.<span class="built_in">empty</span>() &amp;&amp; (upper - lower &lt; WINDOW_SIZE)) &#123;</span><br><span class="line">        <span class="comment">// 从队列头取出一个并发送</span></span><br><span class="line">		Buffer buffer = wait_queue.<span class="built_in">front</span>();</span><br><span class="line">		wait_queue.<span class="built_in">pop</span>();</span><br><span class="line">		<span class="built_in">SendFRAMEPacket</span>(buffer.pBuffer, buffer.bufferSize);</span><br><span class="line">        <span class="comment">// 将发送的帧储存在对应窗口中</span></span><br><span class="line">		windows[upper % WINDOW_SIZE] = buffer;</span><br><span class="line">		upper++;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><code>MSG_TYPE_RECEIVE</code>  <figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">case</span> MSG_TYPE_RECEIVE: &#123;</span><br><span class="line">    <span class="comment">// 读取收到的ack</span></span><br><span class="line">	<span class="keyword">int</span> ack = <span class="built_in">GET_ACK</span>(pBuffer);</span><br><span class="line">    <span class="comment">// 从目前的打开的窗口中寻找seq=ack的窗口</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = lower; i &lt; upper; i++) &#123;</span><br><span class="line">		<span class="keyword">if</span> (<span class="built_in">ntohl</span>(windows[i % WINDOW_SIZE].pFrame-&gt;head.seq) == ack) &#123;</span><br><span class="line">            <span class="comment">// 如果找到，说明i窗口以及之前的窗口已经被成功接受，则下界应当更新为i + 1</span></span><br><span class="line">			lower = i + <span class="number">1</span>;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// 此时如果能继续发送则继续发送，该部分发送函数的逻辑和`case MSG_TYPE_SEND`中的对应部分一模一样</span></span><br><span class="line">	<span class="keyword">while</span> (!wait_queue.<span class="built_in">empty</span>() &amp;&amp; (upper - lower &lt; WINDOW_SIZE)) &#123;</span><br><span class="line">		Buffer buffer = wait_queue.<span class="built_in">front</span>();</span><br><span class="line">		wait_queue.<span class="built_in">pop</span>();</span><br><span class="line">		<span class="built_in">SendFRAMEPacket</span>(buffer.pBuffer, buffer.bufferSize);</span><br><span class="line">		windows[upper % WINDOW_SIZE] = buffer;</span><br><span class="line">		upper++;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><code>MSG_TYPE_TIMEOUT</code>:  <figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">case</span> MSG_TYPE_TIMEOUT: &#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = lower; i &lt; upper; i++) &#123;</span><br><span class="line">		Buffer buffer = windows[i % WINDOW_SIZE];</span><br><span class="line">		<span class="built_in">SendFRAMEPacket</span>(buffer.pBuffer, buffer.bufferSize);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
以上便是回退N帧协议的实现细节。在实现中要注意的几个点，从<code>pFrame</code>中读取数据时（在本次实验中要读取的为<code>seq</code>、<code>ack</code>、<code>kind</code>），要注意大小端的转换，直接用<code>ntohl()</code>函数即可。在这种实现中，实现等停协议只需要将<code>WINDOW_SIZE</code>设置成<code>WINDOW_SIZE_STOP_WAIT</code>（即为1）即可，此外<strong>不需要任何的修改</strong>。</li>
</ul>
<p>选择性重传函数中，取消了<code>MSG_TYPE_TIMEOUT</code>这种类型，只需要对<code>case MSG_TYPE_RECEIVE</code>做一些修改即可，修改如下：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">case</span> MSG_TYPE_RECEIVE: &#123;</span><br><span class="line">    <span class="comment">// 读取`kind`区分是`ack`还是`nak`</span></span><br><span class="line">	<span class="keyword">int</span> kind = <span class="built_in">ntohl</span>(((frame *) pBuffer)-&gt;head.kind);</span><br><span class="line">    <span class="comment">// 如果kind是`ack`，和之前的处理一模一样，此处略</span></span><br><span class="line">	<span class="keyword">if</span> (kind == ack) &#123;</span><br><span class="line">		<span class="comment">/* ... */</span></span><br><span class="line">	&#125;</span><br><span class="line">    <span class="comment">// 如果kind是`nak`，则将帧中的`ack`表示的帧号找出来重发</span></span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span> (kind == nak) &#123;</span><br><span class="line">		<span class="keyword">int</span> nak = <span class="built_in">GET_ACK</span>(pBuffer);</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = lower; i &lt; upper; i++) &#123;</span><br><span class="line">            <span class="comment">// 遍历找到缓存的帧中seq等于读出的ack（在这里用变量nak表示）的帧</span></span><br><span class="line">			<span class="keyword">if</span> (<span class="built_in">ntohl</span>(windows[i % WINDOW_SIZE].pFrame-&gt;head.seq) == nak) &#123;</span><br><span class="line">				Buffer buffer = windows[i % WINDOW_SIZE];</span><br><span class="line">				<span class="built_in">SendFRAMEPacket</span>(buffer.pBuffer, buffer.bufferSize);</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>至此，该实验结束。</p>
<h2 id="实验中遇到的问题"><a href="#实验中遇到的问题" class="headerlink" title="实验中遇到的问题"></a>实验中遇到的问题</h2><ol>
<li>不熟悉实验系统，实验系统对一些错误也不能很好的反馈。例如刚开始的时候，由于代码实现中将<code>Buffer</code>这个辅助结构当成一个<code>class</code>来使用，写了析构函数，并在析构函数中进行了<code>delete</code>操作，但是由于忽略了局部变量作用域的问题，导致了某些指针被重复释放，出了错误，但是在实验系统中并没有报错，只是单纯的卡住不动，最后因为过去的一点点经验想到了可能是指针相关的错误，最后才找到了这个问题。</li>
<li>还没找到很方便的debug方法，在做实验时还是通过最原始的输出log来寻找问题，实验系统中的单步调试功能也没太用习惯。</li>
<li>对大小端转换的问题还没有形成习惯，漏了好几次转换，运行出错了才发现没写。</li>
</ol>
<h2 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h2><p>由于三个函数的代码重复性很高，而且前面已经给出了详解，因此在完整代码部分删去了注释。代码说明见前面<strong>实验细节</strong>部分。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;sysinclude.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">extern</span> <span class="keyword">void</span> <span class="title">SendFRAMEPacket</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">char</span> *pData, <span class="keyword">unsigned</span> <span class="keyword">int</span> len)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> WINDOW_SIZE_STOP_WAIT 1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> WINDOW_SIZE_BACK_N_FRAME 4</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">enum</span> &#123;</span></span><br><span class="line">    data,</span><br><span class="line">    ack,</span><br><span class="line">    nak</span><br><span class="line">&#125; frame_kind;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">frame_head</span> &#123;</span></span><br><span class="line">    frame_kind kind;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> seq;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> ack;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> data[<span class="number">100</span>];</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">frame</span> &#123;</span></span><br><span class="line">    frame_head head;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> size;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Buffer</span> &#123;</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> *pBuffer;</span><br><span class="line">    frame *pFrame;</span><br><span class="line">    <span class="keyword">int</span> bufferSize;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">Buffer</span>() &#123;</span><br><span class="line">        pFrame = <span class="keyword">new</span> <span class="built_in">frame</span>();</span><br><span class="line">        pBuffer = (<span class="keyword">unsigned</span> <span class="keyword">char</span> *) pFrame;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">save</span><span class="params">(<span class="keyword">char</span> *_pBuffer, <span class="keyword">int</span> _bufferSize)</span> </span>&#123;</span><br><span class="line">        (*pFrame) = *((frame *) _pBuffer);</span><br><span class="line">        bufferSize = _bufferSize;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> GET_ACK(pBuffer) ntohl(((frame *) pBuffer)-&gt;head.ack)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 停等协议测试函数</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">stud_slide_window_stop_and_wait</span><span class="params">(<span class="keyword">char</span> *pBuffer, <span class="keyword">int</span> bufferSize, UINT8 messageType)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 使用static变量来持久化</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> lower = <span class="number">0</span>, upper = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">static</span> queue&lt;Buffer&gt; wait_queue;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">static</span> <span class="keyword">int</span> WINDOW_SIZE = WINDOW_SIZE_STOP_WAIT;</span><br><span class="line">    <span class="keyword">static</span> Buffer windows[WINDOW_SIZE];</span><br><span class="line"></span><br><span class="line">    <span class="built_in"><span class="keyword">switch</span></span> (messageType) &#123;</span><br><span class="line">        <span class="keyword">case</span> MSG_TYPE_SEND: &#123;</span><br><span class="line">            Buffer buffer;</span><br><span class="line">            buffer.<span class="built_in">save</span>(pBuffer, bufferSize);</span><br><span class="line">            wait_queue.<span class="built_in">push</span>(buffer);</span><br><span class="line">            <span class="keyword">while</span> (!wait_queue.<span class="built_in">empty</span>() &amp;&amp; (upper - lower &lt; WINDOW_SIZE)) &#123;</span><br><span class="line">                Buffer buffer = wait_queue.<span class="built_in">front</span>();</span><br><span class="line">                wait_queue.<span class="built_in">pop</span>();</span><br><span class="line">                <span class="built_in">SendFRAMEPacket</span>(buffer.pBuffer, buffer.bufferSize);</span><br><span class="line">                windows[upper % WINDOW_SIZE] = buffer;</span><br><span class="line">                upper++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">case</span> MSG_TYPE_RECEIVE: &#123;</span><br><span class="line">            <span class="keyword">int</span> ack = <span class="built_in">GET_ACK</span>(pBuffer);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = lower; i &lt; upper; i++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="built_in">ntohl</span>(windows[i % WINDOW_SIZE].pFrame-&gt;head.seq) == ack) &#123;</span><br><span class="line">                    lower++;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">while</span> (!wait_queue.<span class="built_in">empty</span>() &amp;&amp; (upper - lower &lt; WINDOW_SIZE)) &#123;</span><br><span class="line">                Buffer buffer = wait_queue.<span class="built_in">front</span>();</span><br><span class="line">                wait_queue.<span class="built_in">pop</span>();</span><br><span class="line">                <span class="built_in">SendFRAMEPacket</span>(buffer.pBuffer, buffer.bufferSize);</span><br><span class="line">                windows[upper % WINDOW_SIZE] = buffer;</span><br><span class="line">                upper++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">case</span> MSG_TYPE_TIMEOUT: &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = lower; i &lt; upper; i++) &#123;</span><br><span class="line">                Buffer buffer = windows[i % WINDOW_SIZE];</span><br><span class="line">                <span class="built_in">SendFRAMEPacket</span>(buffer.pBuffer, buffer.bufferSize);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 回退n帧测试函数</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">stud_slide_window_back_n_frame</span><span class="params">(<span class="keyword">char</span> *pBuffer, <span class="keyword">int</span> bufferSize, UINT8 messageType)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 使用static变量来持久化</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> lower = <span class="number">0</span>, upper = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">static</span> queue&lt;Buffer&gt; wait_queue;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">static</span> <span class="keyword">int</span> WINDOW_SIZE = WINDOW_SIZE_BACK_N_FRAME;</span><br><span class="line">    <span class="keyword">static</span> Buffer windows[WINDOW_SIZE];</span><br><span class="line"></span><br><span class="line">    <span class="built_in"><span class="keyword">switch</span></span> (messageType) &#123;</span><br><span class="line">        <span class="keyword">case</span> MSG_TYPE_SEND: &#123;</span><br><span class="line">            Buffer buffer;</span><br><span class="line">            buffer.<span class="built_in">save</span>(pBuffer, bufferSize);</span><br><span class="line">            wait_queue.<span class="built_in">push</span>(buffer);</span><br><span class="line">            <span class="keyword">while</span> (!wait_queue.<span class="built_in">empty</span>() &amp;&amp; (upper - lower &lt; WINDOW_SIZE)) &#123;</span><br><span class="line">                Buffer buffer = wait_queue.<span class="built_in">front</span>();</span><br><span class="line">                wait_queue.<span class="built_in">pop</span>();</span><br><span class="line">                <span class="built_in">SendFRAMEPacket</span>(buffer.pBuffer, buffer.bufferSize);</span><br><span class="line">                windows[upper % WINDOW_SIZE] = buffer;</span><br><span class="line">                upper++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">case</span> MSG_TYPE_RECEIVE: &#123;</span><br><span class="line">            <span class="keyword">int</span> ack = <span class="built_in">GET_ACK</span>(pBuffer);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = lower; i &lt; upper; i++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="built_in">ntohl</span>(windows[i % WINDOW_SIZE].pFrame-&gt;head.seq) == ack) &#123;</span><br><span class="line">                    lower = i + <span class="number">1</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span> (!wait_queue.<span class="built_in">empty</span>() &amp;&amp; (upper - lower &lt; WINDOW_SIZE)) &#123;</span><br><span class="line">                Buffer buffer = wait_queue.<span class="built_in">front</span>();</span><br><span class="line">                wait_queue.<span class="built_in">pop</span>();</span><br><span class="line">                <span class="built_in">SendFRAMEPacket</span>(buffer.pBuffer, buffer.bufferSize);</span><br><span class="line">                windows[upper % WINDOW_SIZE] = buffer;</span><br><span class="line">                upper++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">case</span> MSG_TYPE_TIMEOUT: &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = lower; i &lt; upper; i++) &#123;</span><br><span class="line">                Buffer buffer = windows[i % WINDOW_SIZE];</span><br><span class="line">                <span class="built_in">SendFRAMEPacket</span>(buffer.pBuffer, buffer.bufferSize);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 选择性重传测试函数</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">stud_slide_window_choice_frame_resend</span><span class="params">(<span class="keyword">char</span> *pBuffer, <span class="keyword">int</span> bufferSize, UINT8 messageType)</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> lower = <span class="number">0</span>, upper = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">static</span> queue&lt;Buffer&gt; wait_queue;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">static</span> <span class="keyword">int</span> WINDOW_SIZE = WINDOW_SIZE_BACK_N_FRAME;</span><br><span class="line">    <span class="keyword">static</span> Buffer windows[WINDOW_SIZE];</span><br><span class="line">    </span><br><span class="line">    <span class="built_in"><span class="keyword">switch</span></span> (messageType) &#123;</span><br><span class="line">        <span class="keyword">case</span> MSG_TYPE_SEND: &#123;</span><br><span class="line">            Buffer buffer;</span><br><span class="line">            buffer.<span class="built_in">save</span>(pBuffer, bufferSize);</span><br><span class="line">            wait_queue.<span class="built_in">push</span>(buffer);</span><br><span class="line">            <span class="keyword">while</span> (!wait_queue.<span class="built_in">empty</span>() &amp;&amp; (upper - lower &lt; WINDOW_SIZE)) &#123;</span><br><span class="line">                Buffer buffer = wait_queue.<span class="built_in">front</span>();</span><br><span class="line">                wait_queue.<span class="built_in">pop</span>();</span><br><span class="line">                <span class="built_in">SendFRAMEPacket</span>(buffer.pBuffer, buffer.bufferSize);</span><br><span class="line">                windows[upper % WINDOW_SIZE] = buffer;</span><br><span class="line">                upper++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">case</span> MSG_TYPE_RECEIVE: &#123;</span><br><span class="line">            <span class="keyword">int</span> kind = <span class="built_in">ntohl</span>(((frame *) pBuffer)-&gt;head.kind);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (kind == ack) &#123;</span><br><span class="line">                <span class="keyword">int</span> ack = <span class="built_in">GET_ACK</span>(pBuffer);</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = lower; i &lt; upper; i++) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (<span class="built_in">ntohl</span>(windows[i % WINDOW_SIZE].pFrame-&gt;head.seq) == ack) &#123;</span><br><span class="line">                        lower = i + <span class="number">1</span>;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">while</span> (!wait_queue.<span class="built_in">empty</span>() &amp;&amp; (upper - lower &lt; WINDOW_SIZE)) &#123;</span><br><span class="line">                    Buffer buffer = wait_queue.<span class="built_in">front</span>();</span><br><span class="line">                    wait_queue.<span class="built_in">pop</span>();</span><br><span class="line">                    <span class="built_in">SendFRAMEPacket</span>(buffer.pBuffer, buffer.bufferSize);</span><br><span class="line">                    windows[upper % WINDOW_SIZE] = buffer;</span><br><span class="line">                    upper++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (kind == nak) &#123;</span><br><span class="line">                <span class="keyword">int</span> nak = <span class="built_in">GET_ACK</span>(pBuffer);</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = lower; i &lt; upper; i++) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (<span class="built_in">ntohl</span>(windows[i % WINDOW_SIZE].pFrame-&gt;head.seq) == nak) &#123;</span><br><span class="line">                        Buffer buffer = windows[i % WINDOW_SIZE];</span><br><span class="line">                        <span class="built_in">SendFRAMEPacket</span>(buffer.pBuffer, buffer.bufferSize);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>课程作业</category>
        <category>计算机网络</category>
      </categories>
      <tags>
        <tag>作业</tag>
        <tag>计算机网络</tag>
      </tags>
  </entry>
  <entry>
    <title>《计算机网络概论》lab 4 TCP客户端</title>
    <url>/2021/04/14/%E3%80%8A%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E6%A6%82%E8%AE%BA%E3%80%8Blab-4-TCP%E5%AE%A2%E6%88%B7%E7%AB%AF/</url>
    <content><![CDATA[<h2 id="实验流程"><a href="#实验流程" class="headerlink" title="实验流程"></a>实验流程</h2><h3 id="实验要求"><a href="#实验要求" class="headerlink" title="实验要求"></a>实验要求</h3><p>该次实验主要包含以下四部分</p>
<ol>
<li>设计TCB结构</li>
<li>处理TCP协议的包的接收（实现<code>stud_tcp_input()</code>函数）</li>
<li>封装TCP包（实现<code>stud_tcp_output()</code>函数）</li>
<li>实现<code>Socket</code>的几个接口函数</li>
</ol>
<p>需要注意的是，本次实验中只实现了一个客户端角色的TCP协议并使用等停模式。因此客户端的状态可以做以下简化，如实验指导书上所示</p>
<p><img src="/2021/04/14/%E3%80%8A%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E6%A6%82%E8%AE%BA%E3%80%8Blab-4-TCP%E5%AE%A2%E6%88%B7%E7%AB%AF/lab4-1.png"></p>
<p><strong>然而这里的图画的又跟后面实验指导书上说的有自相矛盾的地方，具体的要求当然是自己去试试怎么样才对（？）</strong></p>
<p>所以本次实验的核心在于定义这些状态并实现这里的状态转换。</p>
<h3 id="实验思路"><a href="#实验思路" class="headerlink" title="实验思路"></a>实验思路</h3><p>本次实验中，我们首先要定义一个TCP结构如下，我们并不考虑选项部分，所以可以认为<code>urgentPointer</code>之后都是数据段，我们只要原封不动的处理即可。</p>
<p>需要注意的是，在本次实验中，TCP结构统一用网络序表示</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">TCP</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">uint16_t</span> srcPort;</span><br><span class="line">    <span class="keyword">uint16_t</span> dstPort;</span><br><span class="line">    <span class="keyword">uint32_t</span> seqNum;</span><br><span class="line">    <span class="keyword">uint32_t</span> ackNum;</span><br><span class="line">    <span class="keyword">uint8_t</span> headLen;</span><br><span class="line">    <span class="keyword">uint8_t</span> flags;</span><br><span class="line">    <span class="keyword">uint16_t</span> windowSize;</span><br><span class="line">    <span class="keyword">uint16_t</span> checkSum;</span><br><span class="line">    <span class="keyword">uint16_t</span> urgentPointer;</span><br><span class="line">    <span class="keyword">char</span> data[<span class="number">2000</span>];</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">debugPrint</span><span class="params">()</span></span>&#123; <span class="comment">/* debug用，这里略 */</span> &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>然后，我们设计的TCB结构如下。在本次实验中，我们TCB中的数据以本地序表示。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">TCB</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> sockfd;             <span class="comment">// 套接字描述符</span></span><br><span class="line">    <span class="keyword">uint32_t</span> srcAddr;       <span class="comment">// 源地址</span></span><br><span class="line">    <span class="keyword">uint16_t</span> srcPort;       <span class="comment">// 源端口</span></span><br><span class="line">    <span class="keyword">uint32_t</span> dstAddr;       <span class="comment">// 目的地址</span></span><br><span class="line">    <span class="keyword">uint16_t</span> dstPort;       <span class="comment">// 目的端口</span></span><br><span class="line">    <span class="keyword">uint32_t</span> seq;           <span class="comment">// seq</span></span><br><span class="line">    <span class="keyword">uint32_t</span> ack;           <span class="comment">// ack</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> ackExpect; <span class="comment">// 应该收到的ack</span></span><br><span class="line">    TCPStatus status;       <span class="comment">// 当前状态</span></span><br><span class="line">    <span class="keyword">char</span> *data;             <span class="comment">// 数据段</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>其中<code>TCPStatus</code>是一个枚举类，用于表示各种状态，如下，与实验指导书上给出的状态示例相同。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">TCPStatus</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    CLOSED,</span><br><span class="line">    SYN_SENT,</span><br><span class="line">    ESTABLISHED,</span><br><span class="line">    FIN_WAIT1,</span><br><span class="line">    FIN_WAIT2,</span><br><span class="line">    TIME_WAIT</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>作为客户端，需要处理当前连接的状态，我们可以在客户端的本地使用一个全局变量来存储状态，如下：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">TCB *currentTCB;</span><br></pre></td></tr></table></figure>

<p>该变量记录了当前的连接信息，每次操作时会查找这里的状态。</p>
<p>另外，由于客户端可能会发起多个连接，拥有多个套接字连接符，因此我们还需要一个机构存储多个连接信息，本次实验中我们使用<code>std::vector</code>来完成，如下：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="built_in">vector</span>&lt;TCB *&gt; TCBTable;</span><br></pre></td></tr></table></figure>

<p>另外，在实现各个函数时一定要<strong>非常注意</strong>字节序的问题。</p>
<h3 id="实验细节"><a href="#实验细节" class="headerlink" title="实验细节"></a>实验细节</h3><h4 id="实现用于计算check-sum的工具函数"><a href="#实现用于计算check-sum的工具函数" class="headerlink" title="实现用于计算check sum的工具函数"></a>实现用于计算<code>check sum</code>的工具函数</h4><p>该函数主要用于计算<code>checkSum</code>，在本次实验中，我们采用所有数据均为网络序的方法来计算<code>checkSum</code>，在实现时要注意。</p>
<ul>
<li><p>首先，给出函数定义如下：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">unsigned</span> <span class="keyword">int</span> <span class="title">getCheckSum</span><span class="params">(<span class="keyword">char</span> *pBuffer,</span></span></span><br><span class="line"><span class="function"><span class="params">                         <span class="keyword">unsigned</span> <span class="keyword">short</span> len,</span></span></span><br><span class="line"><span class="function"><span class="params">                         <span class="keyword">unsigned</span> <span class="keyword">int</span> srcAddr,</span></span></span><br><span class="line"><span class="function"><span class="params">                         <span class="keyword">unsigned</span> <span class="keyword">int</span> dstAddr)</span></span>;</span><br></pre></td></tr></table></figure>

<p>其中<code>pBuffer</code>传来的是一个<strong>网络序</strong>的tcp包，<code>len</code>是这个包的<strong>总长度</strong>（包括头部），<code>srcAddr</code>和<code>dstAddr</code>是<strong>本地序</strong>的源地址和目标地址，用于计算伪头信息。</p>
</li>
<li><p>计算伪头部分</p>
<p>这里需要注意的是，由于<code>srcAddr</code>，<code>dstAddr</code>，<code>len</code>都是本地序，因此这里要做一次转换</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 伪头部分</span></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> srcAddr_n = htonl(srcAddr);</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> dstAddr_n = htonl(dstAddr);</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">short</span> len_n = htons(len);</span><br><span class="line">checkSum += (srcAddr_n &gt;&gt; <span class="number">16</span>) + (srcAddr_n &amp; <span class="number">0xFFFF</span>); <span class="comment">// 源地址</span></span><br><span class="line">checkSum += (dstAddr_n &gt;&gt; <span class="number">16</span>) + (dstAddr_n &amp; <span class="number">0xFFFF</span>); <span class="comment">// 目标地址</span></span><br><span class="line">checkSum += (TCP_PROTOCOL_NUM &lt;&lt; <span class="number">8</span>);                  <span class="comment">// TCP协议号</span></span><br><span class="line">checkSum += len_n;    </span><br></pre></td></tr></table></figure></li>
<li><p>计算TCP部分如下，由于<code>pBuffer</code>是一整个结构，而且本身就是网络序，因此我们可以直接转成一个16位整数的数组来操作，会很方便。需要注意跳过原来结构中的<code>checkSum</code>部分，该部分对应<strong>第8个16位整数</strong>。当TCP的数据部分是奇数字节时，我们需要在末尾补一个全0字节，因此需要特判奇数，代码如下：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">uint16_t</span> *TCPBuffer = (<span class="keyword">uint16_t</span> *)pBuffer;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len / <span class="number">2</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">     <span class="keyword">if</span> (i == <span class="number">8</span>)</span><br><span class="line">         <span class="keyword">continue</span>;</span><br><span class="line">     checkSum += TCPBuffer[i];</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="comment">// 注意长度的奇偶，要特判奇数</span></span><br><span class="line"> <span class="keyword">if</span> (len % <span class="number">2</span>)</span><br><span class="line">     checkSum += ((<span class="keyword">uint16_t</span>)(pBuffer[len_h]) &lt;&lt; <span class="number">8</span>);</span><br></pre></td></tr></table></figure></li>
<li><p>最后，我们需要处理高位，将高16位加到低16位上</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 清除高位</span></span><br><span class="line"><span class="keyword">while</span> (checkSum &gt;&gt; <span class="number">16</span>)</span><br><span class="line">    checkSum = (checkSum &amp; <span class="number">0xffff</span>) + (checkSum &gt;&gt; <span class="number">16</span>);</span><br></pre></td></tr></table></figure></li>
<li><p>最后的结果应该是现在计算出的值的取反，返回即可</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">return</span> (~checkSum) &amp; <span class="number">0xffff</span>;</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="实现stud-tcp-input"><a href="#实现stud-tcp-input" class="headerlink" title="实现stud_tcp_input"></a>实现<code>stud_tcp_input</code></h4><p><strong>注意！！！！系统调用该函数的时候传进来的地址是网络序！</strong>（但是调用系统提供的一些接口函数时却需要传本地序，果然很奇怪啊）。</p>
<ul>
<li><p>首先，将传入的<code>pBuffer</code>转换成一个<code>TCP</code>指针，便于之后操作</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">TCP *tcp = (TCP *)pBuffer;</span><br></pre></td></tr></table></figure></li>
<li><p>首先，检查<code>checksum</code></p>
<p>这里调用我们刚才的那个函数即可</p>
<p><strong>然而，实际上并不会有这个东西出错的时候，而且实验指导书上也没说出错时应该怎么处理，所以这个不写也没问题（在该系统上）</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (getCheckSum(pBuffer, len, ntohl(srcAddr), ntohl(dstAddr)) != ((TCP *)pBuffer)-&gt;checkSum)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 省略了一些debug显示</span></span><br><span class="line">    <span class="comment">// 实验指导书上没定义这个错误？</span></span><br><span class="line">    <span class="comment">// tcp_DiscardPkt(pBuffer, checksum_error);</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>然后，检查<code>ack</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 检查ack</span><br><span class="line">uint32_t ackNum &#x3D; ntohl(tcp-&gt;ackNum);</span><br><span class="line">uint32_t seqNum &#x3D; ntohl(tcp-&gt;seqNum);</span><br><span class="line">if (ackNum !&#x3D; currentTCB-&gt;ackExpect)</span><br><span class="line">&#123;</span><br><span class="line">    tcp_DiscardPkt(pBuffer, STUD_TCP_TEST_SEQNO_ERROR);</span><br><span class="line">    return -1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<p>之后，是最核心的状态转化的一步，如下：</p>
<ul>
<li><p>当前状态为<code>SYN_SENT</code>，接收到的<code>flag</code>为<code>PACKET_TYPE_SYN_ACK</code>，状态转换到<code>ESTABLISHED</code></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (currentTCB-&gt;status == SYN_SENT &amp;&amp; tcp-&gt;flags == PACKET_TYPE_SYN_ACK)</span><br><span class="line">&#123;</span><br><span class="line">    currentTCB-&gt;status = ESTABLISHED;</span><br><span class="line">    currentTCB-&gt;seq = ackNum;</span><br><span class="line">    currentTCB-&gt;ack = seqNum + <span class="number">1</span>;</span><br><span class="line">    stud_tcp_output(<span class="literal">NULL</span>, <span class="number">0</span>, PACKET_TYPE_ACK,</span><br><span class="line">                    currentTCB-&gt;srcPort,</span><br><span class="line">                    currentTCB-&gt;dstPort,</span><br><span class="line">                    currentTCB-&gt;srcAddr,</span><br><span class="line">                    currentTCB-&gt;dstAddr);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>当前状态为<code>ESTABLISHED</code>，继续进行通信</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (currentTCB-&gt;status == ESTABLISHED)</span><br><span class="line">&#123;</span><br><span class="line">    currentTCB-&gt;seq = ackNum;</span><br><span class="line">    currentTCB-&gt;ack = seqNum + (len - TCP_HEADER_LENGTH);</span><br><span class="line">    stud_tcp_output(<span class="literal">NULL</span>, <span class="number">0</span>, PACKET_TYPE_ACK,</span><br><span class="line">                    currentTCB-&gt;srcPort,</span><br><span class="line">                    currentTCB-&gt;dstPort,</span><br><span class="line">                    currentTCB-&gt;srcAddr,</span><br><span class="line">                    currentTCB-&gt;dstAddr);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>当前状态为<code>FIN_WAIT1</code>，接收到的<code>flag</code>为<code>PACKET_TYPE_ACK</code>，状态转化到<code>FIN_WAIT2</code>。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (currentTCB-&gt;status == FIN_WAIT1 &amp;&amp; tcp-&gt;flags == PACKET_TYPE_ACK) &#123;</span><br><span class="line">    currentTCB-&gt;status = FIN_WAIT2;</span><br><span class="line">    currentTCB-&gt;seq = ackNum;</span><br><span class="line">    currentTCB-&gt;ack = seqNum + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>当前状态为<code>FIN_WAIT2</code>，接收到的<code>flag</code>为<code>PACKET_TYPE_FIN_ACK</code>，状态转换到<code>TIME_WAIT</code></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (currentTCB-&gt;status == FIN_WAIT2 &amp;&amp; tcp-&gt;flags == PACKET_TYPE_FIN_ACK)</span><br><span class="line">&#123;</span><br><span class="line">    currentTCB-&gt;status = TIME_WAIT;</span><br><span class="line">    stud_tcp_output(<span class="literal">NULL</span>, <span class="number">0</span>, PACKET_TYPE_ACK,</span><br><span class="line">                    currentTCB-&gt;srcPort,</span><br><span class="line">                    currentTCB-&gt;dstPort,</span><br><span class="line">                    currentTCB-&gt;srcAddr,</span><br><span class="line">                    currentTCB-&gt;dstAddr);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="实现stud-tcp-output"><a href="#实现stud-tcp-output" class="headerlink" title="实现stud_tcp_output"></a>实现<code>stud_tcp_output</code></h4><p><strong>在我们自己实现自己调用的该函数中，参数里的IP地址均为本地序（主要是一开始我以为<code>input</code>那个函数中也是这样）</strong></p>
<p><strong>另外一个需要注意的是，在第一部分的测试中，由于该部分会认为没有实现<code>socket</code>接口，所以不会调用相应的函数，也不会有创建<code>TCB</code>这个过程，所以在调用这个函数时会出错（空指针），因此我们需要在这里加一个<code>surrentPCB</code>的初始化。</strong></p>
<ul>
<li><p>初始化<code>currentTCB</code>（只针对第一部分的测试）</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (currentTCB == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">    currentTCB = <span class="keyword">new</span> TCB;</span><br><span class="line">    currentTCB-&gt;status = CLOSED;</span><br><span class="line">    currentTCB-&gt;ack = gAckNum;</span><br><span class="line">    currentTCB-&gt;seq = gSeqNum;</span><br><span class="line">    currentTCB-&gt;srcAddr = srcAddr;</span><br><span class="line">    currentTCB-&gt;dstAddr = dstAddr;</span><br><span class="line">    currentTCB-&gt;srcPort = srcPort;</span><br><span class="line">    currentTCB-&gt;dstPort = dstPort;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>创建一个新的<code>tcp</code>结构，并且将<code>pData</code>中的数据复制过去</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">TCP *tcp = <span class="keyword">new</span> TCP;</span><br><span class="line"><span class="built_in">memcpy</span>(tcp-&gt;data, pData, len);</span><br></pre></td></tr></table></figure></li>
<li><p>构建<code>TCP</code>头，<strong>一定要注意使用网络序</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 构造TCP头</span></span><br><span class="line">tcp-&gt;srcPort = htons(srcPort);</span><br><span class="line">tcp-&gt;dstPort = htons(dstPort);</span><br><span class="line">tcp-&gt;seqNum = htonl(currentTCB-&gt;seq);</span><br><span class="line">tcp-&gt;ackNum = htonl(currentTCB-&gt;ack);</span><br><span class="line"><span class="comment">// 注意低四位为空，头长度为5 * 4字节</span></span><br><span class="line"><span class="comment">// 二进制格式0x10010000</span></span><br><span class="line">tcp-&gt;headLen = <span class="number">0x50</span>;</span><br><span class="line">tcp-&gt;flags = flag;</span><br><span class="line"><span class="comment">// 注意这里也要进行一次字节序转换！</span></span><br><span class="line">tcp-&gt;windowSize = htons(<span class="number">1</span>);</span><br><span class="line">tcp-&gt;urgentPointer = <span class="number">0</span>;</span><br><span class="line">tcp-&gt;checkSum = <span class="number">0</span>; <span class="comment">// 预清零checkSum</span></span><br><span class="line"><span class="comment">// 这里要加上一个头长度！！！！！</span></span><br><span class="line">tcp-&gt;checkSum = getCheckSum((<span class="keyword">char</span> *)tcp, len + TCP_HEADER_LENGTH, srcAddr, dstAddr);</span><br></pre></td></tr></table></figure></li>
</ul>
<p>之后，同样是进行状态转换的判断</p>
<ul>
<li><p>从<code>CLOSE</code>状态转换到<code>SYN_SENT</code></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (currentTCB-&gt;status == CLOSED &amp;&amp; tcp-&gt;flags == PACKET_TYPE_SYN)</span><br><span class="line">    currentTCB-&gt;status = SYN_SENT;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>从<code>ESTABLISHED</code>状态转换到<code>FIN_WAIT1</code></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (currentTCB-&gt;status == ESTABLISHED &amp;&amp; tcp-&gt;flags == PACKET_TYPE_FIN_ACK)</span><br><span class="line">&#123;</span><br><span class="line">    currentTCB-&gt;status = FIN_WAIT1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>之后，我们需要根据本次的发送来计算下次应当受到的<code>ack</code>值，以便于之后的校验，如下：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (currentTCB-&gt;status == ESTABLISHED)</span><br><span class="line">&#123;</span><br><span class="line">    currentTCB-&gt;ackExpect = currentTCB-&gt;seq + len;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">    DebugPrint(<span class="string">&quot;---&gt; Status: %d\n&quot;</span>, currentTCB-&gt;status);</span><br><span class="line">    currentTCB-&gt;ackExpect = currentTCB-&gt;seq + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>最后，调用系统提供的函数进行发送</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">tcp_sendIpPkt((<span class="keyword">unsigned</span> <span class="keyword">char</span> *)tcp, <span class="number">20</span> + len, currentTCB-&gt;srcAddr, currentTCB-&gt;dstAddr, <span class="number">60</span>);</span><br></pre></td></tr></table></figure></li>
</ul>
<p>至此，该函数实现完毕。</p>
<h4 id="实现stud-tcp-socket"><a href="#实现stud-tcp-socket" class="headerlink" title="实现stud_tcp_socket"></a>实现<code>stud_tcp_socket</code></h4><p>该函数并不建立连接，只是分配一个套接字标识符。在<code>Linux</code>中，返回的其实就是一个文件描述符，而<code>Linux</code>中文件描述符的<code>0,1,2</code>已经被占用，因此我们这里从<code>3</code>开始分配（虽然没什么差）。实现如下</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">stud_tcp_socket</span><span class="params">(<span class="keyword">int</span> domain, <span class="keyword">int</span> type, <span class="keyword">int</span> protocol)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    DebugPrint(<span class="string">&quot;---&gt; stud_tcp_socket():\n&quot;</span>);</span><br><span class="line">    <span class="comment">// 如果TCB表为空，插入三个NULL</span></span><br><span class="line">    <span class="comment">// socket的返回值应该是一个文件描述符</span></span><br><span class="line">    <span class="comment">// Linux中，文件描述符的0,1,2分别为std_in std_out std_err</span></span><br><span class="line">    <span class="comment">// 所以我们返回的值从3开始</span></span><br><span class="line">    <span class="comment">// 另外，我们希望能根据sockfd直接定位TCB，因此这样实现</span></span><br><span class="line">    <span class="keyword">if</span> (TCBTable.empty())</span><br><span class="line">    &#123;</span><br><span class="line">        TCBTable.push_back(<span class="literal">NULL</span>);</span><br><span class="line">        TCBTable.push_back(<span class="literal">NULL</span>);</span><br><span class="line">        TCBTable.push_back(<span class="literal">NULL</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    currentTCB = <span class="keyword">new</span> TCB;</span><br><span class="line">    currentTCB-&gt;ack = gAckNum;</span><br><span class="line">    currentTCB-&gt;seq = gSeqNum;</span><br><span class="line">    currentTCB-&gt;srcPort = gSrcPort++;</span><br><span class="line">    currentTCB-&gt;sockfd = TCBTable.size();</span><br><span class="line">    currentTCB-&gt;status = CLOSED;</span><br><span class="line"></span><br><span class="line">    TCBTable.push_back(currentTCB);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> currentTCB-&gt;sockfd;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="实现stud-tcp-connect"><a href="#实现stud-tcp-connect" class="headerlink" title="实现stud_tcp_connect"></a>实现<code>stud_tcp_connect</code></h4><p>需要注意这个函数参数中的<code>sockaddr_in</code>结构是一个用来存套接字中的IP地址信息的结构，内部一定是大端存储IP地址，因此需要注意字节序转换。</p>
<p>在连接时，需要发送一个包，并且在连接时设置<code>currentTCB</code></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">stud_tcp_connect</span><span class="params">(<span class="keyword">int</span> sockfd, struct sockaddr_in *addr, <span class="keyword">int</span> addrlen)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    currentTCB = TCBTable[sockfd];</span><br><span class="line">	<span class="comment">// 注意这里的字节序转换</span></span><br><span class="line">    currentTCB-&gt;dstPort = ntohs(addr-&gt;sin_port);</span><br><span class="line">    currentTCB-&gt;status = SYN_SENT;</span><br><span class="line">    currentTCB-&gt;srcAddr = getIpv4Address();</span><br><span class="line">    currentTCB-&gt;dstAddr = ntohl(addr-&gt;sin_addr.s_addr);</span><br><span class="line">	<span class="comment">// 发送</span></span><br><span class="line">    stud_tcp_output(<span class="literal">NULL</span>, <span class="number">0</span>, PACKET_TYPE_SYN,</span><br><span class="line">                    currentTCB-&gt;srcPort,</span><br><span class="line">                    currentTCB-&gt;dstPort,</span><br><span class="line">                    currentTCB-&gt;srcAddr,</span><br><span class="line">                    currentTCB-&gt;dstAddr);</span><br><span class="line">    <span class="comment">// 等待对方发送的包</span></span><br><span class="line">    TCP *tcp = <span class="keyword">new</span> TCP;</span><br><span class="line">    <span class="keyword">int</span> len = waitIpPacket((<span class="keyword">char</span> *)tcp, <span class="number">1000</span>);</span><br><span class="line">    <span class="keyword">while</span> (len == <span class="number">-1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        len = waitIpPacket((<span class="keyword">char</span> *)tcp, <span class="number">1000</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 接收到服务端的包之后调用`stud_tcp_input`处理</span></span><br><span class="line">    <span class="keyword">return</span> stud_tcp_input((<span class="keyword">char</span> *)tcp, len, htonl(currentTCB-&gt;srcAddr), htonl(currentTCB-&gt;dstAddr));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="实现stud-tcp-send"><a href="#实现stud-tcp-send" class="headerlink" title="实现stud_tcp_send"></a>实现<code>stud_tcp_send</code></h4><p>由于我们之前已经实现好了<code>stud_tcp_output</code>和<code>stud_tcp_input</code>，因此这里我们直接调用即可。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">stud_tcp_send</span><span class="params">(<span class="keyword">int</span> sockfd, <span class="keyword">const</span> <span class="keyword">unsigned</span> <span class="keyword">char</span> *pData, <span class="keyword">unsigned</span> <span class="keyword">short</span> datalen, <span class="keyword">int</span> flags)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    currentTCB = TCBTable[sockfd];</span><br><span class="line">	<span class="comment">// 当前必须为可以发消息的状态</span></span><br><span class="line">    <span class="keyword">if</span> (currentTCB-&gt;status == ESTABLISHED)</span><br><span class="line">    &#123;</span><br><span class="line">        currentTCB-&gt;data = (<span class="keyword">char</span> *)pData;</span><br><span class="line">        stud_tcp_output((<span class="keyword">char</span> *)currentTCB-&gt;data, datalen, PACKET_TYPE_DATA,</span><br><span class="line">                        currentTCB-&gt;srcPort,</span><br><span class="line">                        currentTCB-&gt;dstPort,</span><br><span class="line">                        currentTCB-&gt;srcAddr,</span><br><span class="line">                        currentTCB-&gt;dstAddr);</span><br><span class="line">        <span class="comment">// 等待对方回复</span></span><br><span class="line">        TCP *tcp = <span class="keyword">new</span> TCP;</span><br><span class="line">        <span class="keyword">int</span> len = waitIpPacket((<span class="keyword">char</span> *)tcp, <span class="number">1000</span>);</span><br><span class="line">        <span class="keyword">while</span> (len == <span class="number">-1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            len = waitIpPacket((<span class="keyword">char</span> *)tcp, <span class="number">1000</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 调用stud_tcp_input处理</span></span><br><span class="line">        <span class="keyword">return</span> stud_tcp_input((<span class="keyword">char</span> *)tcp, len, htonl(currentTCB-&gt;srcAddr), htonl(currentTCB-&gt;dstAddr));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="实现stud-tcp-recv"><a href="#实现stud-tcp-recv" class="headerlink" title="实现stud_tcp_recv"></a>实现<code>stud_tcp_recv</code></h4><p>在该函数中，等待一个对方发来的包并进行处理</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">stud_tcp_recv</span><span class="params">(<span class="keyword">int</span> sockfd, <span class="keyword">unsigned</span> <span class="keyword">char</span> *pData, <span class="keyword">unsigned</span> <span class="keyword">short</span> datalen, <span class="keyword">int</span> flags)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    currentTCB = TCBTable[sockfd];</span><br><span class="line">    <span class="keyword">if</span> (currentTCB-&gt;status == ESTABLISHED)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 等待对方发来的包</span></span><br><span class="line">        TCP *tcp = <span class="keyword">new</span> TCP;</span><br><span class="line">        <span class="keyword">int</span> len = waitIpPacket((<span class="keyword">char</span> *)tcp, <span class="number">1000</span>);</span><br><span class="line">        <span class="keyword">while</span> (len == <span class="number">-1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            len = waitIpPacket((<span class="keyword">char</span> *)tcp, <span class="number">1000</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">memcpy</span>(pData, tcp-&gt;data, len);</span><br><span class="line">        <span class="comment">// 调用stud_tcp_input处理</span></span><br><span class="line">        <span class="keyword">return</span> stud_tcp_input((<span class="keyword">char</span> *)tcp, len, htonl(currentTCB-&gt;srcAddr), htonl(currentTCB-&gt;dstAddr));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="实现stud-tcp-close"><a href="#实现stud-tcp-close" class="headerlink" title="实现stud_tcp_close"></a>实现<code>stud_tcp_close</code></h4><p>在本函数中，要注意关闭连接时的四次握手，需要注意我们的顺序问题。</p>
<p>首先，应当调用<code> stud_tcp_output</code>发送一个<code>flag</code>为<code>PACKET_TYPE_FIN_ACK</code>的请求，之后对方会先发来一个<code>PACKET_TYPE_ACK</code>的包，接收到之后会进入<code>FIN_WAIT2</code>状态，然后需要继续等待对方发送的包，收到<code>PACKET_TYPE_FIN_ACK</code>才正式关闭，因此这里应该等待两次。实现如下：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">stud_tcp_close</span><span class="params">(<span class="keyword">int</span> sockfd)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    currentTCB = TCBTable[sockfd];</span><br><span class="line">	<span class="comment">// 在ESTABLISHED状态才能结束</span></span><br><span class="line">    <span class="keyword">if</span> (currentTCB-&gt;status == ESTABLISHED)</span><br><span class="line">    &#123;</span><br><span class="line">        stud_tcp_output(<span class="literal">NULL</span>, <span class="number">0</span>, PACKET_TYPE_FIN_ACK,</span><br><span class="line">                        currentTCB-&gt;srcPort,</span><br><span class="line">                        currentTCB-&gt;dstPort,</span><br><span class="line">                        currentTCB-&gt;srcAddr,</span><br><span class="line">                        currentTCB-&gt;dstAddr);</span><br><span class="line">		<span class="comment">// 等待ACK</span></span><br><span class="line">        TCP *tcp = <span class="keyword">new</span> TCP;</span><br><span class="line">        <span class="keyword">int</span> len = waitIpPacket((<span class="keyword">char</span> *)tcp, <span class="number">1000</span>);</span><br><span class="line">        <span class="keyword">while</span> (len == <span class="number">-1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            len = waitIpPacket((<span class="keyword">char</span> *)tcp, <span class="number">1000</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        stud_tcp_input((<span class="keyword">char</span> *)tcp, len, htonl(currentTCB-&gt;srcAddr), htonl(currentTCB-&gt;dstAddr));</span><br><span class="line">		</span><br><span class="line">        <span class="comment">// 等待FIN_ACK</span></span><br><span class="line">        tcp = <span class="keyword">new</span> TCP;</span><br><span class="line">        len = waitIpPacket((<span class="keyword">char</span> *)tcp, <span class="number">1000</span>);</span><br><span class="line">        <span class="keyword">while</span> (len == <span class="number">-1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            len = waitIpPacket((<span class="keyword">char</span> *)tcp, <span class="number">1000</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> stud_tcp_input((<span class="keyword">char</span> *)tcp, len, htonl(currentTCB-&gt;srcAddr), htonl(currentTCB-&gt;dstAddr));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>至此，各实验函数编写完成，并且在系统上测试通过。</p>
<h2 id="实验中遇到的问题"><a href="#实验中遇到的问题" class="headerlink" title="实验中遇到的问题"></a>实验中遇到的问题</h2><ol>
<li>实验指导书上很多比较细节的地方都没说到，例如函数输入参数的字节序问题，在之前的<code>ipv4</code>实验中，参数中的<code>ip</code>地址是本地序，这次要求的<code>stud_tcp_input</code>的参数就成了网络序，但是提供的接口函数<code>tcp_sendIpPkt</code>还是本地序，我之前在宿舍自己写的时候觉得这两个地方要么都网络序要么都本地序，因为之前也是这样，但是去了之后因为这个问题头疼了半天。</li>
<li>实验指导书上有一些矛盾的地方，给出的一些函数（例如<code>tcp_DiscardPkt</code>）其实一直没用到，有些迷惑。</li>
</ol>
<h2 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h2><p>完整代码再次给出（包括了用于debug的语句等）</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* THIS FILE IS FOR TCP TEST</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">struct sockaddr_in &#123;</span></span><br><span class="line"><span class="comment">        short   sin_family;</span></span><br><span class="line"><span class="comment">        u_short sin_port;</span></span><br><span class="line"><span class="comment">        struct  in_addr sin_addr;</span></span><br><span class="line"><span class="comment">        char    sin_zero[8];</span></span><br><span class="line"><span class="comment">&#125;;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;sysInclude.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DEBUG</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> DEBUG</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DebugPrint(...) printf(__VA_ARGS__)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DebugPrint(...)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="comment">// ?</span></span><br><span class="line"><span class="keyword">int</span> gSrcPort = <span class="number">2005</span>;</span><br><span class="line"><span class="keyword">int</span> gDstPort = <span class="number">2006</span>;</span><br><span class="line"><span class="keyword">int</span> gSeqNum = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> gAckNum = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 外部函数声明</span></span><br><span class="line"><span class="function"><span class="keyword">extern</span> <span class="keyword">void</span> <span class="title">tcp_DiscardPkt</span><span class="params">(<span class="keyword">char</span> *pBuffer, <span class="keyword">int</span> type)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">extern</span> <span class="keyword">void</span> <span class="title">tcp_sendReport</span><span class="params">(<span class="keyword">int</span> type)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">extern</span> <span class="keyword">void</span> <span class="title">tcp_sendIpPkt</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">char</span> *pData, UINT16 len, <span class="keyword">unsigned</span> <span class="keyword">int</span> srcAddr, <span class="keyword">unsigned</span> <span class="keyword">int</span> dstAddr, UINT8 ttl)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">extern</span> <span class="keyword">int</span> <span class="title">waitIpPacket</span><span class="params">(<span class="keyword">char</span> *pBuffer, <span class="keyword">int</span> timeout)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">extern</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> <span class="title">getIpv4Address</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">extern</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> <span class="title">getServerIpv4Address</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// TCP的头占20个字节</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> TCP_HEADER_LENGTH = <span class="number">20</span>;</span><br><span class="line"><span class="comment">// TCP协议号</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> TCP_PROTOCOL_NUM = <span class="number">0x6</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// TCP结构</span></span><br><span class="line"><span class="comment">// 永远用网络序！！</span></span><br><span class="line"><span class="comment">// 永远用网络序！！</span></span><br><span class="line"><span class="comment">// 永远用网络序！！</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">TCP</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">uint16_t</span> srcPort;</span><br><span class="line">    <span class="keyword">uint16_t</span> dstPort;</span><br><span class="line">    <span class="keyword">uint32_t</span> seqNum;</span><br><span class="line">    <span class="keyword">uint32_t</span> ackNum;</span><br><span class="line">    <span class="keyword">uint8_t</span> headLen;</span><br><span class="line">    <span class="keyword">uint8_t</span> flags;</span><br><span class="line">    <span class="keyword">uint16_t</span> windowSize;</span><br><span class="line">    <span class="keyword">uint16_t</span> checkSum;</span><br><span class="line">    <span class="keyword">uint16_t</span> urgentPointer;</span><br><span class="line">    <span class="keyword">char</span> data[<span class="number">2000</span>];</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">debugPrint</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> DEBUG</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;=========== tcp struct info ===========\n&quot;</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;srcPort = %d\n&quot;</span>, <span class="built_in">ntohs</span>(srcPort));</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;dstPort = %d\n&quot;</span>, <span class="built_in">ntohs</span>(dstPort));</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;seqNum = %d\n&quot;</span>, <span class="built_in">ntohl</span>(seqNum));</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;ackNum = %d\n&quot;</span>, <span class="built_in">ntohl</span>(ackNum));</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;headLen = %d\n&quot;</span>, ((headLen &gt;&gt; <span class="number">4</span>) &amp; <span class="number">0xf</span>));</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;flags = %d\n&quot;</span>, flags);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;windowSize = %d\n&quot;</span>, <span class="built_in">ntohl</span>(windowSize)));</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;checkSum = %d\n&quot;</span>, <span class="built_in">ntohl</span>(checkSum));</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;urgentPointer = %d\n&quot;</span>, <span class="built_in">ntohl</span>(urgentPointer));</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// TCP状态</span></span><br><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">TCPStatus</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    CLOSED,</span><br><span class="line">    SYN_SENT,</span><br><span class="line">    ESTABLISHED,</span><br><span class="line">    FIN_WAIT1,</span><br><span class="line">    FIN_WAIT2,</span><br><span class="line">    TIME_WAIT</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 传输控制快</span></span><br><span class="line"><span class="comment">// 这是保存在本机的结构，永远用主机序！！！</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">TCB</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> sockfd;             <span class="comment">// 套接字描述符</span></span><br><span class="line">    <span class="keyword">uint32_t</span> srcAddr;       <span class="comment">// 源地址</span></span><br><span class="line">    <span class="keyword">uint16_t</span> srcPort;       <span class="comment">// 源端口</span></span><br><span class="line">    <span class="keyword">uint32_t</span> dstAddr;       <span class="comment">// 目的地址</span></span><br><span class="line">    <span class="keyword">uint16_t</span> dstPort;       <span class="comment">// 目的端口</span></span><br><span class="line">    <span class="keyword">uint32_t</span> seq;           <span class="comment">// seq</span></span><br><span class="line">    <span class="keyword">uint32_t</span> ack;           <span class="comment">// ack</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> ackExpect; <span class="comment">// 应该收到的ack</span></span><br><span class="line">    TCPStatus status;       <span class="comment">// 当前状态</span></span><br><span class="line">    <span class="keyword">char</span> *data;             <span class="comment">// 数据段</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">vector&lt;TCB *&gt; TCBTable;</span><br><span class="line">TCB *currentTCB;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">union</span> <span class="title">IpAddr</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> num;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">    &#123;</span></span><br><span class="line">        <span class="keyword">unsigned</span> <span class="keyword">char</span> c1;</span><br><span class="line">        <span class="keyword">unsigned</span> <span class="keyword">char</span> c2;</span><br><span class="line">        <span class="keyword">unsigned</span> <span class="keyword">char</span> c3;</span><br><span class="line">        <span class="keyword">unsigned</span> <span class="keyword">char</span> c4;</span><br><span class="line">    &#125; ip;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printAddr</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">int</span> addr)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> DEBUG</span></span><br><span class="line">    <span class="class"><span class="keyword">union</span> <span class="title">IpAddr</span> <span class="title">ip</span>;</span></span><br><span class="line">    ip.num = addr;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d.%d.%d.%d&quot;</span>, ip.ip.c4, ip.ip.c3, ip.ip.c2, ip.ip.c1);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 约定传来的pBuffer是网络序</span></span><br><span class="line"><span class="comment">// 其他几个应该都是主机序</span></span><br><span class="line"><span class="function"><span class="keyword">unsigned</span> <span class="keyword">int</span> <span class="title">getCheckSum</span><span class="params">(<span class="keyword">char</span> *pBuffer,</span></span></span><br><span class="line"><span class="function"><span class="params">                         <span class="keyword">unsigned</span> <span class="keyword">short</span> len,</span></span></span><br><span class="line"><span class="function"><span class="params">                         <span class="keyword">unsigned</span> <span class="keyword">int</span> srcAddr,</span></span></span><br><span class="line"><span class="function"><span class="params">                         <span class="keyword">unsigned</span> <span class="keyword">int</span> dstAddr)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">DebugPrint</span>(<span class="string">&quot;---&gt; In getCheckNum():\n&quot;</span>);</span><br><span class="line">    <span class="built_in">DebugPrint</span>(<span class="string">&quot;---&gt; srcAddr is :&quot;</span>);</span><br><span class="line">    <span class="built_in">printAddr</span>(srcAddr);</span><br><span class="line">    <span class="built_in">DebugPrint</span>(<span class="string">&quot;\n---&gt; dstAddr is :&quot;</span>);</span><br><span class="line">    <span class="built_in">printAddr</span>(dstAddr);</span><br><span class="line">    <span class="built_in">DebugPrint</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> checkSum = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 伪头部分</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> srcAddr_n = <span class="built_in">htonl</span>(srcAddr);</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> dstAddr_n = <span class="built_in">htonl</span>(dstAddr);</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">short</span> len_n = <span class="built_in">htons</span>(len);</span><br><span class="line">    checkSum += (srcAddr_n &gt;&gt; <span class="number">16</span>) + (srcAddr_n &amp; <span class="number">0xFFFF</span>); <span class="comment">// 源地址</span></span><br><span class="line">    checkSum += (dstAddr_n &gt;&gt; <span class="number">16</span>) + (dstAddr_n &amp; <span class="number">0xFFFF</span>); <span class="comment">// 目标地址</span></span><br><span class="line">    checkSum += (TCP_PROTOCOL_NUM &lt;&lt; <span class="number">8</span>);                  <span class="comment">// TCP协议号</span></span><br><span class="line">    checkSum += len_n;                                    <span class="comment">// TCP长度</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">uint16_t</span> *TCPBuffer = (<span class="keyword">uint16_t</span> *)pBuffer;</span><br><span class="line">    <span class="comment">// 计算主机序下的len</span></span><br><span class="line">    <span class="comment">// 遍历计算</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len / <span class="number">2</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (i == <span class="number">8</span>)</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        checkSum += TCPBuffer[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 注意长度的奇偶，要特判奇数</span></span><br><span class="line">    <span class="keyword">if</span> (len % <span class="number">2</span>)</span><br><span class="line">        checkSum += ((<span class="keyword">uint16_t</span>)(pBuffer[len_h]) &lt;&lt; <span class="number">8</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 清除高位</span></span><br><span class="line">    <span class="keyword">while</span> (checkSum &gt;&gt; <span class="number">16</span>)</span><br><span class="line">        checkSum = (checkSum &amp; <span class="number">0xffff</span>) + (checkSum &gt;&gt; <span class="number">16</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">DebugPrint</span>(<span class="string">&quot;---&gt; Return from getCheckNum(), return value checkSum=%d (hex is %x):\n&quot;</span>, (~checkSum) &amp; <span class="number">0xffff</span>, (~checkSum) &amp; <span class="number">0xffff</span>);</span><br><span class="line">    <span class="comment">// 返回取反的值</span></span><br><span class="line">    <span class="keyword">return</span> (~checkSum) &amp; <span class="number">0xffff</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 传来的是网络序！</span></span><br><span class="line"><span class="comment">// 注意这里的srcAddr和dstAddr也是网络序</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">stud_tcp_input</span><span class="params">(<span class="keyword">char</span> *pBuffer, <span class="keyword">unsigned</span> <span class="keyword">short</span> len, <span class="keyword">unsigned</span> <span class="keyword">int</span> srcAddr, <span class="keyword">unsigned</span> <span class="keyword">int</span> dstAddr)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">DebugPrint</span>(<span class="string">&quot;---&gt; In stud_tcp_input():\n&quot;</span>);</span><br><span class="line">    <span class="built_in">DebugPrint</span>(<span class="string">&quot;---&gt; len is %d:\n&quot;</span>, len);</span><br><span class="line">    <span class="built_in">DebugPrint</span>(<span class="string">&quot;---&gt; srcAddr is :&quot;</span>);</span><br><span class="line">    <span class="built_in">printAddr</span>(srcAddr);</span><br><span class="line">    <span class="built_in">DebugPrint</span>(<span class="string">&quot;\n---&gt; dstAddr is :&quot;</span>);</span><br><span class="line">    <span class="built_in">printAddr</span>(dstAddr);</span><br><span class="line">    <span class="built_in">DebugPrint</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    TCP *tcp = (TCP *)pBuffer;</span><br><span class="line">    <span class="comment">// 检查CheckSum</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">getCheckSum</span>(pBuffer, len, <span class="built_in">ntohl</span>(srcAddr), <span class="built_in">ntohl</span>(dstAddr)) != ((TCP *)pBuffer)-&gt;checkSum)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">DebugPrint</span>(<span class="string">&quot;---&gt; check sum error\n&quot;</span>);</span><br><span class="line">        tcp-&gt;<span class="built_in">debugPrint</span>();</span><br><span class="line">        <span class="built_in">DebugPrint</span>(<span class="string">&quot;---&gt; your ans: %d\n&quot;</span>, <span class="built_in">getCheckSum</span>(pBuffer, len, <span class="built_in">ntohs</span>(srcAddr), <span class="built_in">ntohs</span>(dstAddr)));</span><br><span class="line">        <span class="built_in">DebugPrint</span>(<span class="string">&quot;---&gt; correct ans: %d\n&quot;</span>, tcp-&gt;checkSum);</span><br><span class="line">        <span class="comment">// 实验指导书上没定义这个错误？</span></span><br><span class="line">        <span class="comment">// tcp_DiscardPkt(pBuffer, checksum_error);</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 检查ack</span></span><br><span class="line">    <span class="keyword">uint32_t</span> ackNum = <span class="built_in">ntohl</span>(tcp-&gt;ackNum);</span><br><span class="line">    <span class="keyword">uint32_t</span> seqNum = <span class="built_in">ntohl</span>(tcp-&gt;seqNum);</span><br><span class="line">    <span class="keyword">if</span> (ackNum != currentTCB-&gt;ackExpect)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">DebugPrint</span>(<span class="string">&quot;---&gt; Error!!! ackNum != currentTCB-&gt;ackExpect\n&quot;</span>);</span><br><span class="line">        <span class="built_in">tcp_DiscardPkt</span>(pBuffer, STUD_TCP_TEST_SEQNO_ERROR);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="keyword">if</span> (currentTCB-&gt;status == SYN_SENT &amp;&amp; tcp-&gt;flags == PACKET_TYPE_SYN_ACK)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">DebugPrint</span>(<span class="string">&quot;---&gt; Status Change: SYN_SENT to ESTABLISHED\n&quot;</span>);</span><br><span class="line">        currentTCB-&gt;status = ESTABLISHED;</span><br><span class="line">        currentTCB-&gt;seq = ackNum;</span><br><span class="line">        currentTCB-&gt;ack = seqNum + <span class="number">1</span>;</span><br><span class="line">        <span class="built_in">stud_tcp_output</span>(<span class="literal">NULL</span>, <span class="number">0</span>, PACKET_TYPE_ACK,</span><br><span class="line">                        currentTCB-&gt;srcPort,</span><br><span class="line">                        currentTCB-&gt;dstPort,</span><br><span class="line">                        currentTCB-&gt;srcAddr,</span><br><span class="line">                        currentTCB-&gt;dstAddr);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (currentTCB-&gt;status == ESTABLISHED)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">DebugPrint</span>(<span class="string">&quot;---&gt; Transfer data at Status ESTABLISHED\n&quot;</span>);</span><br><span class="line">        currentTCB-&gt;seq = ackNum;</span><br><span class="line">        currentTCB-&gt;ack = seqNum + (len - TCP_HEADER_LENGTH);</span><br><span class="line">        <span class="built_in">stud_tcp_output</span>(<span class="literal">NULL</span>, <span class="number">0</span>, PACKET_TYPE_ACK,</span><br><span class="line">                        currentTCB-&gt;srcPort,</span><br><span class="line">                        currentTCB-&gt;dstPort,</span><br><span class="line">                        currentTCB-&gt;srcAddr,</span><br><span class="line">                        currentTCB-&gt;dstAddr);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (currentTCB-&gt;status == FIN_WAIT1 &amp;&amp; tcp-&gt;flags == PACKET_TYPE_ACK)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">DebugPrint</span>(<span class="string">&quot;---&gt; Status Change: FIN_WAIT1 to FIN_WAIT2\n&quot;</span>);</span><br><span class="line">        currentTCB-&gt;status = FIN_WAIT2;</span><br><span class="line">        currentTCB-&gt;seq = ackNum;</span><br><span class="line">        currentTCB-&gt;ack = seqNum + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (currentTCB-&gt;status == FIN_WAIT2 &amp;&amp; tcp-&gt;flags == PACKET_TYPE_FIN_ACK)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">DebugPrint</span>(<span class="string">&quot;---&gt; Status Change: FIN_WAIT2 to TIME_WAIT\n&quot;</span>);</span><br><span class="line">        currentTCB-&gt;status = TIME_WAIT;</span><br><span class="line">        <span class="built_in">stud_tcp_output</span>(<span class="literal">NULL</span>, <span class="number">0</span>, PACKET_TYPE_ACK,</span><br><span class="line">                        currentTCB-&gt;srcPort,</span><br><span class="line">                        currentTCB-&gt;dstPort,</span><br><span class="line">                        currentTCB-&gt;srcAddr,</span><br><span class="line">                        currentTCB-&gt;dstAddr);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 约定传来的是网络序！（指pData）</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">stud_tcp_output</span><span class="params">(<span class="keyword">char</span> *pData, <span class="keyword">unsigned</span> <span class="keyword">short</span> len, <span class="keyword">unsigned</span> <span class="keyword">char</span> flag, <span class="keyword">unsigned</span> <span class="keyword">short</span> srcPort, <span class="keyword">unsigned</span> <span class="keyword">short</span> dstPort, <span class="keyword">unsigned</span> <span class="keyword">int</span> srcAddr, <span class="keyword">unsigned</span> <span class="keyword">int</span> dstAddr)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">DebugPrint</span>(<span class="string">&quot;---&gt; stud_tcp_output():\n&quot;</span>);</span><br><span class="line">    <span class="built_in">DebugPrint</span>(<span class="string">&quot;---&gt; srcAddr is :&quot;</span>);</span><br><span class="line">    <span class="built_in">printAddr</span>(srcAddr);</span><br><span class="line">    <span class="built_in">DebugPrint</span>(<span class="string">&quot;\n---&gt; dstAddr is :&quot;</span>);</span><br><span class="line">    <span class="built_in">printAddr</span>(srcAddr);</span><br><span class="line">    <span class="built_in">DebugPrint</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (currentTCB == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        currentTCB = <span class="keyword">new</span> TCB;</span><br><span class="line">        currentTCB-&gt;status = CLOSED;</span><br><span class="line">        currentTCB-&gt;ack = gAckNum;</span><br><span class="line">        currentTCB-&gt;seq = gSeqNum;</span><br><span class="line">        currentTCB-&gt;srcAddr = srcAddr;</span><br><span class="line">        currentTCB-&gt;dstAddr = dstAddr;</span><br><span class="line">        currentTCB-&gt;srcPort = srcPort;</span><br><span class="line">        currentTCB-&gt;dstPort = dstPort;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    TCP *tcp = <span class="keyword">new</span> TCP;</span><br><span class="line">    <span class="built_in">memcpy</span>(tcp-&gt;data, pData, len);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 构造TCP头</span></span><br><span class="line">    tcp-&gt;srcPort = <span class="built_in">htons</span>(srcPort);</span><br><span class="line">    tcp-&gt;dstPort = <span class="built_in">htons</span>(dstPort);</span><br><span class="line">    tcp-&gt;seqNum = <span class="built_in">htonl</span>(currentTCB-&gt;seq);</span><br><span class="line">    tcp-&gt;ackNum = <span class="built_in">htonl</span>(currentTCB-&gt;ack);</span><br><span class="line">    <span class="comment">// 注意低四位为空，头长度为5 * 4字节</span></span><br><span class="line">    <span class="comment">// 二进制格式0x10010000</span></span><br><span class="line">    tcp-&gt;headLen = <span class="number">0x50</span>;</span><br><span class="line">    tcp-&gt;flags = flag;</span><br><span class="line">    <span class="comment">// 注意这里也要进行一次字节序转换！</span></span><br><span class="line">    tcp-&gt;windowSize = <span class="built_in">htons</span>(<span class="number">1</span>);</span><br><span class="line">    tcp-&gt;urgentPointer = <span class="number">0</span>;</span><br><span class="line">    tcp-&gt;checkSum = <span class="number">0</span>; <span class="comment">// 预清零checkSum</span></span><br><span class="line">    <span class="comment">// 这里要加上一个长度！！！！！</span></span><br><span class="line">    tcp-&gt;checkSum = <span class="built_in">getCheckSum</span>((<span class="keyword">char</span> *)tcp, len + TCP_HEADER_LENGTH, srcAddr, dstAddr);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (currentTCB-&gt;status == CLOSED &amp;&amp; tcp-&gt;flags == PACKET_TYPE_SYN)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">DebugPrint</span>(<span class="string">&quot;---&gt; Status Change: CLOSED to SYN_SENT\n&quot;</span>);</span><br><span class="line">        currentTCB-&gt;status = SYN_SENT;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (currentTCB-&gt;status == ESTABLISHED &amp;&amp; tcp-&gt;flags == PACKET_TYPE_FIN_ACK)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">DebugPrint</span>(<span class="string">&quot;---&gt; Status Change: ESTABLISHED to FIN_WAIT1\n&quot;</span>);</span><br><span class="line">        currentTCB-&gt;status = FIN_WAIT1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (currentTCB-&gt;status == ESTABLISHED)</span><br><span class="line">    &#123;</span><br><span class="line">        currentTCB-&gt;ackExpect = currentTCB-&gt;seq + len;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">DebugPrint</span>(<span class="string">&quot;---&gt; Status: %d\n&quot;</span>, currentTCB-&gt;status);</span><br><span class="line">        currentTCB-&gt;ackExpect = currentTCB-&gt;seq + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">tcp_sendIpPkt</span>((<span class="keyword">unsigned</span> <span class="keyword">char</span> *)tcp, <span class="number">20</span> + len, currentTCB-&gt;srcAddr, currentTCB-&gt;dstAddr, <span class="number">60</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">stud_tcp_socket</span><span class="params">(<span class="keyword">int</span> domain, <span class="keyword">int</span> type, <span class="keyword">int</span> protocol)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">DebugPrint</span>(<span class="string">&quot;---&gt; stud_tcp_socket():\n&quot;</span>);</span><br><span class="line">    <span class="comment">// 如果TCB表为空，插入三个NULL</span></span><br><span class="line">    <span class="comment">// socket的返回值应该是一个文件描述符</span></span><br><span class="line">    <span class="comment">// Linux中，文件描述符的0,1,2分别为std_in std_out std_err</span></span><br><span class="line">    <span class="comment">// 所以我们返回的值从3开始</span></span><br><span class="line">    <span class="comment">// 另外，我们希望能根据sockfd直接定位TCB，因此这样实现</span></span><br><span class="line">    <span class="keyword">if</span> (TCBTable.<span class="built_in">empty</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        TCBTable.<span class="built_in">push_back</span>(<span class="literal">NULL</span>);</span><br><span class="line">        TCBTable.<span class="built_in">push_back</span>(<span class="literal">NULL</span>);</span><br><span class="line">        TCBTable.<span class="built_in">push_back</span>(<span class="literal">NULL</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    currentTCB = <span class="keyword">new</span> TCB;</span><br><span class="line">    currentTCB-&gt;ack = gAckNum;</span><br><span class="line">    currentTCB-&gt;seq = gSeqNum;</span><br><span class="line">    currentTCB-&gt;srcPort = gSrcPort++;</span><br><span class="line">    currentTCB-&gt;sockfd = TCBTable.<span class="built_in">size</span>();</span><br><span class="line">    currentTCB-&gt;status = CLOSED;</span><br><span class="line"></span><br><span class="line">    TCBTable.<span class="built_in">push_back</span>(currentTCB);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> currentTCB-&gt;sockfd;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">struct sockaddr_in &#123;</span></span><br><span class="line"><span class="comment">        short   sin_family;</span></span><br><span class="line"><span class="comment">        u_short sin_port;</span></span><br><span class="line"><span class="comment">        struct  in_addr sin_addr;</span></span><br><span class="line"><span class="comment">        char    sin_zero[8];</span></span><br><span class="line"><span class="comment">&#125;;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">struct in_addr &#123;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    in_addr_t s_addr;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">&#125;;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">stud_tcp_connect</span><span class="params">(<span class="keyword">int</span> sockfd, struct sockaddr_in *addr, <span class="keyword">int</span> addrlen)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">DebugPrint</span>(<span class="string">&quot;---&gt; stud_tcp_connect():\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    currentTCB = TCBTable[sockfd];</span><br><span class="line"></span><br><span class="line">    currentTCB-&gt;dstPort = <span class="built_in">ntohs</span>(addr-&gt;sin_port);</span><br><span class="line">    currentTCB-&gt;status = SYN_SENT;</span><br><span class="line">    currentTCB-&gt;srcAddr = <span class="built_in">getIpv4Address</span>();</span><br><span class="line">    currentTCB-&gt;dstAddr = <span class="built_in">ntohl</span>(addr-&gt;sin_addr.s_addr);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">stud_tcp_output</span>(<span class="literal">NULL</span>, <span class="number">0</span>, PACKET_TYPE_SYN,</span><br><span class="line">                    currentTCB-&gt;srcPort,</span><br><span class="line">                    currentTCB-&gt;dstPort,</span><br><span class="line">                    currentTCB-&gt;srcAddr,</span><br><span class="line">                    currentTCB-&gt;dstAddr);</span><br><span class="line"></span><br><span class="line">    TCP *tcp = <span class="keyword">new</span> TCP;</span><br><span class="line">    <span class="keyword">int</span> len = <span class="built_in">waitIpPacket</span>((<span class="keyword">char</span> *)tcp, <span class="number">1000</span>);</span><br><span class="line">    <span class="keyword">while</span> (len == <span class="number">-1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        len = <span class="built_in">waitIpPacket</span>((<span class="keyword">char</span> *)tcp, <span class="number">1000</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">stud_tcp_input</span>((<span class="keyword">char</span> *)tcp, len, <span class="built_in">htonl</span>(currentTCB-&gt;srcAddr), <span class="built_in">htonl</span>(currentTCB-&gt;dstAddr));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">stud_tcp_send</span><span class="params">(<span class="keyword">int</span> sockfd, <span class="keyword">const</span> <span class="keyword">unsigned</span> <span class="keyword">char</span> *pData, <span class="keyword">unsigned</span> <span class="keyword">short</span> datalen, <span class="keyword">int</span> flags)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">DebugPrint</span>(<span class="string">&quot;---&gt; In stud_tcp_input():\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    currentTCB = TCBTable[sockfd];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (currentTCB-&gt;status == ESTABLISHED)</span><br><span class="line">    &#123;</span><br><span class="line">        currentTCB-&gt;data = (<span class="keyword">char</span> *)pData;</span><br><span class="line">        <span class="built_in">stud_tcp_output</span>((<span class="keyword">char</span> *)currentTCB-&gt;data, datalen, PACKET_TYPE_DATA,</span><br><span class="line">                        currentTCB-&gt;srcPort,</span><br><span class="line">                        currentTCB-&gt;dstPort,</span><br><span class="line">                        currentTCB-&gt;srcAddr,</span><br><span class="line">                        currentTCB-&gt;dstAddr);</span><br><span class="line"></span><br><span class="line">        TCP *tcp = <span class="keyword">new</span> TCP;</span><br><span class="line">        <span class="keyword">int</span> len = <span class="built_in">waitIpPacket</span>((<span class="keyword">char</span> *)tcp, <span class="number">1000</span>);</span><br><span class="line">        <span class="keyword">while</span> (len == <span class="number">-1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            len = <span class="built_in">waitIpPacket</span>((<span class="keyword">char</span> *)tcp, <span class="number">1000</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">stud_tcp_input</span>((<span class="keyword">char</span> *)tcp, len, <span class="built_in">htonl</span>(currentTCB-&gt;srcAddr), <span class="built_in">htonl</span>(currentTCB-&gt;dstAddr));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">stud_tcp_recv</span><span class="params">(<span class="keyword">int</span> sockfd, <span class="keyword">unsigned</span> <span class="keyword">char</span> *pData, <span class="keyword">unsigned</span> <span class="keyword">short</span> datalen, <span class="keyword">int</span> flags)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">DebugPrint</span>(<span class="string">&quot;---&gt; In stud_tcp_input():\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    currentTCB = TCBTable[sockfd];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (currentTCB-&gt;status == ESTABLISHED)</span><br><span class="line">    &#123;</span><br><span class="line">        TCP *tcp = <span class="keyword">new</span> TCP;</span><br><span class="line">        <span class="keyword">int</span> len = <span class="built_in">waitIpPacket</span>((<span class="keyword">char</span> *)tcp, <span class="number">1000</span>);</span><br><span class="line">        <span class="keyword">while</span> (len == <span class="number">-1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            len = <span class="built_in">waitIpPacket</span>((<span class="keyword">char</span> *)tcp, <span class="number">1000</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">memcpy</span>(pData, tcp-&gt;data, len);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">stud_tcp_input</span>((<span class="keyword">char</span> *)tcp, len, <span class="built_in">htonl</span>(currentTCB-&gt;srcAddr), <span class="built_in">htonl</span>(currentTCB-&gt;dstAddr));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">stud_tcp_close</span><span class="params">(<span class="keyword">int</span> sockfd)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">DebugPrint</span>(<span class="string">&quot;---&gt; In stud_tcp_input():\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    currentTCB = TCBTable[sockfd];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (currentTCB-&gt;status == ESTABLISHED)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">stud_tcp_output</span>(<span class="literal">NULL</span>, <span class="number">0</span>, PACKET_TYPE_FIN_ACK,</span><br><span class="line">                        currentTCB-&gt;srcPort,</span><br><span class="line">                        currentTCB-&gt;dstPort,</span><br><span class="line">                        currentTCB-&gt;srcAddr,</span><br><span class="line">                        currentTCB-&gt;dstAddr);</span><br><span class="line"></span><br><span class="line">        TCP *tcp = <span class="keyword">new</span> TCP;</span><br><span class="line">        <span class="keyword">int</span> len = <span class="built_in">waitIpPacket</span>((<span class="keyword">char</span> *)tcp, <span class="number">1000</span>);</span><br><span class="line">        <span class="keyword">while</span> (len == <span class="number">-1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            len = <span class="built_in">waitIpPacket</span>((<span class="keyword">char</span> *)tcp, <span class="number">1000</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">stud_tcp_input</span>((<span class="keyword">char</span> *)tcp, len, <span class="built_in">htonl</span>(currentTCB-&gt;srcAddr), <span class="built_in">htonl</span>(currentTCB-&gt;dstAddr));</span><br><span class="line"></span><br><span class="line">        tcp = <span class="keyword">new</span> TCP;</span><br><span class="line">        len = <span class="built_in">waitIpPacket</span>((<span class="keyword">char</span> *)tcp, <span class="number">1000</span>);</span><br><span class="line">        <span class="keyword">while</span> (len == <span class="number">-1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            len = <span class="built_in">waitIpPacket</span>((<span class="keyword">char</span> *)tcp, <span class="number">1000</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">stud_tcp_input</span>((<span class="keyword">char</span> *)tcp, len, <span class="built_in">htonl</span>(currentTCB-&gt;srcAddr), <span class="built_in">htonl</span>(currentTCB-&gt;dstAddr));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>课程作业</category>
        <category>计算机网络</category>
      </categories>
      <tags>
        <tag>作业</tag>
        <tag>计算机网络</tag>
      </tags>
  </entry>
  <entry>
    <title>专题：简谈python中的排序</title>
    <url>/2021/11/17/%E4%B8%93%E9%A2%98%EF%BC%9A%E7%AE%80%E8%B0%88python%E4%B8%AD%E7%9A%84%E6%8E%92%E5%BA%8F/</url>
    <content><![CDATA[<h1 id="序"><a href="#序" class="headerlink" title="序"></a>序</h1><p>排序问题在这门课中一直是一个小难点，虽然<code>python</code>提供了用来排序的方法，但是很多同学可能一时半会想不太明白这个问题，于是便有了这篇文章。另外，大家在做OJ上的作业题的时候，也可能遇到一些稍微复杂一点的排序问题，类似下面这样：</p>
<blockquote>
<p>有一些人，已知他们的身高和年龄，请将他们按照以下规则排序：</p>
<ol>
<li>身高从高到低排序</li>
<li>相同身高的人中，年龄大的在前面</li>
</ol>
</blockquote>
<p>对于这样的问题，可能有的同学一时不知道该怎么简洁的编写代码实现。</p>
<p>课程中提到排序的时候用的是<code>sorted</code>函数，也经常与<code>lambda</code>表达式配合使用。为了方便大家更好的理解这些问题，我将分为三个部分来介绍：</p>
<ol>
<li>基于比较的排序及实现</li>
<li><code>python</code>中的<code>sorted</code>方法</li>
<li><code>python</code>中的<code>lambda</code>表达式及简单应用</li>
</ol>
<p>由于<code>lambda</code>表达式部分的内容相对独立一些，且<strong>在使用<code>sorted</code>方法时并不是必须要使用<code>lambda</code>表达式，一定不要有什么奇怪的误解</strong>，所以<code>lambda</code>表达式的部分我会单开一个文章来介绍。</p>
<h1 id="基于比较的排序"><a href="#基于比较的排序" class="headerlink" title="基于比较的排序"></a>基于比较的排序</h1><p>考虑这样一个问题，当我给你一列数字，你该如何将他们按照一定的顺序（例如从大到小）进行排序？这当然是一个简单的问题，<strong>因为对于任意两个数，你知道如何比较它们的大小</strong>，那么显然，如果有一个数比其他的数都大，你可以把它放在第一个，然后从剩下的数中再找一个最大的，放在第二个……就排好了顺序！这就是一个直观的基于比较的排序的方法。</p>
<p>当然，对大家来说，与其理解基于比较的排序这个概念，不如来思考一下有没有<strong>不基于比较的排序</strong>，有兴趣的同学可以了解一下<strong>桶排序</strong>这个方法，是一个挺有意思的想法，这里我们就不细说了。</p>
<h2 id="选择排序——一个直观的排序算法"><a href="#选择排序——一个直观的排序算法" class="headerlink" title="选择排序——一个直观的排序算法"></a>选择排序——一个直观的排序算法</h2><p>在上一节中，我们举了下面这个简单的例子：</p>
<blockquote>
<p>如果有一个数比其他的数都大，你可以把它放在第一个，然后从剩下的数中再找一个最大的，放在第二个……就排好了顺序。</p>
</blockquote>
<p>我们来看一下这个算法的操作过程，例子如下：</p>
<blockquote>
<p>原始数列：1, 4, 1, 5, 9, 2, 6, 5, 3, 5, 8, 9, 7, 9, 3</p>
<p>每一步操作，我们都从没有排序过的数列中找到一个最大的数放到第一个，那么排序的每一步操作后的结果如下，竖线之前的是已经排序的数列，竖线之后的是还未排序的数列</p>
<p>step 1: 9 | 1, 4, 1, 5, 2, 6, 5, 3, 5, 8, 9, 7, 9, 3</p>
<p>step 2: 9, 9 | 1, 4, 1, 5, 2, 6, 5, 3, 5, 8, 7, 9, 3</p>
<p>step 3: 9, 9, 9 | 1, 4, 1, 5, 2, 6, 5, 3, 5, 8, 7, 3</p>
<p>step 4: 9, 9, 9, 8 | 1, 4, 1, 5, 2, 6, 5, 3, 5, 7, 3</p>
<p>step 5: 9, 9, 9, 8, 7 | 1, 4, 1, 5, 2, 6, 5, 3, 5, 3</p>
<p>……</p>
<p>step 15: 9, 9, 9, 8, 7, 6, 5, 5, 5, 4, 3, 3, 2, 1, 1</p>
</blockquote>
<p>这个过程应该十分好理解，也非常直观，这个排序算法就叫选择排序，是一个经典的排序算法。我们将这个过程写成python中的函数的形式如下（可以尝试先不看代码，自己按照上面的思路实现一个出来）：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">selection_sort</span>(<span class="params">data: <span class="built_in">list</span></span>):</span></span><br><span class="line">    <span class="comment"># 当数列长度为n时，我们应该选择n - 1次</span></span><br><span class="line">    <span class="comment"># 第 1 次从 n 个数中选一个最大的</span></span><br><span class="line">    <span class="comment"># 第 2 次从 n - 1 个数中选一个最大的</span></span><br><span class="line">    <span class="comment"># 第 k 次从 n + 1 - k 个数中选一个最大的</span></span><br><span class="line">    <span class="comment"># 第 n - 1 次从 2 个数中选一个最大的</span></span><br><span class="line">    <span class="comment"># 第 n 次开始时，只剩下一个数，不需要再选择了</span></span><br><span class="line">    <span class="comment"># 所以选择的过程一共有 n - 1次</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(data) - <span class="number">1</span>):</span><br><span class="line">        <span class="comment"># 第 1 次选择时，从下标 0 到下标 n - 1中选一个最大的，放到下标 0 处</span></span><br><span class="line">        <span class="comment"># 第 2 次选择时，从下标 1 到下标 n - 1中选一个最大的，放到下标 1 处</span></span><br><span class="line">        <span class="comment"># 第 k 次选择时，从下标 k - 1 到下标 n - 1中选一个最大的，放到下标 k - 1 处</span></span><br><span class="line">        <span class="comment"># 注意，如果要将选出来的下标 j 对应的数字放到下标 i，只需要交换这两个位置的数即可</span></span><br><span class="line"></span><br><span class="line">        max_idx = i  <span class="comment"># 当前最大值对应的下标，循环时不断更改</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(i, <span class="built_in">len</span>(data)):  <span class="comment"># 注意这里的range范围！</span></span><br><span class="line">            <span class="keyword">if</span> data[j] &gt; data[max_idx]:</span><br><span class="line">                max_idx = j</span><br><span class="line">        <span class="comment"># 找到最大值位置后，交换</span></span><br><span class="line">        data[i], data[max_idx] = data[max_idx], data[i]</span><br><span class="line">    <span class="comment"># 返回排序好的列表</span></span><br><span class="line">    <span class="keyword">return</span> data</span><br></pre></td></tr></table></figure>

<p>然后就可以进行这样的测试：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">origin_list = [<span class="number">1</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">9</span>, <span class="number">2</span>, <span class="number">6</span>, <span class="number">5</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">7</span>, <span class="number">9</span>, <span class="number">3</span>]</span><br><span class="line"><span class="built_in">print</span>(selection_sort(origin_list))</span><br><span class="line"><span class="comment"># 输出为：[9, 9, 9, 8, 7, 6, 5, 5, 5, 4, 3, 3, 2, 1, 1]</span></span><br></pre></td></tr></table></figure>

<p>可见，确实正确的进行了排序。</p>
<p><strong>（下面的内容仅作了解）</strong></p>
<p><strong>注意</strong>，在这个排序算法的实现中（以及各种基于比较的算法的实现中），有一个重要的细节问题。请注意上面代码的第17行，这个<code>if</code>条件的含义是，如果发现了一个数，比当前找的的最大值还大，就更新当前找到的最大值的位置。那么可以思考这个问题，如果把<code>&gt;</code>换成<code>&gt;=</code>，会影响排序的结果吗？答案显然是不会的。但是使用<code>&gt;</code>和使用<code>&gt;=</code>就完全一样吗？<strong>并不是！</strong>这里涉及到一个<strong>排序的稳定性</strong>的问题，简而言之，指的是对于值相等的那些数，排序之后，这些数的顺序是否与之前一致，若一致，我们就称这个排序是稳定的，否则是不稳定的。</p>
<p>举个简单的例子，有四个人A、B、C、D，身高分别为<code>1.5m</code>、<code>1.6m</code>、<code>1.5m</code>、<code>1.7m</code>。</p>
<p>最开始的顺序为<code>A, B, C, D</code>，按照身高从小到大排序可以得到两种结果：</p>
<ol>
<li><code>A, C, B, D</code></li>
<li><code>C, A, B, D</code></li>
</ol>
<p>其中第一种结果就是一个稳定排序，因为A和C身高相同，原先A在C前面，排序后A仍然在C前面。第二种结果就是不稳定的，因为A和C的相对顺序改变了。</p>
<h2 id="比较函数"><a href="#比较函数" class="headerlink" title="比较函数"></a>比较函数</h2><p>如果问基于比较的排序的最重要的一点是什么，那当然是<strong>如何比较</strong>。</p>
<p>我们再看一下刚才的算法（去掉了注释，是不是看起来还是挺简洁的）：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">selection_sort</span>(<span class="params">data: <span class="built_in">list</span></span>):</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(data) - <span class="number">1</span>):</span><br><span class="line">        max_idx = i</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(i, <span class="built_in">len</span>(data)):</span><br><span class="line">            <span class="keyword">if</span> data[j] &gt; data[max_idx]:</span><br><span class="line">                max_idx = j</span><br><span class="line">        data[i], data[max_idx] = data[max_idx], data[i]</span><br><span class="line">    <span class="keyword">return</span> data</span><br></pre></td></tr></table></figure>

<p>在这个算法中，哪一行函数起到了<strong>比较</strong>的作用？应当是第5行中的<code>data[j] &gt; data[max_idx]</code>，其他部分都是与比较无关的。对于排序数字这个问题，显然比较方法是简单的，但是如果遇到一些复杂的条件该如何解决呢？</p>
<p>例如下面这个问题：</p>
<blockquote>
<p>有一些人，已知他们的身高和年龄，请将他们按照以下规则排序：</p>
<ol>
<li>身高从高到低排序</li>
<li>相同身高的人中，年龄大的在前面</li>
<li>（可选）若身高和年龄相同，则两人排序前和排序后的相对位置不应改变，即排序应当是稳定的</li>
</ol>
</blockquote>
<p>当然，如果让你手动按照这个规则排序，这当然是简单的，因为<strong>这个规则明确告诉你了应该如何比较</strong>，只要你知道怎么比较，后面就都不是问题。但是如何写代码呢？</p>
<p>我们可以将上面的代码改写一些，<strong>将比较的过程抽象成一个函数</strong>。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">is_greater</span>(<span class="params">x, y</span>) -&gt; <span class="built_in">bool</span>:</span></span><br><span class="line">    <span class="keyword">return</span> x &gt; y</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">selection_sort_v2</span>(<span class="params">data: <span class="built_in">list</span></span>):</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(data) - <span class="number">1</span>):</span><br><span class="line">        max_idx = i</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(i, <span class="built_in">len</span>(data)):</span><br><span class="line">            <span class="keyword">if</span> is_greater(data[j], data[max_idx]):</span><br><span class="line">                max_idx = j</span><br><span class="line">        data[i], data[max_idx] = data[max_idx], data[i]</span><br><span class="line">    <span class="keyword">return</span> data</span><br></pre></td></tr></table></figure>

<p>其中函数<code>is_greater(x, y)</code>的含义为：如果<code>x &gt; y</code>，则返回<code>True</code>，否则返回<code>False</code>，当然，在对数字进行排序时，这样的抽象似乎多此一举，但是现在想想，按照这个写法，能不能解决上面那个”身高/年龄排序问题“呢？</p>
<p>答案是显然的。</p>
<p>现在假设我们用元组来表示一个人，例如<code>(&quot;Alice&quot;, 170, 20)</code>表示这个人名字是<code>Alice</code>，身高为170，年龄为20。</p>
<p>首先我们<strong>编写比较函数</strong>，请注意，<strong>比较函数的参数类型取决于你自己定义的数据表示方法</strong>，现在我们知道一个数据是一个三元元组，那么你的函数的参数也应该是一个三元元组，直接给出编写好的函数如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">is_greater_v2</span>(<span class="params">x, y</span>):</span></span><br><span class="line">    <span class="comment"># 注意x和y都是三元元组</span></span><br><span class="line">    <span class="comment"># 下标 0 为名字，在本例中用不到</span></span><br><span class="line">    <span class="comment"># 下标 1 为身高</span></span><br><span class="line">    <span class="comment"># 下标 2 为年龄</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 如果x的身高比y大，则“x大于y”</span></span><br><span class="line">    <span class="keyword">if</span> x[<span class="number">1</span>] &gt; y[<span class="number">1</span>]:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="comment"># 如果x y身高相同，但是x年龄大，则“x大于y”</span></span><br><span class="line">    <span class="keyword">elif</span> x[<span class="number">1</span>] == y[<span class="number">1</span>] <span class="keyword">and</span> x[<span class="number">2</span>] &gt; y[<span class="number">2</span>]:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="comment"># 其他情况都是“x不大于y”</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">False</span></span><br></pre></td></tr></table></figure>

<p>当然，你熟练了之后可以直接写成下面这个简洁的形式：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">is_greater_v3</span>(<span class="params">x, y</span>):</span></span><br><span class="line">    <span class="keyword">return</span> (x[<span class="number">1</span>] &gt; y[<span class="number">1</span>]) <span class="keyword">or</span> (x[<span class="number">1</span>] == y[<span class="number">1</span>] <span class="keyword">and</span> x[<span class="number">2</span>] &gt; y[<span class="number">2</span>])</span><br></pre></td></tr></table></figure>

<p>接下来我们可以进行测试了，这时候我们会注意到一个问题，我们之前写的<code>selection_sort</code>函数中用的比较函数是固定的，但是我们现在应该能意识到一个问题，<strong>给出不同的比较函数，比较逻辑本身不会变动，换句话说，我们可以认为比较函数本身也可以作为一个参数</strong>，因此我们可以将<code>selection_sort</code>写成下面这个形式：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">selection_sort_v3</span>(<span class="params">data: <span class="built_in">list</span>, is_greater</span>):</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(data) - <span class="number">1</span>):</span><br><span class="line">        max_idx = i</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(i, <span class="built_in">len</span>(data)):</span><br><span class="line">            <span class="keyword">if</span> is_greater(data[j], data[max_idx]):</span><br><span class="line">                max_idx = j</span><br><span class="line">        data[i], data[max_idx] = data[max_idx], data[i]</span><br><span class="line">    <span class="keyword">return</span> data</span><br></pre></td></tr></table></figure>

<p>请注意，在这个函数中，<code>is_greater</code>这个参数本身就是一个函数，在第5行我们调用了这个传入的函数。这种<strong>以函数作为参数的函数称为高阶函数</strong>。</p>
<p>用下面这个例子测试：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">is_greater_v3</span>(<span class="params">x, y</span>):</span></span><br><span class="line">    <span class="keyword">return</span> (x[<span class="number">1</span>] &gt; y[<span class="number">1</span>]) <span class="keyword">or</span> (x[<span class="number">1</span>] == y[<span class="number">1</span>] <span class="keyword">and</span> x[<span class="number">2</span>] &gt; y[<span class="number">2</span>])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">selection_sort_v3</span>(<span class="params">data: <span class="built_in">list</span>, is_greater</span>):</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(data) - <span class="number">1</span>):</span><br><span class="line">        max_idx = i</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(i, <span class="built_in">len</span>(data)):</span><br><span class="line">            <span class="keyword">if</span> is_greater(data[j], data[max_idx]):</span><br><span class="line">                max_idx = j</span><br><span class="line">        data[i], data[max_idx] = data[max_idx], data[i]</span><br><span class="line">    <span class="keyword">return</span> data</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">origin_list_2 = [(<span class="string">&quot;Alice&quot;</span>, <span class="number">170</span>, <span class="number">20</span>), (<span class="string">&quot;Bob&quot;</span>, <span class="number">176</span>, <span class="number">21</span>), (<span class="string">&quot;Carol&quot;</span>, <span class="number">170</span>, <span class="number">20</span>),</span><br><span class="line">                 (<span class="string">&quot;Dave&quot;</span>, <span class="number">180</span>, <span class="number">23</span>), (<span class="string">&quot;Eve&quot;</span>, <span class="number">176</span>, <span class="number">19</span>), (<span class="string">&quot;Francis&quot;</span>, <span class="number">165</span>, <span class="number">25</span>)]</span><br><span class="line"><span class="built_in">print</span>(selection_sort_v3(origin_list_2, is_greater_v3))</span><br></pre></td></tr></table></figure>

<p>得到输出为：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">[(<span class="string">&#x27;Dave&#x27;</span>, <span class="number">180</span>, <span class="number">23</span>), (<span class="string">&#x27;Bob&#x27;</span>, <span class="number">176</span>, <span class="number">21</span>), (<span class="string">&#x27;Eve&#x27;</span>, <span class="number">176</span>, <span class="number">19</span>), </span><br><span class="line">(<span class="string">&#x27;Alice&#x27;</span>, <span class="number">170</span>, <span class="number">20</span>), (<span class="string">&#x27;Carol&#x27;</span>, <span class="number">170</span>, <span class="number">20</span>), (<span class="string">&#x27;Francis&#x27;</span>, <span class="number">165</span>, <span class="number">25</span>)]</span><br></pre></td></tr></table></figure>

<p>可见，确实按照我们的要求进行了排序。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>在基于比较的排序中，关键是<strong>定义清楚一个需要排序的数据是什么样的格式</strong>以及<strong>这种格式的数据应当如何比较，可以函数的形式给出</strong>。</p>
<p>排序过程本身涉及到算法的设计，我们大可不用在意这一点，本文中提到的选择排序其实是一个效率十分低的排序方法，在数据量较大时会非常慢，只是为了让大家有一个直观的理解。在理解了<strong>定义比较函数</strong>这个操作之后我们再去看怎么将<code>python</code>中提供的<code>sorted</code>方法与这种思想进行结合。</p>
<h1 id="python中的sorted方法"><a href="#python中的sorted方法" class="headerlink" title="python中的sorted方法"></a>python中的<code>sorted</code>方法</h1><h2 id="方法的参数含义"><a href="#方法的参数含义" class="headerlink" title="方法的参数含义"></a>方法的参数含义</h2><p>sorted 语法：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sorted</span>(iterable, key=<span class="literal">None</span>, reverse=<span class="literal">False</span>)  </span><br></pre></td></tr></table></figure>

<p>参数说明：</p>
<ul>
<li><code>iterable</code> ：可迭代对象，例如<code>list</code>。</li>
<li><code>key</code> ：关键词函数，指定用哪个值来进行排序，是一个只接受一个参数的函数，接受的参数值是上述可迭代对象中的元素，返回一个值。具体的解释看本节中的第三部分。</li>
<li><code>reverse</code>：排序规则，<code>reverse = True </code>降序 ，<code>reverse = False</code>升序（默认）。</li>
</ul>
<h2 id="使用sorted-比较函数"><a href="#使用sorted-比较函数" class="headerlink" title="使用sorted + 比较函数"></a>使用<code>sorted</code> + 比较函数</h2><h3 id="cmp-to-key函数"><a href="#cmp-to-key函数" class="headerlink" title="cmp_to_key函数"></a><code>cmp_to_key</code>函数</h3><p>从上述的<code>sorted</code>的参数含义可以看出，在<code>python3</code>的<code>sorted</code>方法中，似乎并没有地方让你填写比较函数。（而在<code>python2</code>中是有的，请同学们查资料的时候一定注意区分）。所以在<code>python3</code>中我们需要使用一个特殊函数<code>cmp_to_key</code>来使用我们之前讲的比较函数。该函数需要<code>import</code>，如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> cmp_to_key</span><br></pre></td></tr></table></figure>

<p>之后你就可以使用<code>cmp_to_key</code>这个函数了。</p>
<p>当然，你也可以换种写法：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> functools</span><br></pre></td></tr></table></figure>

<p>然后使用<code>functools.cmp_to_key</code></p>
<p><strong>你现在应当能理解两种方法的区别，如果不能，你应该复习了！</strong></p>
<p><code>cmp_to_key</code>这个函数，顾名思义，就是将你定义的比较函数转换成<code>sorted()</code>方法需要的<code>key</code>函数。你不用管这是如何实现的，只需要知道这个在干什么就行了。</p>
<h3 id="使用cmp-to-key的比较函数的定义"><a href="#使用cmp-to-key的比较函数的定义" class="headerlink" title="使用cmp_to_key的比较函数的定义"></a>使用<code>cmp_to_key</code>的比较函数的定义</h3><p>之前我们讲比较函数的时候，用了一种比较直观的定义，即定义<code>is_greater</code>来表示一个元素是否大于另一个元素，这样的比较函数只能用来表示是否大于，即“A大于B”或“A不大于B”，而不能表示“等于”或者“小于”关系。</p>
<p>为了解决这个问题，我们可以用其他的方式来定义比较函数。在使用<code>cmp_to_key</code>，我们应当按照如下规则定义比较函数：</p>
<blockquote>
<p>接受两个参数A和B</p>
<ul>
<li>A大于B返回正数</li>
<li>A等于B返回0</li>
<li>A小于B返回负数</li>
</ul>
</blockquote>
<p>对于本文中提到的”身高/年龄排序问题”，可以如下定义：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">is_greater_v4</span>(<span class="params">x, y</span>):</span></span><br><span class="line">    <span class="comment"># 注意x和y都是三元元组</span></span><br><span class="line">    <span class="comment"># 下标 0 为名字，在本例中用不到</span></span><br><span class="line">    <span class="comment"># 下标 1 为身高</span></span><br><span class="line">    <span class="comment"># 下标 2 为年龄</span></span><br><span class="line">	<span class="comment"># “大于”时返回1</span></span><br><span class="line">    <span class="keyword">if</span> (x[<span class="number">1</span>] &gt; y[<span class="number">1</span>]) <span class="keyword">or</span> (x[<span class="number">1</span>] == y[<span class="number">1</span>] <span class="keyword">and</span> x[<span class="number">2</span>] &gt; y[<span class="number">2</span>]):</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="comment"># “等于”时返回0</span></span><br><span class="line">    <span class="keyword">elif</span> x[<span class="number">1</span>] == y[<span class="number">1</span>] <span class="keyword">and</span> x[<span class="number">2</span>] == y[<span class="number">2</span>]:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    <span class="comment"># 其他情况（即小于）下返回-1</span></span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span></span><br></pre></td></tr></table></figure>

<h3 id="使用示例"><a href="#使用示例" class="headerlink" title="使用示例"></a>使用示例</h3><p>定义了以上的比较函数之后，就可以配合<code>cmp_to_key</code>来使用<code>sorted</code>方法了。如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">origin_list_2 = [(<span class="string">&quot;Alice&quot;</span>, <span class="number">170</span>, <span class="number">20</span>), (<span class="string">&quot;Bob&quot;</span>, <span class="number">176</span>, <span class="number">21</span>), (<span class="string">&quot;Carol&quot;</span>, <span class="number">170</span>, <span class="number">20</span>),</span><br><span class="line">                 (<span class="string">&quot;Dave&quot;</span>, <span class="number">180</span>, <span class="number">23</span>), (<span class="string">&quot;Eve&quot;</span>, <span class="number">176</span>, <span class="number">19</span>), (<span class="string">&quot;Francis&quot;</span>, <span class="number">165</span>, <span class="number">25</span>)]</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">sorted</span>(origin_list_2, key=cmp_to_key(is_greater_v4)))</span><br></pre></td></tr></table></figure>

<p>输出如下，由于<code>sorted</code>方法默认是从小到大，你可以看到这个顺序和我们之前算出来的相反：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">[(<span class="string">&#x27;Francis&#x27;</span>, <span class="number">165</span>, <span class="number">25</span>), (<span class="string">&#x27;Alice&#x27;</span>, <span class="number">170</span>, <span class="number">20</span>), (<span class="string">&#x27;Carol&#x27;</span>, <span class="number">170</span>, <span class="number">20</span>), </span><br><span class="line"> (<span class="string">&#x27;Eve&#x27;</span>, <span class="number">176</span>, <span class="number">19</span>), (<span class="string">&#x27;Bob&#x27;</span>, <span class="number">176</span>, <span class="number">21</span>), (<span class="string">&#x27;Dave&#x27;</span>, <span class="number">180</span>, <span class="number">23</span>)]</span><br></pre></td></tr></table></figure>

<h2 id="使用sorted-key参数"><a href="#使用sorted-key参数" class="headerlink" title="使用sorted + key参数"></a>使用<code>sorted</code> + <code>key</code>参数</h2><h3 id="key是什么？从哪儿来的？"><a href="#key是什么？从哪儿来的？" class="headerlink" title="key是什么？从哪儿来的？"></a><code>key</code>是什么？从哪儿来的？</h3><p>在之前的部分中，我们一直在说比较函数<code>cmp</code>本质就是去定义两个东西应该怎么比较，但是在所有的场景下我们都需要<strong>完全手动定义</strong>两个数据怎么比较吗？有没有更简洁一些的方法呢？</p>
<p>例如，对于下面的”身高/年龄”数据进行排序，如果我们要求只按照身高排序：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">[(<span class="string">&quot;Alice&quot;</span>, <span class="number">170</span>, <span class="number">20</span>), (<span class="string">&quot;Bob&quot;</span>, <span class="number">176</span>, <span class="number">21</span>), (<span class="string">&quot;Carol&quot;</span>, <span class="number">170</span>, <span class="number">20</span>),</span><br><span class="line">(<span class="string">&quot;Dave&quot;</span>, <span class="number">180</span>, <span class="number">23</span>), (<span class="string">&quot;Eve&quot;</span>, <span class="number">176</span>, <span class="number">19</span>), (<span class="string">&quot;Francis&quot;</span>, <span class="number">165</span>, <span class="number">25</span>)]</span><br></pre></td></tr></table></figure>

<p>按照之前的比较函数的想法，我们可以定义：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">is_greater</span>(<span class="params">x, y</span>):</span></span><br><span class="line">	<span class="keyword">return</span> x[<span class="number">1</span>] &gt; y[<span class="number">1</span>]</span><br></pre></td></tr></table></figure>

<p>但是仔细想一下，这个比较函数似乎没什么意义，<strong>你好像是在教电脑如何比较两个整数谁更大</strong>。</p>
<blockquote>
<p>电脑：瞧谁不起，我自己不会比？</p>
</blockquote>
<p>在这种条件下，你会发现问题的关键不在于怎么去比较两个数据，而在于<strong>应该用两个数据的哪部分信息去比</strong>，这个用于比较的部分信息就是<code>key</code>。</p>
<h3 id="使用key函数的简单比较"><a href="#使用key函数的简单比较" class="headerlink" title="使用key函数的简单比较"></a>使用<code>key</code>函数的简单比较</h3><p>为了表示这部分信息，我们就应该定义一个关键词函数（这个函数就是<code>sorted</code>方法需要接受的参数），这个函数的作用就是<strong>将原始的数据转换成用于比较的数据</strong>。例如原始数据为一个三元组，我们只需要用其中第二个元素来进行比较，就可以写一个这样的函数：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">key_func</span>(<span class="params">x</span>):</span></span><br><span class="line">    <span class="keyword">return</span> x[<span class="number">1</span>]</span><br></pre></td></tr></table></figure>

<p>这个函数接受一个参数<code>x</code>，这个参数的样子类似<code>(&quot;Dave&quot;, 180, 23)</code>，返回值为<code>x[1]</code>，即元组中的第二个元素，这个元素就是用来比较的东西。然后将这个函数传给<code>sorted</code>，如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="built_in">sorted</span>(origin_list_2, key=key_func))</span><br><span class="line"><span class="comment"># 输出为：[(&#x27;Francis&#x27;, 165, 25), (&#x27;Alice&#x27;, 170, 20), (&#x27;Carol&#x27;, 170, 20), </span></span><br><span class="line"><span class="comment">#        (&#x27;Bob&#x27;, 176, 21), (&#x27;Eve&#x27;, 176, 19), (&#x27;Dave&#x27;, 180, 23)]</span></span><br></pre></td></tr></table></figure>

<p>可以看到就按照身高排好序了，并且由于我们没有对年龄排序，可以发现”Bob”和”Eve”并没有按照年龄从大到小排序。</p>
<p>当然，如果需要输出身高从大到小排序后的结果，可以怎么做呢？最直观的方法当然是设置参数<code>reverse=True</code>，但是能不能直接在<code>key_func</code>上做文章呢？</p>
<p>请看如下代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">key_func_v2</span>(<span class="params">x</span>):</span></span><br><span class="line">    <span class="keyword">return</span> -x[<span class="number">1</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">sorted</span>(origin_list_2, key=key_func_v2))</span><br><span class="line"><span class="comment"># 输出为：[(&#x27;Dave&#x27;, 180, 23), (&#x27;Bob&#x27;, 176, 21), (&#x27;Eve&#x27;, 176, 19), (&#x27;Alice&#x27;, 170, 20), </span></span><br><span class="line"><span class="comment">#        (&#x27;Carol&#x27;, 170, 20), (&#x27;Francis&#x27;, 165, 25)]</span></span><br></pre></td></tr></table></figure>

<p>可以发现，我们略微调整一下<code>key</code>函数，就可以将身高从大到小排序了。如何实现的呢？</p>
<p>首先，我们知道，<code>sorted()</code>方法默认是按照<strong>升序</strong>排列，而<code>key</code>函数指定了用什么样的值进行排序，在代码的第二行我们返回了<code>-x[1]</code>，即身高的相反数，那么第3行的效果就是将身高的相反数按照升序排列……不就是将身高按照降序排列嘛！</p>
<h3 id="使用key函数进行多条件比较"><a href="#使用key函数进行多条件比较" class="headerlink" title="使用key函数进行多条件比较"></a>使用<code>key</code>函数进行多条件比较</h3><p>下面回到我们一开始的问题：</p>
<blockquote>
<p>有一些人，已知他们的身高和年龄，请将他们按照以下规则排序：</p>
<ol>
<li>身高从高到低排序</li>
<li>相同身高的人中，年龄大的在前面</li>
</ol>
</blockquote>
<p>之前我们对这个问题的解法是，定义一个比较函数进行比较，那么能不能使用定义<code>key</code>函数的方法进行比较呢？答案是肯定的！</p>
<p>类似这样的”先比较x，如果相等再比较y，如果相等再比较z……”的问题，本质上其实是一个字典序排序问题（可以自行了解一下）。我们只需要将<code>key_func</code>的返回值作一点修改就行了。例如，我们需要先按照身高排序，身高大的优先，然后再按照年龄排序，年龄大的优先，那么就可以定义如下函数：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">key_func_v3</span>(<span class="params">x</span>):</span></span><br><span class="line">    <span class="keyword">return</span> (x[<span class="number">1</span>], x[<span class="number">2</span>])</span><br></pre></td></tr></table></figure>

<p>可见，我们此时返回的是一个元组，<strong>返回的元组的意义是，先比较元组的第一个元素，如果第一个元素相等，则再比较第二个元素，以此类推……你想要多少个都行</strong>。这里我们返回的元组是<code>(x[1], x[2])</code>，根据我们定义的数据的含义，元组的第一项就是身高，第二项就是年龄，当你这样去定义一个<code>key</code>函数的时候，就表示你需要先按照身高从大到小排序，再按照年龄从大到小排序。测试如下（<strong>再强调一遍，默认是升序，你现在应该能理解为什么输出是这样的</strong>）：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="built_in">sorted</span>(origin_list_2, key=key_func_v3))</span><br><span class="line"><span class="comment"># 输出为：[(&#x27;Francis&#x27;, 165, 25), (&#x27;Alice&#x27;, 170, 20), (&#x27;Carol&#x27;, 170, 20), </span></span><br><span class="line"><span class="comment">#        (&#x27;Eve&#x27;, 176, 19), (&#x27;Bob&#x27;, 176, 21), (&#x27;Dave&#x27;, 180, 23)]</span></span><br></pre></td></tr></table></figure>

<p>那么问题来了，如果我们希望身高<strong>从大到小</strong>排序，身高相同时年龄<strong>从小到大</strong>排序怎么办？</p>
<p>结合一下上两个例子，不难写出如下代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">key_func_v4</span>(<span class="params">x</span>):</span></span><br><span class="line">    <span class="keyword">return</span> (x[<span class="number">1</span>], -x[<span class="number">2</span>]) <span class="comment"># 注意这里第二个元素加了一个负号</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">sorted</span>(origin_list_2, key=key_func_v4))</span><br><span class="line"><span class="comment"># 输出为：[(&#x27;Francis&#x27;, 165, 25), (&#x27;Alice&#x27;, 170, 20), (&#x27;Carol&#x27;, 170, 20), </span></span><br><span class="line"><span class="comment">#        (&#x27;Bob&#x27;, 176, 21), (&#x27;Eve&#x27;, 176, 19), (&#x27;Dave&#x27;, 180, 23)]</span></span><br></pre></td></tr></table></figure>

<p>仔细看这个代码，你应该逐渐理解一切.jpg。</p>
<p>思考：下面这个<code>key</code>函数是在用什么标准排序呢？</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">key_func_v4</span>(<span class="params">x</span>):</span></span><br><span class="line">    <span class="keyword">return</span> x[<span class="number">1</span>] + x[<span class="number">2</span>]</span><br></pre></td></tr></table></figure>

<h1 id="对字典元素进行“排序”"><a href="#对字典元素进行“排序”" class="headerlink" title="对字典元素进行“排序”"></a>对字典元素进行“排序”</h1><p>对字典元素排序的问题是一个必须要掌握的问题，我们用老师的示例再来看一遍这个问题。</p>
<p>有一个字典：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">d = &#123;<span class="string">&quot;zhang&quot;</span>:<span class="number">18</span>, <span class="string">&quot;li&quot;</span>:<span class="number">19</span>, <span class="string">&quot;wang&quot;</span>:<span class="number">20</span>, <span class="string">&quot;zhao&quot;</span>:<span class="number">17</span>&#125;</span><br></pre></td></tr></table></figure>

<p>我们现在想对这个字典排序按照年龄大小进行排序（请注意一个问题，字典本身是无序的，说是字典排序，其实就是把字典元素转成列表后进行排序），应该怎么做呢？</p>
<p>首先，字典本身不是<code>iterable</code> ，我们需要先将字典元素提取为列表，即使用<code>d.items()</code>如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(d.items())</span><br><span class="line"><span class="comment"># dict_items([(&#x27;zhang&#x27;, 18), (&#x27;li&#x27;, 19), (&#x27;wang&#x27;, 20), (&#x27;zhao&#x27;, 17)])</span></span><br></pre></td></tr></table></figure>

<p>注意，从输出结果可以看出，这其实并不是一个列表，而是一个<code>dict_items</code>对象，但是这个对象是<code>iterable</code>的，可以用来遍历，所以可以用来排序。且从这个形式可以看出，其实和列表是类似的，可以不用在意那些细节了。</p>
<p>观察结果可知，这个列表是一个二元元组的列表，元组的第一个元素是字典中的<code>key</code>，第二个元素为字典中的<code>value</code>（权当复习了）。如果要按照第二个元素排序，则只需要写一个用来提取第二个元素的<code>key_func</code>即可，使用函数（而不是<code>lambda</code>表达式）的写法如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">key_func</span>(<span class="params">x</span>):</span></span><br><span class="line">    <span class="keyword">return</span> x[<span class="number">1</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">sorted</span>(d.items(), key=key_func, reverse=<span class="literal">True</span>))</span><br><span class="line"><span class="comment"># 输出为：[(&#x27;wang&#x27;, 20), (&#x27;li&#x27;, 19), (&#x27;zhang&#x27;, 18), (&#x27;zhao&#x27;, 17)]</span></span><br></pre></td></tr></table></figure>

<p>当然，可以使用<code>lambda</code>表达式直接写成如下形式：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="built_in">sorted</span>(d.items(), key=<span class="keyword">lambda</span> item:item[<span class="number">1</span>], reverse=<span class="literal">True</span>))</span><br><span class="line"><span class="comment"># 输出为：[(&#x27;wang&#x27;, 20), (&#x27;li&#x27;, 19), (&#x27;zhang&#x27;, 18), (&#x27;zhao&#x27;, 17)]</span></span><br></pre></td></tr></table></figure>

<p>其中<code>lambda item:item[1]</code>和以函数的形式写出的<code>key_func</code>效果作用和效果都是相同的。</p>
]]></content>
      <categories>
        <category>计算概论C</category>
      </categories>
      <tags>
        <tag>计算概论C</tag>
        <tag>计算概论C专题</tag>
      </tags>
  </entry>
</search>
