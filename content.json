{"meta":{"title":"kinami's","subtitle":"一点微小的贡献","description":"普通的CS学生/一般通过音游玩家","author":"kinami","url":"http://www.kinami.cc","root":"/"},"pages":[{"title":"关于我","date":"2021-04-13T10:48:11.000Z","updated":"2021-04-13T16:59:57.261Z","comments":true,"path":"about/index.html","permalink":"http://www.kinami.cc/about/index.html","excerpt":"","text":"随便写写"},{"title":"标签","date":"2021-04-13T10:44:38.000Z","updated":"2021-04-13T16:57:54.066Z","comments":true,"path":"tags/index.html","permalink":"http://www.kinami.cc/tags/index.html","excerpt":"","text":""},{"title":"内容分类","date":"2021-04-13T10:44:24.000Z","updated":"2021-04-13T16:57:57.483Z","comments":true,"path":"categories/index.html","permalink":"http://www.kinami.cc/categories/index.html","excerpt":"","text":""}],"posts":[{"title":"专题：浮点数的精度问题","slug":"专题：浮点数的精度问题","date":"2021-11-11T02:31:00.000Z","updated":"2021-11-11T02:48:36.943Z","comments":true,"path":"2021/11/11/专题：浮点数的精度问题/","link":"","permalink":"http://www.kinami.cc/2021/11/11/%E4%B8%93%E9%A2%98%EF%BC%9A%E6%B5%AE%E7%82%B9%E6%95%B0%E7%9A%84%E7%B2%BE%E5%BA%A6%E9%97%AE%E9%A2%98/","excerpt":"","text":"一位同学曾经在群里问了这样一个问题：以下代码的输出为什么没有遵循遇5结果为偶的规则呢？ 12print(round(3.155,2))# 上述语句输出为3.15而不是3.16 这是由于计算机表示数的能力有限导致的。我们应该都知道无限循环小数这个概念，在十进制下，许多有理数都是无限循环小数，例如1/3，1/7等。同理，在二进制下，同样有很多有理数也是无限循环小数，例如上面出现的这个3.155，转换成二进制的结果如下： 111.001 00111101011100001010 00111101011100001010 001111... 但是计算机表示一个数的时候，只能用有限的数位来表示，因此有些数字表示成二进制小数后就会被截断，从而比原来的值小（这个大小关系应该是显然的），因此，3.155这个数字在计算机中实际储存的值应该是一个比3.155更小的值，具体的值如下： 因此，保留到两位小数之后就会变成3.15而不是3.16。 这是一个很好的了解浮点数的精度问题的实例，你只要能通过这个例子认识到浮点数的精度问题大概是怎么来的就行了。","categories":[{"name":"计算概论C","slug":"计算概论C","permalink":"http://www.kinami.cc/categories/%E8%AE%A1%E7%AE%97%E6%A6%82%E8%AE%BAC/"}],"tags":[{"name":"计算概论C","slug":"计算概论C","permalink":"http://www.kinami.cc/tags/%E8%AE%A1%E7%AE%97%E6%A6%82%E8%AE%BAC/"},{"name":"计算概论C专题","slug":"计算概论C专题","permalink":"http://www.kinami.cc/tags/%E8%AE%A1%E7%AE%97%E6%A6%82%E8%AE%BAC%E4%B8%93%E9%A2%98/"}]},{"title":"改作业时发现的常见问题 (21 fall)","slug":"改作业时发现的常见问题","date":"2021-11-11T02:11:09.000Z","updated":"2021-11-11T02:39:38.432Z","comments":true,"path":"2021/11/11/改作业时发现的常见问题/","link":"","permalink":"http://www.kinami.cc/2021/11/11/%E6%94%B9%E4%BD%9C%E4%B8%9A%E6%97%B6%E5%8F%91%E7%8E%B0%E7%9A%84%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/","excerpt":"Here's something encrypted, password is required to continue reading.","text":"","categories":[{"name":"计算概论C","slug":"计算概论C","permalink":"http://www.kinami.cc/categories/%E8%AE%A1%E7%AE%97%E6%A6%82%E8%AE%BAC/"},{"name":"计算概论C(21 fall)","slug":"计算概论C/计算概论C-21-fall","permalink":"http://www.kinami.cc/categories/%E8%AE%A1%E7%AE%97%E6%A6%82%E8%AE%BAC/%E8%AE%A1%E7%AE%97%E6%A6%82%E8%AE%BAC-21-fall/"}],"tags":[{"name":"计算概论C(21 fall)","slug":"计算概论C-21-fall","permalink":"http://www.kinami.cc/tags/%E8%AE%A1%E7%AE%97%E6%A6%82%E8%AE%BAC-21-fall/"},{"name":"计算概论C","slug":"计算概论C","permalink":"http://www.kinami.cc/tags/%E8%AE%A1%E7%AE%97%E6%A6%82%E8%AE%BAC/"}]},{"title":"《计算概论C》常见问题汇总","slug":"常见问题汇总","date":"2021-11-10T19:10:14.000Z","updated":"2021-11-11T04:26:18.073Z","comments":true,"path":"2021/11/11/常见问题汇总/","link":"","permalink":"http://www.kinami.cc/2021/11/11/%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98%E6%B1%87%E6%80%BB/","excerpt":"","text":"写在前面在当助教的几个学期里，发现很多同学都会问一些相似的问题，这些问题的原因和解决方法都是类似的，但是在答疑时可能就需要反复的讲很多遍，这是非常没有效率的一件事。为了解决这个问题，决定在此开一个常见问题汇总，将常见的一些问题记录下来，方便同学们查阅，减少相似问题的提问次数，提高效率。 同学们的常见问题大概可以分为以下四类： 编程环境上的问题，包括 VS Code 的使用，电脑上的 python 环境等 代码的语法错误，即由于写的语法不对造成的 syntax error 代码的运行时错误，即在代码运行过程中因为各种各样的 error 导致的程序 crash，没有正常退出 代码的逻辑错误，即纯粹由于逻辑写的有问题导致的得不到一个正确的结果 其中，第2类错误是应该同学们自己解决的，当你发现你的报错里面出现了syntax error（即语法错误）的字样时且你还不理解为什么的时候，你应该去看ppt和老师的示例，对比哪里出现了问题。 而第4类错误是一个纯粹的debug的过程，不太好作为常见问题来总结，之后可以找一些同学们的错误代码来写写一个debug过程的示例，也欢迎同学们投稿自己的错误代码。 综上，我们在这里主要总结第1类和第3类错误，其中又以第3类错误为重点，因为第1类错误往往在前两次上机课的时候就会现场解决掉，所以不作为重点。 关于第2类错误，我也会随缘更新点东西进去。 如果你觉得有什么应该在这里写一下而现在还没写的东西，也可以积极来找助教提建议，建议采纳后会在对应的条目前加一句“来自xx级x同学的提议”。 随缘更新中。 0. 一些基本的知识请务必学会查看错误提示一个语法错误的例子相信不少同学都遇到过类似下面这样的报错 1234 File &quot;...（这一长串是你的文件路径）\\（这里是你的文件名）.py&quot;, line 5 for i in range(1,a+1) ^SyntaxError: invalid syntax 请注意，这个错误提示中给出了足够多的用于定位错误的信息。 第1行，写出了产生错误的文件和行号，有的时候你会看到报错提示中有多个File ....，这与调用栈有关，但是你不需要理解调用栈这个奇怪的词组是什么意思，你只需要看最后一个File出现的地方，这个地方一般是你自己写的代码，你看文件名就知道是不是你自己写的了（如果不是，且你看不懂，且本文档中没有写，且你自己也查不到什么资料，在群里问就完事了）。在这一行的末尾，标了一个line 5，意思是这个错误发生在前面这个文件的第5行，非常直观。 第2行，写出了产生错误的代码，就是上述文件中第5行的那一句代码。 第3行，是一个箭头，这个箭头你可以理解为运行到这里的时候发现了错误，一般来说实际造成错误的代码就在标记的这个地方附近（附近的意思就是可能在上面可能在下面也可能就在这里），在本例中，产生错误的位置就是标记的地方，错误原因是少了一个冒号。 第4行，是错误类型及简单的说明。一般来说都是XxxxError:xxxxxxxx的形式，冒号前面是错误名，冒号后面是关于错误的简单说明。在本例中，SyntaxError就说明了这个错误是一个语法错误，冒号后面的那句话就是“错误的语法”，非常好理解。如果有不认识的词，可以先查一下。 在理想的情况下，我会在本文中更新一些常见的XxxError的说明，前期内容比较少的时候大家也可以积极提建议，我会优先更新出现频率比较高的错误。 又一个语法错误的例子请看如下代码： 123import matha = math.sqrt(sum(list(map(int, input().split())))print(&quot;test&quot;) 运行此代码，报错提示如下： 1234File &quot;xxx\\text.py&quot;, line 3 print(&quot;test&quot;) ^SyntaxError: invalid syntax 同样是一个语法错误，箭头位置指向了第三行的开头，但是第三行怎么看也不像有错误的样子，这时候应该怎么办？ 注意，实际错误的地方可能在箭头的前面，箭头只是代表到了这个位置时发现了错误，既然位置在第三行开头，那说明实际的错误可能在第二行结尾。仔细看第二行，你会发现少了一个括号（可以数一下），加上一个括号就OK了。 一个运行时错误的例子下面是某位同学作业中的代码片段： 12345for i in range(n): s = 0 for j in range(6): s += random.rand() average = s/6 运行这个片段，会得到如下报错： 1234Traceback (most recent call last): File &quot;...（这一长串是你的文件路径）\\（这里是你的文件名）.py&quot;, line 4, in &lt;module&gt; s +&#x3D; random.rand()AttributeError: module &#39;random&#39; has no attribute &#39;rand&#39; 可以发现，这样的错误和语法错误不太一样，例如第1行多了一个Traceback，顾名思义，就是你代码的历史轨迹（因为有的时候实际错误不是在你写的代码的那个地方发生的），这里可能会有若干个File ....，但是正如前面说的，你看最后一个就行。 第2行和之前看到的一样，只是最后出现了一个in &lt;module&gt;，这里指出了是在哪个模块中产生的错误，你大可不用管。 第3行写出了产生错误的那一行代码，也是一样的。然后你会发现这里没有了之前语法错误时的那个指示箭头，这是因为语法错误可以很容易的发现在哪一处出错，而运行时错误大多是你某一行的语句产生了错误，因此只写了这一行就够了。 第4行写出了错误类型，是AttributeError，后面给出了一句简短的描述。如果你不知道这是什么意思，那么你就可以先来看看这个文档（当然也可以直接上网搜） 请务必学会使用搜索引擎（以及学会查阅课件及课本）举个简单的例子，请看以下代码（可能有些同学对这个代码还挺眼熟的）： 12import randomprint(random.random(0, 1)) 运行以上代码，报错如下： 1234Traceback (most recent call last): File &quot;xxx\\text.py&quot;, line 2, in &lt;module&gt; print(random.random(1, 2))TypeError: random() takes no arguments (2 given) 注意第4行的提示，说random()这个方法不接受参数（argument就是我们讲函数时常说的那个参数，更准确的说，指的是实参），后面的括号里说(2 given)意思就是你给了它两个参数，当然，你确实给了它两个参数。 出现这样的问题，往往说明你这个方法用错了，用错的原因大概率是老师讲了PPT及课本写了但是你忘了。这种时候请查阅PPT、课本或者先自己搜索。当然最方便的是自己搜索，搜索教程如下： 首先打开必应搜索如下： 一般来说，如果你想查找某个函数或者模块的信息，可以直接输python3 xxxx，其中xxxx是你要查找的函数或者模块。在本例中，你是想知道random模块的random()方法怎么用，那么你可以搜索python3 random.random()，前面使用python3是因为可能会搜到一些python 2.x版本的资料，所以明确一下版本。搜索结果如下： 其中第一个链接是菜鸟教程，这个网站是一个还不错的中文python教程网站（我刚开始速成python的时候就是去翻了一下这个），基本上常见方法都有讲解以及实例，简洁明了。例如第一个链接点进去如下： 相信你一看就能看懂。 另外，可以看到搜索结果第二条有一个类似的，那里面是python2的教程，所以一定注意，搜索的时候显示的指明：我要搜python3! 请注意，推荐用搜索引擎并不是助教想偷懒，而是因为一般来说网上都会有非常详细的资料，正如这个例子中所示，有说明有实例，这比我给你说要来的详细很多，毕竟助教也不是行走的文档，我们在自己写代码的时候也时不时要去查一下某个东西怎么用。 另外，英文好的同学更推荐直接google用用英文搜，例如想搜turtle这个库怎么用，可以直接搜python turtle doc。结果如下： 基本马上就能搜到第一手的官方文档，图中第一个就是。有兴趣的同学可以去看看这个链接，里面详细介绍了turtle这个库里都有什么方法。 （我点进去看了一下发现也是有对应的中文文档的，在这个链接，可以看到讲的非常详细了） 如果你遇到了奇怪的错误如果你运行代码，但是在terminal里没有看到与上述报错提示类似的输出，请先尝试重启VS Code，仍然不行的话请在群里提问。 有一个比较常见的错误，当你发现你的terminal里显示了三个箭头&gt;&gt;&gt;时，如下： 这是因为你可能无意间启动了一个python解释器环境，在这个环境下你可以直接输入python代码并按回车，这里就会直接输出结果。此时你直接使用F5运行会报错，退出这个环境就好了，可以输入exit()加回车或者ctrl + z（按键盘）加回车来退出，可以自己试试。 1. 环境相关的错误2. 语法错误 syntax error3. 运行时的各种错误AttributeError继续用在第0部分使用过的这个示例代码： 12345for i in range(n): s = 0 for j in range(6): s += random.rand() average = s/6 运行这个片段，会得到如下报错： 1234Traceback (most recent call last): File &quot;...（这一长串是你的文件路径）\\（这里是你的文件名）.py&quot;, line 4, in &lt;module&gt; s +&#x3D; random.rand()AttributeError: module &#39;random&#39; has no attribute &#39;rand&#39; Arrtibute Error，即属性错误，简单理解就是这个库里没有这个东西，这个东西可能是一个常量，例如math.pi，可能是一个函数，例如random.random()，可能是一个成员变量（如果课程中学了class就知道在说什么了）。 那么到底是什么东西没有呢，请看后面的说明。后面这句话说了模块random中没有rand这个属性，但是你代码中写了random.rand()，这就是错误的原因。 如何改正：检查拼写错误，看看是不是拼错了，或者干脆就脑补出来一个名字写了上去。 4. 一些debug思路示例","categories":[{"name":"计算概论C","slug":"计算概论C","permalink":"http://www.kinami.cc/categories/%E8%AE%A1%E7%AE%97%E6%A6%82%E8%AE%BAC/"}],"tags":[{"name":"计算概论C","slug":"计算概论C","permalink":"http://www.kinami.cc/tags/%E8%AE%A1%E7%AE%97%E6%A6%82%E8%AE%BAC/"}]},{"title":"必读：如何看加密文章","slug":"如何看加密文章","date":"2021-11-10T18:38:36.000Z","updated":"2021-11-10T19:14:17.439Z","comments":true,"path":"2021/11/11/如何看加密文章/","link":"","permalink":"http://www.kinami.cc/2021/11/11/%E5%A6%82%E4%BD%95%E7%9C%8B%E5%8A%A0%E5%AF%86%E6%96%87%E7%AB%A0/","excerpt":"","text":"当你点开一片文章时，如果发现长下面这样： 注意，这并不是一篇没有内容的文章，只是内容被加密了。中间那个横线就是密码输入框，在此处输入密码并按回车键就可以解密查看了！（手机也是按虚拟键盘上的回车键） 如下：","categories":[{"name":"计算概论C","slug":"计算概论C","permalink":"http://www.kinami.cc/categories/%E8%AE%A1%E7%AE%97%E6%A6%82%E8%AE%BAC/"}],"tags":[{"name":"计算概论C","slug":"计算概论C","permalink":"http://www.kinami.cc/tags/%E8%AE%A1%E7%AE%97%E6%A6%82%E8%AE%BAC/"}]},{"title":"OJ上的注意事项汇总 (21 fall)","slug":"OJ上的注意事项汇总","date":"2021-11-10T17:38:38.000Z","updated":"2021-11-10T19:09:30.305Z","comments":true,"path":"2021/11/11/OJ上的注意事项汇总/","link":"","permalink":"http://www.kinami.cc/2021/11/11/OJ%E4%B8%8A%E7%9A%84%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9%E6%B1%87%E6%80%BB/","excerpt":"Here's something encrypted, password is required to continue reading.","text":"b1c8743748ae1f554aaae721c1205cc441f57087a8f982dede0aaaefeeadf341b7deec18777f3bb689e10fbb54111938a7d32a5ff85e36eea0e2ce5a775425afd9e0ba3be51a27ddb954a3072159c9d218994316e6e2c81ac986919257a8275f18c4248cc598e16064f9c0b56b324e7d3563e74015c7334fe351ba42945ed1bd9cf1397503d034a0b231ddf22da3377506ecc88e853b0310bd5fc83f0c0abda459f1ef95f54f7c7f3c505a022d5b3135e0fbca85e93ce1cffee444168a6765a444723a31ba103ea2e25666f8dd6f1e0eec7ed424ec6363d38d1bf1355d2506d85db248fee3c82b2183a823180409ef356bdea0f8935e3df5a156720fe69db65c161ff66a84a63ef4373b96396c8150d03b3f6e11bb0bf67eda358657020ab69541353be7a35c450559f5e45ec0c557f11fea913c1930546011d6d9335f19827bd1d542779da8d31900083d72f293ca95203e1273573dcb120e3ecb8dad3ef64fbc85d028c055c7d74045e0a19d34a80efcec0b456015cf6c06b9c1df126f833b3bae3bc1ca78968663b7850d6d3a1a423497398cc3ca5d97072f86f627b112810f4aba8a284881e30f769ff397580919f2872c6565f2d4a69170869b0af5246b9a6101b3d40337efb18501256ebe4d61e113f221ac0a7ff56807cd3e7145fb020fd6e22215cc3f04c2c5dcb7b3a2398431358e707af7502a6960dc4c917ad9e911e01926b8d58a5f80693f2fd4ebbeca0e32a0506a74eb89ba8df4c6a6c49085d13a8b784d18e0f5d54c44eff1bf3e6a62b1a2687daaee63cc7017676b902372cb1c8d602491a966ff794f2631c6a2c960b538c850c9f818a2f2cd3786b861d92be6ddbf91c5f8b07db994d83f4e4245261a1bfc6ed27e23a3e0987d56c116d48fa63c8419ad99559971f446182295d9c005ec0fca9f0be1c6798521af3b6c93a2831f6abce781f709d28345a4c574f711976a2c20c9cb1084cf118331452ce167832c5dfce38191e506087fe1e076c011b0a923a0136e0d6eed7ef61ffc2341f9b9d99d0b772746b27b2dcc1fbd6c9b06718e7f038023337ffb279c15c28ab7b90c7453e5102fb655bfd0dfaf393e2f037d4c3e3a5804ed848576a49519a1d71f1463b274da5a3746c85a5cb893179653e803578258806133643e2d9cb90043c4d1df33846f14d65401f5ae0d0e7c9a5001530fb8a80b2cf5832ea3de05faf08890db9325bff83e1861b79cd307167a182ce0401ec5e96fcb778b1febf529d8f009dd7e0967a0c14c729521e36a713abeb69f9c362b9b80620a4217be3ab357351f9e24dbbc680622d477808bd6535ec303b5bee1a0ab1a4141dc92794e0119fcbf94f8ebd37ae016880020ebd2cb238c559ea9a09f1d6a203a29e49724cedef43da759bc1b7cf09df1dca2c4888b8e0ed1fa95d6561f7635598ae9dad3521a5c9c038a9fa649d8ee51eab12320e7c781a3648a930c0d7278671a5eb74f0ef7bc21428d8dac54a2aee41ad02a62f5c657b709e5a88bedc95bdae919fc56739ffcb9ac8f1d51a212faab107a1022b329a0e29e7f89a1bde610e92a28a79f299c8815ff6ac389acd6dd6c3047f8b674503922500d51e3b865a578e3042096477e610e9fda448991e8b6a07dab5a9bc13efbf32a7ee0c39adc57c9e62a5134539423d588b0e6dceaea856fe5a63953e17fe81d2e0b933131c9477ced25991e36fea7818be794b6fe42136031d1da6893e6e90f0d5ab3836cb6695a3545b97f2fad9d8a68981bf9753db0b7bc37accacc46d9aa6f3df2eed55ef2f92aa7eabaa5a359e14531180bd94b51dadc8a83be42be09d29113d3b2073ac9a9d50ca09276d832aaad84681b0a5e94a6057e6e6f2805203609defaa567fe778911ac6b6ac71ce50e482cf9d05088ca3fc627ce6c1b9acd804805a36294d79029304153d55c1e519ffb43703bd73474538fa8dec19e8971beeb7395027a07b9b0997649d143d0f7ea6c2fc3fa7d6ca1354704b2d19f0882a6f5c7944a6270f11948926f2cd2a025a066c91602cb53d1d5d4ddd5e6332497499223c5de6802e24e733abaa3b4f324cf700a5d8fdb9f7d73c986e81035d9a11a2e887970b4706e679125f206d845f6b4769254164ac91ee17560903844c51231833df92e8e95d092cde2dcd6c3f57160495f747cd4502fc8c49b6307bb0ebbde566fbce5ba6478fb2c76652fbdc113a22b23409a4f7060ec150aa5bd2d019a04ad2f1a74439c686beb5ea292fb00e56abb87656c498794b45c124040b268fb74b7b63c4f2850d8e0bb53d93dd7646eef37cb4c144de0f8d3cb4c0dad05d8f9d34a8332a386455aeea854495ca50060842023cf7296a0bde4f4a07107140018f582a2b7d2160fd0e536f5f5d596c6b1ba24764fc71792caccf485699b1acd515b7e64d9e50d2db20ba224acb39b5c5fb49e92c585664b776c4ecb2c2fe758110fa4d86946b30181e5a578f177d8c26fc8d3c181327a8cbf9aaa12dd1a771484ec7e5cd16770d935ebe2c57df9fc9cb7269ed6187848839097f5923006c5cf926c45c8fb05d9ca877747b0b5b4a812921ce307896dc596513eec38bcfb02be070ce7706b1e166e88f874e391cb43d3ad9b89f3be3abade2e14f7a27f3c04e2dc570df4f7a0dafaa419c8cbb8b1641299dc98a44a613c1d80c6036893ed30684d51aefa3d71efa9c4f4508f1aa51a66f3e88e15ca0c3129184335a626408c33f7fbe7fb8194496f9d4caaf57b0815490fe2ec1dcac35748f066d84ee0c1ac5eff1534cbd3497013d454b73df34922e9adf751d2c46544f6920d86ff2b33284930ec839ea95bc2152658ec2012a3d4c99fabbdefc0242bc9902414fa32ac04243c4f5dbadb510e252c904533b2604eae1b5f58c05f5e7459a33de2b4d5b4e8c25c03dee921d2bd9930e19a437ca1ae009d2a09bceef21132840145de08fef1a931e2cc16fed91333398c6cdeb3bbc4058ebde8c36b03f2e61dd353e5d0e0b0889b220f615d312a94b03128b0408c92ca5f25ae2fca0230686c8d03abb1beece41e6a9325cf99548d1f1e756755fdc3efc8c785d0232b04714061e391ebb357ee3d8407a5c0a252906496e041f93b1b1adc15fe0e4a0b29ea2722baf2775f8c59dc5f463daaf3133cf75f8750dbfc64c331c5e043d67aeb20a369d73cc58b6d3cd73d6c2aa4ef2b7f9cc7d2f8c7df973b9953110790ab4ba06e4ca2030eb4e6cc5412b7a5a716dab891568c077e6bb56df979f2c694f1d0575b4e9b9048ea79272f6b70de114a8d7331308b040b598090d6f1fc6ba5276c95934e8017319149f5af28ad61bea0caa01fa8066a0ba797cf10ed71fd62c381b15c92508538eeb7c93fa9ae2d1f2a272efa0a4ce9ef80cd40980cd030510b086e32e8cb8e08e49b06b9589163ce1fa4f327edb7947aa8d732aecaebf6dde8dd871eb07539ad0c299982e42ae99f69bb1ecb5e7d44e3705f98fd079c3537edbc4fa15aafb88ee4dcf03430754f089aba9969edd89a6c2fc0a41032877569404e50abe3d5106434bef79fa6936aa999e0d1531050c7970a24b40439eb3a6e4455d177ff3376e5412838c4f6f42c4282c0168aacd746c67f8c8a2c2ae0aed2eb01f88d83e5007fae2c827bdbad493d134a51b11e7cb475359ffe5e2f579b7a0a1debebb063d6762b7fbd7a6ef08db0a7e94fcef61ad45c1b55fb4a5d804ffa95028325c583fd63f98f4ecbdbecf0a3fdc87b7861d888900ab3bd962843c7650c73ad53afd98eeefc5368edfd9c380a1e8c105eeba5d10b1fb5c4999c75c7e5a39c1349a8873303e9fe048f8d5e5ac2af533fad9ad773968d3262d9ee5b3ad69986a08bc2a4d387d603d708cead0774a2a8ca8f6c946b6ba9c97e8a1c511050fb092f792f5ee8e8a06e4a38fa8722cef0c2b131f9c063a11404dd1257a370c7f26de29e063ad77dd54a42cd56ca8fe941a82ff1aaf27dae10b7655efc75207185c6e7a504dfc1b9f1d8cf47a3510ceefeed213db0004569b7c0b9d83e21569569143089965189ba6f259b546aba5ae0aa347b1c988192b8ea47a4d1db02f57dc6a3a8858dc671a364b8a7119f2b2b7bcb3e1d452f72fef3ce2cd3bb3311c534808e2565e2ef318a4a0bc5dd75ac9bbd3e5342b69a46903589ad7ec4985c0adce0efb2b29fdbbe16387afd7dfb99b833e324db26af782ae3f64f07f65612356776035476a820a6adf483cbb4dc349b64816d484f97f1dfeeba6d952b2833a56dc135fa3b652b01f362f0f2ee0a6531c10333d7c3bc9c1a135ce169e9f274d5562182d3c0b31ac6590578e3598cd5d459f4ca7fcbf60f524f4df43910f244278000874fb0e2314de18f81429934a211395a113e8c8496c8acaf1e915619a56d73b9036aba342abe82fc3a9207f0b06f3f91af527f09c1c8cd0b27c4599d6eb73e84b22767dd47b7a5fb6f154d20b8ef2da9d61e0e6573524d3167082a51a1c0564c81edaa40e2c7d090b15ab8271d39578c5580c071708b9bba5a01a4deab2f5d65ff3d0463a23392a413ba6223f04d78c1a0a7767b0424b2feba548b4a1843030659020bf85433ca02b06bdcc9a982848e639f96b134753312f77b0e2ebd3d2e39245e1f819d60ce24f78db1a9397d9fb387492955f029af0519f531c1b001ee240d0bbb3fc796fcf3c92f7176867b6885b522af39b6fa8a905bf7d82109107b21ae4f9fc2b00dea7d6d49253caf56d32f7ecdaafb6d976db0d34b0d28d96d2a46f1f4ceba065cd5850e7687454bcedbd3ff7d20ad190f7f1af0b2ff0108ace64f27a100d2c71778f814a55506b0ed476ca54d6be661ffc23c4645babbce618462e2a9160fd37e1c57687d489a8b9ec2960b92da848e2e9117c24aae2225215e801c8f6f41f2cafdd6a5b72061a2171ac9a9776d3c3e7748f5bff2253d030e1f28b132abac1682c6d8d544b6b11957f67a9bdd705c593e6df7ae808a9db60f6147cba1968167b1e0bb85b05e772e430b837f2f9d37da42e59d75a1368ce38e93e8f6954d6b6dd15ddd31a328943691b4d9bb96557dfa2dba6146086bc63bfd97adba447c63ba643635e2964e3058e96923c36686ccc4db2493fed6","categories":[{"name":"计算概论C","slug":"计算概论C","permalink":"http://www.kinami.cc/categories/%E8%AE%A1%E7%AE%97%E6%A6%82%E8%AE%BAC/"},{"name":"计算概论C(21 fall)","slug":"计算概论C/计算概论C-21-fall","permalink":"http://www.kinami.cc/categories/%E8%AE%A1%E7%AE%97%E6%A6%82%E8%AE%BAC/%E8%AE%A1%E7%AE%97%E6%A6%82%E8%AE%BAC-21-fall/"}],"tags":[{"name":"计算概论C(21 fall)","slug":"计算概论C-21-fall","permalink":"http://www.kinami.cc/tags/%E8%AE%A1%E7%AE%97%E6%A6%82%E8%AE%BAC-21-fall/"},{"name":"计算概论C","slug":"计算概论C","permalink":"http://www.kinami.cc/tags/%E8%AE%A1%E7%AE%97%E6%A6%82%E8%AE%BAC/"}]},{"title":"《计算概论C》上机作业要求 (21 fall)","slug":"《计算概论C》上机作业要求-2021-11-11","date":"2021-11-10T17:31:01.000Z","updated":"2021-11-10T19:09:52.542Z","comments":true,"path":"2021/11/11/《计算概论C》上机作业要求-2021-11-11/","link":"","permalink":"http://www.kinami.cc/2021/11/11/%E3%80%8A%E8%AE%A1%E7%AE%97%E6%A6%82%E8%AE%BAC%E3%80%8B%E4%B8%8A%E6%9C%BA%E4%BD%9C%E4%B8%9A%E8%A6%81%E6%B1%82-2021-11-11/","excerpt":"Here's something encrypted, password is required to continue reading.","text":"","categories":[{"name":"计算概论C","slug":"计算概论C","permalink":"http://www.kinami.cc/categories/%E8%AE%A1%E7%AE%97%E6%A6%82%E8%AE%BAC/"},{"name":"计算概论C(21 fall)","slug":"计算概论C/计算概论C-21-fall","permalink":"http://www.kinami.cc/categories/%E8%AE%A1%E7%AE%97%E6%A6%82%E8%AE%BAC/%E8%AE%A1%E7%AE%97%E6%A6%82%E8%AE%BAC-21-fall/"}],"tags":[{"name":"计算概论C(21 fall)","slug":"计算概论C-21-fall","permalink":"http://www.kinami.cc/tags/%E8%AE%A1%E7%AE%97%E6%A6%82%E8%AE%BAC-21-fall/"},{"name":"计算概论C","slug":"计算概论C","permalink":"http://www.kinami.cc/tags/%E8%AE%A1%E7%AE%97%E6%A6%82%E8%AE%BAC/"}]},{"title":"《操作系统》xv6阅读报告之进程模型","slug":"《操作系统》xv6阅读报告之进程模型","date":"2021-04-15T08:21:50.000Z","updated":"2021-04-15T15:02:55.396Z","comments":true,"path":"2021/04/15/《操作系统》xv6阅读报告之进程模型/","link":"","permalink":"http://www.kinami.cc/2021/04/15/%E3%80%8A%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E3%80%8Bxv6%E9%98%85%E8%AF%BB%E6%8A%A5%E5%91%8A%E4%B9%8B%E8%BF%9B%E7%A8%8B%E6%A8%A1%E5%9E%8B/","excerpt":"","text":"概述本次XV6源码阅读主要关注XV6中的进程模型的实现，包括XV6中的PCB（进程控制块）结构、进程常用方法的实现、系统对进程的调度等。与该功能实现有关的主要代码文件以及该文件的主要内容如下表格所示。 文件名 主要功能 proc.h 主要声明了三个struct:cpu,context,proc，分别是内核中的CPU、上下文以及我们重点关注的PCB信息，除此之外还定义了一个枚举型，定义了xv6中进程的可能状态 proc.c 声明了进程表的数据结构ptable以及与进程有关的核心函数，在本次报告中会对这些函数详细解读 vm.c 实现了一些与虚拟内存有关的函数，其中与进程有关的部分包括为内核和用户分配内存，切换到当前进程页面的switchuvm()，切换到内核页面的switchkvm()，以及用于拷贝父进程空间到子进程空间的copyuvm()等 swtch.S 用汇编实现的一个用于切换上下文的函数 kalloc.c 主要实现了用于分配和释放物理内存的kalloc()以及kfree() 除此之外，还有定义了一些数据结构的其他头文件，这里不特别列出，在用到的时候会说明。在本次报告中，我们主要关注进程相关的内容，即proc.h和proc.c这两个文件中的内容。 核心代码解读proc.h在proc.h中，定义了以下数据： struct cpu：这是CPU在呢何种的表示，在这个结构体中，会有一个指向struct proc的指针，用于表示当前正在执行的进程。此外还声明了一个cpus数组，用于支持多核处理器。 struct context，表示上下文信息的一个结构体，如下所示： 1234567struct context &#123; uint edi; uint esi; uint ebx; uint ebp; uint eip;&#125;; struct proc，这是XV6中的进程控制块（PCB），如下所示： 12345678910111213141516struct proc &#123; uint sz; pde_t* pgdir; char *kstack; enum procstate state; volatile int pid; struct proc *parent; struct trapframe *tf; struct context *context; void *chan; int killed; struct file *ofile[NOFILE]; struct inode *cwd; char name[16];&#125;; 其中各个数据项的详细意义如下： 数据 功能 uint sz 进程内存空间的大小，单位为byte pde_t* pgdir 指向进程的page table char *kstack 指向内核栈的底部 enum procstate state 表示内核当前的状态，其中enum procstate是一个枚举结构，该枚举结构的定义为 enum procstate &#123; UNUSED, EMBRYO, SLEEPING, RUNNABLE, RUNNING, ZOMBIE &#125;;除了未使用（UNUSED）状态之外，进程共有五种状态。 volatile int pid 进程的id struct proc *parent 指向父进程结构 struct trapframe *tf 指向一个中断帧（trapframe），这个结构体定义在x86.h这个文件中。当进程中断时，这个变量指向进程对应的中断帧。 struct context *context 切换进程时需要保存的上下文信息，其中context结构体已经在之前介绍过。 void *chan 这是一个与睡眠&amp;唤醒有关的数据，如果chan不为空，说明当前进程在chan上休眠，其中chan指的是一个等待队列（wait channel），在xv6中通过调用sleep(chan)来让进程在一个chan上休眠，用wakeup(chan)唤醒一个chan上的进程。 int killed 当killed不为0时，说明这个进程被杀死 struct file *ofile[NOFILE] 打开的文件，其中struct file是一个与文件有关的结构，这里暂且不详细说明。 struct inode *cwd 当前工作目录 char name[16] 进程的名称，debug用 proc.c 在proc.c中，首先定义了一个重要的数据结构ptable，在xv6中，所有的进程信息都储存在这个结构中，这个结构体如下所示： 1234struct &#123; struct spinlock lock; struct proc proc[NPROC];&#125; ptable; 其中spinloc lock是一个互斥锁。NPROC为xv6中进程数量的上限，定义在param.h中，在xv6，进程的上限数为64。 allocproc()函数，该函数的主要功能为在ptable中寻找一个空位，如果找到空位，则创建一个新的进程，并返回指向该进程的一个指针。 该函数的声明为static struct proc* allocproc(void)。 首先，函数遍历ptable中的proc数组，如果找到了一个空位置，则继续之后的工作，如果遍历全部之后还没有找到则直接返回0（NULL指针），代码如下所示。其中涉及到了acquire()和release()这两个与锁有关的函数，不是我们这一节的重点，暂时忽略。 1234567891011121314static struct proc*allocproc(void)&#123; /* part 1 */ struct proc *p; char *sp; acquire(&amp;ptable.lock); for(p = ptable.proc; p &lt; &amp;ptable.proc[NPROC]; p++) if(p-&gt;state == UNUSED) goto found; release(&amp;ptable.lock); return 0;&#125; 在运行goto found之后，p即为一个状态为UNUSED的proc位置，将这个进程设置为EMBRYO状态，并且分配一个pid。其中pid由全局变量nextpid来分配，每分配一个新的pid，nextpid进行一次自增操作。该部分代码如下。 123456789static struct proc*allocproc(void)&#123; /* part 2 */found: p-&gt;state = EMBRYO; p-&gt;pid = nextpid++; release(&amp;ptable.lock);&#125; 之后，需要为内核栈分配空间，需要调用定义在kalloc.c中的kalloc()函数，如果分配失败，该进程并不能顺利创建，则将进程的状态重新设置为UNUSED并返回空指针。代码如下。 123456789static struct proc*allocproc(void)&#123; /* part 3 */ if((p-&gt;kstack = kalloc()) == 0)&#123; p-&gt;state = UNUSED; return 0; &#125;&#125; 之后，要对内核栈的其他部分进行建立，最终结构如下图所示（代码略） 在allocproc()中的最后一步为p-&gt;context-&gt;eip = (uint)forkret，使得新进程首先运行在forkret这个函数中，该函数中判断了是否为第一个创建的线程，之后就没有做别的事情，直接返回，返回后会进入trapret函数，trapret为从中断中返回的函数，该函数定义在trapasm.S中，用于恢复用户寄存器，恢复后使用iret从中断中返回。 userinit()函数，用于创建第一个进程。在xv6中，main()函数初始化了一些设备和子系统后，会调用该函数创建第一个进程。在该函数中，首先调用allocproc()在分配一个进程并进行初始化，之后调用setupkvm()创建一个映射内核区的页表，这个函数设计虚拟内存相关知识，这里不详细说明。最终得到如下结构： 之后，userinit()函数将trapframe设为初始的用户模式状态，该部分代码如下： 1234567p-&gt;tf-&gt;cs = (SEG_UCODE &lt;&lt; 3) | DPL_USER; p-&gt;tf-&gt;ds = (SEG_UDATA &lt;&lt; 3) | DPL_USER; p-&gt;tf-&gt;es = p-&gt;tf-&gt;ds; p-&gt;tf-&gt;ss = p-&gt;tf-&gt;ds; p-&gt;tf-&gt;eflags = FL_IF; p-&gt;tf-&gt;esp = PGSIZE; p-&gt;tf-&gt;eip = 0; // beginning of initcode.S 这里我们主要关注最后一行代码，将trapframe的eip设为了0，这是初始化代码initcode.S的入口 最后，设置进程状态为RUNNABLE，正式开始工作。 fork()函数。除了第一个进程之外，其他的进程都是由父进程调用fork()创建的，实现过程如下。 首先，分配一个进程。 123// Allocate process.if ((np = allocproc()) == 0) return -1; 之后复制父进程的地址空间，如果失败（返回值不为0）则回收进程空间并返回一个错误。 1234567891011if ((np-&gt;pgdir = copyuvm(proc-&gt;pgdir, proc-&gt;sz)) == 0) &#123; kfree(np-&gt;kstack); np-&gt;kstack = 0; np-&gt;state = UNUSED; return -1; &#125;// 如果成功，则复制以下信息np-&gt;sz = proc-&gt;sz;np-&gt;parent = proc;*np-&gt;tf = *proc-&gt;tf; 之后，设置np-&gt;tf-&gt;eax = 0，当子进程从中断返回时，会返回0。 然后子进程继承父进程打开的文件、当前工作目录以及父进程的名字。 12345678for (i = 0; i &lt; NOFILE; i++) if (proc-&gt;ofile[i]) np-&gt;ofile[i] = filedup(proc-&gt;ofile[i]);np-&gt;cwd = idup(proc-&gt;cwd); pid = np-&gt;pid;np-&gt;state = RUNNABLE;safestrcpy(np-&gt;name, proc-&gt;name, sizeof(proc-&gt;name)); 最后，在父进程中返回pid，其中pid由pid = np-&gt;pid得到，是子进程的pid。 exit()函数，退出当前进程，退出的进程会变为ZOMBIE状态直到它的父进程调用wait()来发现它已经退出。实现过程如下。 首先关闭所有的文件，之后调用wakeup1()来唤醒父进程（这里会先加锁所以父进程并不会马上唤醒）。如果当前进程有子进程，则需要设置子进程的父进程变为initproc。最后，将当前进程的状态设置为ZOMBIE。 wait()函数，等待一个子进程退出，返回子进程的pid，如果没有子进程则返回-1。实现流程如下。（代码略） 遍历ptable中的proc数组，查找是否有子进程，如果有子进程则会将一个havekids标记为1，如果循环了一遍后havekids还是0，则直接返回-1。如果有子进程但是子进程未退出，则会调用sleep()来等待子进程唤醒。在发现处于ZOMBIE状态的子进程之后会释放子进程空间的使用，将这个进程块的状态设置为UNUSED，最后返回子进程的pid。 scheduler()函数，该函数会被每个CPU都调用，该函数会遍历进程表，找到一个状态为RUNNABLE的进程来执行，如果没找到则会把当前CPU的proc（表示当前CPU正在执行的进程）设为空指针。其核心代码如下 1234567891011for (p = ptable.proc; p &lt; &amp;ptable.proc[NPROC]; p++)&#123; if (p-&gt;state != RUNNABLE) continue; proc = p; switchuvm(p); p-&gt;state = RUNNING; swtch(&amp;cpu-&gt;scheduler, proc-&gt;context); switchkvm(); proc = 0;&#125; 当找到一个处于RUNNABLE状态的进程后，会调用三个重要的函数switchuvm(),swtch()以及switchkvm()。其中switchuvm()会根据proc结构中的pgdir来找到当前进程需要使用的页表，并进行切换。swtch是一个使用汇编编写的函数，在swtch.S中编写，用于保存当前进程的上下文，然后返回到要切换的进程的上下文（cpu-&gt;scheduler）中。switchkvm()用于切换到内核页表。 在xv6中的实现里，这个调度函数采用了最简单的实现方法：直接遍历进程数组寻找，在真实的操作系统中往往会采用更复杂的调度算法来获得更好的体验。 总结及收获略","categories":[{"name":"课程作业","slug":"课程作业","permalink":"http://www.kinami.cc/categories/%E8%AF%BE%E7%A8%8B%E4%BD%9C%E4%B8%9A/"},{"name":"操作系统","slug":"课程作业/操作系统","permalink":"http://www.kinami.cc/categories/%E8%AF%BE%E7%A8%8B%E4%BD%9C%E4%B8%9A/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"}],"tags":[{"name":"操作系统","slug":"操作系统","permalink":"http://www.kinami.cc/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"},{"name":"作业","slug":"作业","permalink":"http://www.kinami.cc/tags/%E4%BD%9C%E4%B8%9A/"}]},{"title":"《操作系统》xv6阅读报告之进程调度","slug":"《操作系统》xv6阅读报告之进程调度","date":"2021-04-13T17:08:05.000Z","updated":"2021-04-13T17:11:11.619Z","comments":true,"path":"2021/04/14/《操作系统》xv6阅读报告之进程调度/","link":"","permalink":"http://www.kinami.cc/2021/04/14/%E3%80%8A%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E3%80%8Bxv6%E9%98%85%E8%AF%BB%E6%8A%A5%E5%91%8A%E4%B9%8B%E8%BF%9B%E7%A8%8B%E8%B0%83%E5%BA%A6/","excerpt":"","text":"概述本次XV6源码阅读，主要是在上次阅读进程模型的基础上，进一步研究xv6中在进程调度方面的细节。主要需要阅读的代码文件和上次类似，有以下这些：| 文件名 | 主要功能 || ———- | ———————————————————— || proc.h | 主要声明了三个struct:cpu,context,proc，分别是内核中的CPU、上下文以及我们重点关注的PCB信息，除此之外还定义了一个枚举型，定义了xv6中进程的可能状态 || proc.c | 声明了进程表的数据结构ptable以及与进程有关的核心函数，在本次报告中会对这些函数详细解读 || vm.c | 实现了一些与虚拟内存有关的函数，其中与进程有关的部分包括为内核和用户分配内存，切换到当前进程页面的switchuvm()，切换到内核页面的switchkvm()，以及用于拷贝父进程空间到子进程空间的copyuvm()等 || swtch.S | 用汇编实现的一个用于切换上下文的函数 || kalloc.c | 主要实现了用于分配和释放物理内存的kalloc()以及kfree() |除此之外，还有定义了一些数据结构的其他头文件，这里不特别列出，在用到的时候会说明。在本次报告中，我们主要关注进程相关的内容，即proc.h和proc.c这两个文件中的内容。 核心代码解读proc.h该部分说明直接复用上次阅读报告，因为定义的结构体之后要用到。在proc.h中，定义了以下数据： struct cpu：这是CPU在呢何种的表示，在这个结构体中，会有一个指向struct proc的指针，用于表示当前正在执行的进程。此外还声明了一个cpus数组，用于支持多核处理器。 struct context，表示上下文信息的一个结构体，如下所示： 1234567struct context &#123; uint edi; uint esi; uint ebx; uint ebp; uint eip;&#125;; struct proc，这是XV6中的进程控制块（PCB），如下所示： 12345678910111213141516struct proc &#123; uint sz; pde_t* pgdir; char *kstack; enum procstate state; volatile int pid; struct proc *parent; struct trapframe *tf; struct context *context; void *chan; int killed; struct file *ofile[NOFILE]; struct inode *cwd; char name[16];&#125;; 其中各个数据项的详细意义如下： 数据 功能 uint sz 进程内存空间的大小，单位为byte pde_t* pgdir 指向进程的page table char *kstack 指向内核栈的底部 enum procstate state 表示内核当前的状态，其中enum procstate是一个枚举结构，该枚举结构的定义为 enum procstate &#123; UNUSED, EMBRYO, SLEEPING, RUNNABLE, RUNNING, ZOMBIE &#125;;除了未使用（UNUSED）状态之外，进程共有五种状态。 volatile int pid 进程的id struct proc *parent 指向父进程结构 struct trapframe *tf 指向一个中断帧（trapframe），这个结构体定义在x86.h这个文件中。当进程中断时，这个变量指向进程对应的中断帧。 struct context *context 切换进程时需要保存的上下文信息，其中context结构体已经在之前介绍过。 void *chan 这是一个与睡眠&amp;唤醒有关的数据，如果chan不为空，说明当前进程在chan上休眠，其中chan指的是一个等待队列（wait channel），在xv6中通过调用sleep(chan)来让进程在一个chan上休眠，用wakeup(chan)唤醒一个chan上的进程。 int killed 当killed不为0时，说明这个进程被杀死 struct file *ofile[NOFILE] 打开的文件，其中struct file是一个与文件有关的结构，这里暂且不详细说明。 struct inode *cwd 当前工作目录 char name[16] 进程的名称，debug用 proc.c scheduler()函数 在proc.c中，实现了一个跟进程调度有关的函数scheduler()，该函数不接受参数也没有返回值，作用为遍历进程表，找到一个状态为RUNNABLE的进程来执行。代码如下： 1234567891011for (p = ptable.proc; p &lt; &amp;ptable.proc[NPROC]; p++) &#123; if (p-&gt;state != RUNNABLE) continue; proc = p; switchuvm(p); p-&gt;state = RUNNING; swtch(&amp;cpu-&gt;scheduler, proc-&gt;context); switchkvm(); proc = 0; &#125; 其中ptable.proc是一个储存着所有proc结构体的数组，该函数从数组的第一个元素开始进行遍历（在实际的工作中其实是从前一次切换的位置开始遍历，这个我们之后说明），当找到一个状态为RUNNABLE的进程之后，会调用三个重要的函数switchuvm(),swtch()以及switchkvm()。其中switchuvm()会根据proc结构中的pgdir来找到当前进程需要使用的页表，并进行切换。swtch是一个使用汇编编写的函数，在swtch.S中编写，用于保存当前进程的上下文，然后返回到要切换的进程的上下文（cpu-&gt;scheduler）中。switchkvm()用于切换到内核页表。由代码可见，在xv6的实现里，这个调度函数采用了最简单的实现方法：通过遍历储存着所有进程proc结构的数组来寻找下一个可以开始工作的进程。 在上次报告中，对该部分的解读到此为止，这次我们继续探寻一些细节。 yield()函数 yield()函数代码如下： 1234567void yield(void)&#123; acquire(&amp;ptable.lock); //DOC: yieldlock proc-&gt;state = RUNNABLE; sched(); release(&amp;ptable.lock);&#125; 可见其中的逻辑很简单，主要就是将当前进程的状态设置为RUNNABLE，然后再调用sched()函数 sched()函数 12345678910111213141516void sched(void)&#123; int intena; if (!holding(&amp;ptable.lock)) panic(&quot;sched ptable.lock&quot;); if (cpu-&gt;ncli != 1) panic(&quot;sched locks&quot;); if (proc-&gt;state == RUNNING) panic(&quot;sched running&quot;); if (readeflags() &amp; FL_IF) panic(&quot;sched interruptible&quot;); intena = cpu-&gt;intena; swtch(&amp;proc-&gt;context, cpu-&gt;scheduler); cpu-&gt;intena = intena;&#125; 在该函数中，最重要的一句为swtch(&amp;proc-&gt;context, cpu-&gt;scheduler);即进行上下文切换的语句，关于这里的工作逻辑，在我们分析完下面的代码后进行说明。 swtch.S在这个汇编文件中，实现了一个由汇编写的函数swtch，它是在进程调度时用于保存上下文的核心内容，代码如下 swtch()函数 123456789101112131415161718192021.globl swtchswtch: movl 4(%esp), %eax movl 8(%esp), %edx # Save old callee-save registers pushl %ebp pushl %ebx pushl %esi pushl %edi # Switch stacks movl %esp, (%eax) movl %edx, %esp # Load new callee-save registers popl %edi popl %esi popl %ebx popl %ebp ret 代码的注释中指出，swtch函数接受两个参数:void swtch(struct context **old, struct context *new);，注意两个参数的类型不一样，前一个参数是一个指向context结构指针的指针。 首先3,4两行代码取出了传给swtch的两个参数，其中%eax为old，%edx为new。 7,8,9,10四行则按顺序保存四个寄存器，在保存之前，%esp中存储的内容为返回地址，之后按顺序压入ebp,ebx,esi,edi。操作完成后栈中结构如下： 1234567地址高位 返回地址 ebp ebx esi edi # 现在的栈顶地址地位 可以发现这个结构对应的正是一个context结构，所以此时的%esp可以看作是一个指向一个context结构的指针。之后第13行，将这个指针保存在第一个参数指向的地方（第一个参数是一个指向context指针的指针），这里的实现相对我们做过的Nachos来说不太一样，所以后面会给出整理后的具体调度流程。 之后，第14行将用第二个参数替换栈顶，然后在17-20行恢复寄存器数据，此时的返回地址是要切换到的线程的返回地址，返回后另一个线程直接开始工作。 调度逻辑总结由于xv6是一个支持多核心的操作系统，在xv6中，每个核心都会有自己的一套上下文以及调度器。在上一部分的代码实现中可以看到，swtch函数的一个参数为cpu-&gt;scheduler。这是struct cpu中的一个成员变量，类型为context *，事实上，它指向的是调度器的上下文。 在xv6工作时，每个CPU会启动一个调度器，在main()函数中调用，调度器的完整代码如下所示： scheduler()完整代码 123456789void scheduler(void)&#123; struct proc *p; for (;;) &#123; // 这里是我们之前解读过的核心代码 &#125;&#125; 可见，这个调度器是不会返回的，一直在循环。代码在调度器中运行时，其实是main()函数的上下文，可以认为是主进程的上下文中（之后称为调度器上下文），然后从这里切换到其他的进程。所以在scheduler()中调用swtch函数时第一个参数为&amp;cpu-&gt;scheduler，将当前调度器进程的上下文保存在cpu-&gt;scheduler中，然后切换到目标进程的上下文中。 在当前工作的进程yield()时调用了sched()函数，而在这个函数中，我们可以看到调用swtch的函数为swtch(&amp;proc-&gt;context, cpu-&gt;scheduler);实际上当一个进程yield()之后，是先回到调度器进程中，之后再由调度器进程负责找到下一个进程再切换一次，实际上是两次切换，切换到目标进程的工作是由调度器进程完成的。 总结及收获懂得都懂","categories":[{"name":"课程作业","slug":"课程作业","permalink":"http://www.kinami.cc/categories/%E8%AF%BE%E7%A8%8B%E4%BD%9C%E4%B8%9A/"},{"name":"操作系统","slug":"课程作业/操作系统","permalink":"http://www.kinami.cc/categories/%E8%AF%BE%E7%A8%8B%E4%BD%9C%E4%B8%9A/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"}],"tags":[{"name":"操作系统","slug":"操作系统","permalink":"http://www.kinami.cc/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"},{"name":"作业","slug":"作业","permalink":"http://www.kinami.cc/tags/%E4%BD%9C%E4%B8%9A/"}]},{"title":"《计算机网络概论》lab 4 TCP客户端","slug":"《计算机网络概论》lab-4-TCP客户端","date":"2021-04-13T16:49:56.000Z","updated":"2021-04-13T17:10:06.411Z","comments":true,"path":"2021/04/14/《计算机网络概论》lab-4-TCP客户端/","link":"","permalink":"http://www.kinami.cc/2021/04/14/%E3%80%8A%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E6%A6%82%E8%AE%BA%E3%80%8Blab-4-TCP%E5%AE%A2%E6%88%B7%E7%AB%AF/","excerpt":"","text":"实验流程实验要求该次实验主要包含以下四部分 设计TCB结构 处理TCP协议的包的接收（实现stud_tcp_input()函数） 封装TCP包（实现stud_tcp_output()函数） 实现Socket的几个接口函数 需要注意的是，本次实验中只实现了一个客户端角色的TCP协议并使用等停模式。因此客户端的状态可以做以下简化，如实验指导书上所示 然而这里的图画的又跟后面实验指导书上说的有自相矛盾的地方，具体的要求当然是自己去试试怎么样才对（？） 所以本次实验的核心在于定义这些状态并实现这里的状态转换。 实验思路本次实验中，我们首先要定义一个TCP结构如下，我们并不考虑选项部分，所以可以认为urgentPointer之后都是数据段，我们只要原封不动的处理即可。 需要注意的是，在本次实验中，TCP结构统一用网络序表示 123456789101112131415struct TCP&#123; uint16_t srcPort; uint16_t dstPort; uint32_t seqNum; uint32_t ackNum; uint8_t headLen; uint8_t flags; uint16_t windowSize; uint16_t checkSum; uint16_t urgentPointer; char data[2000]; void debugPrint()&#123; /* debug用，这里略 */ &#125;&#125;; 然后，我们设计的TCB结构如下。在本次实验中，我们TCB中的数据以本地序表示。 12345678910111213struct TCB&#123; int sockfd; // 套接字描述符 uint32_t srcAddr; // 源地址 uint16_t srcPort; // 源端口 uint32_t dstAddr; // 目的地址 uint16_t dstPort; // 目的端口 uint32_t seq; // seq uint32_t ack; // ack unsigned int ackExpect; // 应该收到的ack TCPStatus status; // 当前状态 char *data; // 数据段&#125;; 其中TCPStatus是一个枚举类，用于表示各种状态，如下，与实验指导书上给出的状态示例相同。 123456789enum TCPStatus&#123; CLOSED, SYN_SENT, ESTABLISHED, FIN_WAIT1, FIN_WAIT2, TIME_WAIT&#125;; 作为客户端，需要处理当前连接的状态，我们可以在客户端的本地使用一个全局变量来存储状态，如下： 1TCB *currentTCB; 该变量记录了当前的连接信息，每次操作时会查找这里的状态。 另外，由于客户端可能会发起多个连接，拥有多个套接字连接符，因此我们还需要一个机构存储多个连接信息，本次实验中我们使用std::vector来完成，如下： 1vector&lt;TCB *&gt; TCBTable; 另外，在实现各个函数时一定要非常注意字节序的问题。 实验细节实现用于计算check sum的工具函数该函数主要用于计算checkSum，在本次实验中，我们采用所有数据均为网络序的方法来计算checkSum，在实现时要注意。 首先，给出函数定义如下： 1234unsigned int getCheckSum(char *pBuffer, unsigned short len, unsigned int srcAddr, unsigned int dstAddr); 其中pBuffer传来的是一个网络序的tcp包，len是这个包的总长度（包括头部），srcAddr和dstAddr是本地序的源地址和目标地址，用于计算伪头信息。 计算伪头部分 这里需要注意的是，由于srcAddr，dstAddr，len都是本地序，因此这里要做一次转换 12345678// 伪头部分unsigned int srcAddr_n = htonl(srcAddr);unsigned int dstAddr_n = htonl(dstAddr);unsigned short len_n = htons(len);checkSum += (srcAddr_n &gt;&gt; 16) + (srcAddr_n &amp; 0xFFFF); // 源地址checkSum += (dstAddr_n &gt;&gt; 16) + (dstAddr_n &amp; 0xFFFF); // 目标地址checkSum += (TCP_PROTOCOL_NUM &lt;&lt; 8); // TCP协议号checkSum += len_n; 计算TCP部分如下，由于pBuffer是一整个结构，而且本身就是网络序，因此我们可以直接转成一个16位整数的数组来操作，会很方便。需要注意跳过原来结构中的checkSum部分，该部分对应第8个16位整数。当TCP的数据部分是奇数字节时，我们需要在末尾补一个全0字节，因此需要特判奇数，代码如下： 12345678910uint16_t *TCPBuffer = (uint16_t *)pBuffer;for (int i = 0; i &lt; len / 2; i++)&#123; if (i == 8) continue; checkSum += TCPBuffer[i]; &#125; // 注意长度的奇偶，要特判奇数 if (len % 2) checkSum += ((uint16_t)(pBuffer[len_h]) &lt;&lt; 8); 最后，我们需要处理高位，将高16位加到低16位上 123// 清除高位while (checkSum &gt;&gt; 16) checkSum = (checkSum &amp; 0xffff) + (checkSum &gt;&gt; 16); 最后的结果应该是现在计算出的值的取反，返回即可 1return (~checkSum) &amp; 0xffff; 实现stud_tcp_input注意！！！！系统调用该函数的时候传进来的地址是网络序！（但是调用系统提供的一些接口函数时却需要传本地序，果然很奇怪啊）。 首先，将传入的pBuffer转换成一个TCP指针，便于之后操作 1TCP *tcp = (TCP *)pBuffer; 首先，检查checksum 这里调用我们刚才的那个函数即可 然而，实际上并不会有这个东西出错的时候，而且实验指导书上也没说出错时应该怎么处理，所以这个不写也没问题（在该系统上） 1234567if (getCheckSum(pBuffer, len, ntohl(srcAddr), ntohl(dstAddr)) != ((TCP *)pBuffer)-&gt;checkSum)&#123; // 省略了一些debug显示 // 实验指导书上没定义这个错误？ // tcp_DiscardPkt(pBuffer, checksum_error); return -1;&#125; 然后，检查ack 12345678&#x2F;&#x2F; 检查ackuint32_t ackNum &#x3D; ntohl(tcp-&gt;ackNum);uint32_t seqNum &#x3D; ntohl(tcp-&gt;seqNum);if (ackNum !&#x3D; currentTCB-&gt;ackExpect)&#123; tcp_DiscardPkt(pBuffer, STUD_TCP_TEST_SEQNO_ERROR); return -1;&#125; 之后，是最核心的状态转化的一步，如下： 当前状态为SYN_SENT，接收到的flag为PACKET_TYPE_SYN_ACK，状态转换到ESTABLISHED 123456789101112if (currentTCB-&gt;status == SYN_SENT &amp;&amp; tcp-&gt;flags == PACKET_TYPE_SYN_ACK)&#123; currentTCB-&gt;status = ESTABLISHED; currentTCB-&gt;seq = ackNum; currentTCB-&gt;ack = seqNum + 1; stud_tcp_output(NULL, 0, PACKET_TYPE_ACK, currentTCB-&gt;srcPort, currentTCB-&gt;dstPort, currentTCB-&gt;srcAddr, currentTCB-&gt;dstAddr); return 0;&#125; 当前状态为ESTABLISHED，继续进行通信 1234567891011if (currentTCB-&gt;status == ESTABLISHED)&#123; currentTCB-&gt;seq = ackNum; currentTCB-&gt;ack = seqNum + (len - TCP_HEADER_LENGTH); stud_tcp_output(NULL, 0, PACKET_TYPE_ACK, currentTCB-&gt;srcPort, currentTCB-&gt;dstPort, currentTCB-&gt;srcAddr, currentTCB-&gt;dstAddr); return 0;&#125; 当前状态为FIN_WAIT1，接收到的flag为PACKET_TYPE_ACK，状态转化到FIN_WAIT2。 123456if (currentTCB-&gt;status == FIN_WAIT1 &amp;&amp; tcp-&gt;flags == PACKET_TYPE_ACK) &#123; currentTCB-&gt;status = FIN_WAIT2; currentTCB-&gt;seq = ackNum; currentTCB-&gt;ack = seqNum + 1; return 0;&#125; 当前状态为FIN_WAIT2，接收到的flag为PACKET_TYPE_FIN_ACK，状态转换到TIME_WAIT 12345678910if (currentTCB-&gt;status == FIN_WAIT2 &amp;&amp; tcp-&gt;flags == PACKET_TYPE_FIN_ACK)&#123; currentTCB-&gt;status = TIME_WAIT; stud_tcp_output(NULL, 0, PACKET_TYPE_ACK, currentTCB-&gt;srcPort, currentTCB-&gt;dstPort, currentTCB-&gt;srcAddr, currentTCB-&gt;dstAddr); return 0; 实现stud_tcp_output在我们自己实现自己调用的该函数中，参数里的IP地址均为本地序（主要是一开始我以为input那个函数中也是这样） 另外一个需要注意的是，在第一部分的测试中，由于该部分会认为没有实现socket接口，所以不会调用相应的函数，也不会有创建TCB这个过程，所以在调用这个函数时会出错（空指针），因此我们需要在这里加一个surrentPCB的初始化。 初始化currentTCB（只针对第一部分的测试） 1234567891011if (currentTCB == NULL)&#123; currentTCB = new TCB; currentTCB-&gt;status = CLOSED; currentTCB-&gt;ack = gAckNum; currentTCB-&gt;seq = gSeqNum; currentTCB-&gt;srcAddr = srcAddr; currentTCB-&gt;dstAddr = dstAddr; currentTCB-&gt;srcPort = srcPort; currentTCB-&gt;dstPort = dstPort;&#125; 创建一个新的tcp结构，并且将pData中的数据复制过去 12TCP *tcp = new TCP;memcpy(tcp-&gt;data, pData, len); 构建TCP头，一定要注意使用网络序 123456789101112131415// 构造TCP头tcp-&gt;srcPort = htons(srcPort);tcp-&gt;dstPort = htons(dstPort);tcp-&gt;seqNum = htonl(currentTCB-&gt;seq);tcp-&gt;ackNum = htonl(currentTCB-&gt;ack);// 注意低四位为空，头长度为5 * 4字节// 二进制格式0x10010000tcp-&gt;headLen = 0x50;tcp-&gt;flags = flag;// 注意这里也要进行一次字节序转换！tcp-&gt;windowSize = htons(1);tcp-&gt;urgentPointer = 0;tcp-&gt;checkSum = 0; // 预清零checkSum// 这里要加上一个头长度！！！！！tcp-&gt;checkSum = getCheckSum((char *)tcp, len + TCP_HEADER_LENGTH, srcAddr, dstAddr); 之后，同样是进行状态转换的判断 从CLOSE状态转换到SYN_SENT 123if (currentTCB-&gt;status == CLOSED &amp;&amp; tcp-&gt;flags == PACKET_TYPE_SYN) currentTCB-&gt;status = SYN_SENT;&#125; 从ESTABLISHED状态转换到FIN_WAIT1 1234if (currentTCB-&gt;status == ESTABLISHED &amp;&amp; tcp-&gt;flags == PACKET_TYPE_FIN_ACK)&#123; currentTCB-&gt;status = FIN_WAIT1;&#125; 之后，我们需要根据本次的发送来计算下次应当受到的ack值，以便于之后的校验，如下： 123456789if (currentTCB-&gt;status == ESTABLISHED)&#123; currentTCB-&gt;ackExpect = currentTCB-&gt;seq + len;&#125;else&#123; DebugPrint(&quot;---&gt; Status: %d\\n&quot;, currentTCB-&gt;status); currentTCB-&gt;ackExpect = currentTCB-&gt;seq + 1;&#125; 最后，调用系统提供的函数进行发送 1tcp_sendIpPkt((unsigned char *)tcp, 20 + len, currentTCB-&gt;srcAddr, currentTCB-&gt;dstAddr, 60); 至此，该函数实现完毕。 实现stud_tcp_socket该函数并不建立连接，只是分配一个套接字标识符。在Linux中，返回的其实就是一个文件描述符，而Linux中文件描述符的0,1,2已经被占用，因此我们这里从3开始分配（虽然没什么差）。实现如下 12345678910111213141516171819202122232425int stud_tcp_socket(int domain, int type, int protocol)&#123; DebugPrint(&quot;---&gt; stud_tcp_socket():\\n&quot;); // 如果TCB表为空，插入三个NULL // socket的返回值应该是一个文件描述符 // Linux中，文件描述符的0,1,2分别为std_in std_out std_err // 所以我们返回的值从3开始 // 另外，我们希望能根据sockfd直接定位TCB，因此这样实现 if (TCBTable.empty()) &#123; TCBTable.push_back(NULL); TCBTable.push_back(NULL); TCBTable.push_back(NULL); &#125; currentTCB = new TCB; currentTCB-&gt;ack = gAckNum; currentTCB-&gt;seq = gSeqNum; currentTCB-&gt;srcPort = gSrcPort++; currentTCB-&gt;sockfd = TCBTable.size(); currentTCB-&gt;status = CLOSED; TCBTable.push_back(currentTCB); return currentTCB-&gt;sockfd;&#125; 实现stud_tcp_connect需要注意这个函数参数中的sockaddr_in结构是一个用来存套接字中的IP地址信息的结构，内部一定是大端存储IP地址，因此需要注意字节序转换。 在连接时，需要发送一个包，并且在连接时设置currentTCB 123456789101112131415161718192021222324int stud_tcp_connect(int sockfd, struct sockaddr_in *addr, int addrlen)&#123; currentTCB = TCBTable[sockfd]; // 注意这里的字节序转换 currentTCB-&gt;dstPort = ntohs(addr-&gt;sin_port); currentTCB-&gt;status = SYN_SENT; currentTCB-&gt;srcAddr = getIpv4Address(); currentTCB-&gt;dstAddr = ntohl(addr-&gt;sin_addr.s_addr); // 发送 stud_tcp_output(NULL, 0, PACKET_TYPE_SYN, currentTCB-&gt;srcPort, currentTCB-&gt;dstPort, currentTCB-&gt;srcAddr, currentTCB-&gt;dstAddr); // 等待对方发送的包 TCP *tcp = new TCP; int len = waitIpPacket((char *)tcp, 1000); while (len == -1) &#123; len = waitIpPacket((char *)tcp, 1000); &#125; // 接收到服务端的包之后调用`stud_tcp_input`处理 return stud_tcp_input((char *)tcp, len, htonl(currentTCB-&gt;srcAddr), htonl(currentTCB-&gt;dstAddr));&#125; 实现stud_tcp_send由于我们之前已经实现好了stud_tcp_output和stud_tcp_input，因此这里我们直接调用即可。 123456789101112131415161718192021222324int stud_tcp_send(int sockfd, const unsigned char *pData, unsigned short datalen, int flags)&#123; currentTCB = TCBTable[sockfd]; // 当前必须为可以发消息的状态 if (currentTCB-&gt;status == ESTABLISHED) &#123; currentTCB-&gt;data = (char *)pData; stud_tcp_output((char *)currentTCB-&gt;data, datalen, PACKET_TYPE_DATA, currentTCB-&gt;srcPort, currentTCB-&gt;dstPort, currentTCB-&gt;srcAddr, currentTCB-&gt;dstAddr); // 等待对方回复 TCP *tcp = new TCP; int len = waitIpPacket((char *)tcp, 1000); while (len == -1) &#123; len = waitIpPacket((char *)tcp, 1000); &#125; // 调用stud_tcp_input处理 return stud_tcp_input((char *)tcp, len, htonl(currentTCB-&gt;srcAddr), htonl(currentTCB-&gt;dstAddr)); &#125; return -1;&#125; 实现stud_tcp_recv在该函数中，等待一个对方发来的包并进行处理 123456789101112131415161718int stud_tcp_recv(int sockfd, unsigned char *pData, unsigned short datalen, int flags)&#123; currentTCB = TCBTable[sockfd]; if (currentTCB-&gt;status == ESTABLISHED) &#123; // 等待对方发来的包 TCP *tcp = new TCP; int len = waitIpPacket((char *)tcp, 1000); while (len == -1) &#123; len = waitIpPacket((char *)tcp, 1000); &#125; memcpy(pData, tcp-&gt;data, len); // 调用stud_tcp_input处理 return stud_tcp_input((char *)tcp, len, htonl(currentTCB-&gt;srcAddr), htonl(currentTCB-&gt;dstAddr)); &#125; return -1;&#125; 实现stud_tcp_close在本函数中，要注意关闭连接时的四次握手，需要注意我们的顺序问题。 首先，应当调用 stud_tcp_output发送一个flag为PACKET_TYPE_FIN_ACK的请求，之后对方会先发来一个PACKET_TYPE_ACK的包，接收到之后会进入FIN_WAIT2状态，然后需要继续等待对方发送的包，收到PACKET_TYPE_FIN_ACK才正式关闭，因此这里应该等待两次。实现如下： 12345678910111213141516171819202122232425262728293031int stud_tcp_close(int sockfd)&#123; currentTCB = TCBTable[sockfd]; // 在ESTABLISHED状态才能结束 if (currentTCB-&gt;status == ESTABLISHED) &#123; stud_tcp_output(NULL, 0, PACKET_TYPE_FIN_ACK, currentTCB-&gt;srcPort, currentTCB-&gt;dstPort, currentTCB-&gt;srcAddr, currentTCB-&gt;dstAddr); // 等待ACK TCP *tcp = new TCP; int len = waitIpPacket((char *)tcp, 1000); while (len == -1) &#123; len = waitIpPacket((char *)tcp, 1000); &#125; stud_tcp_input((char *)tcp, len, htonl(currentTCB-&gt;srcAddr), htonl(currentTCB-&gt;dstAddr)); // 等待FIN_ACK tcp = new TCP; len = waitIpPacket((char *)tcp, 1000); while (len == -1) &#123; len = waitIpPacket((char *)tcp, 1000); &#125; return stud_tcp_input((char *)tcp, len, htonl(currentTCB-&gt;srcAddr), htonl(currentTCB-&gt;dstAddr)); &#125; return -1;&#125; 至此，各实验函数编写完成，并且在系统上测试通过。 实验中遇到的问题 实验指导书上很多比较细节的地方都没说到，例如函数输入参数的字节序问题，在之前的ipv4实验中，参数中的ip地址是本地序，这次要求的stud_tcp_input的参数就成了网络序，但是提供的接口函数tcp_sendIpPkt还是本地序，我之前在宿舍自己写的时候觉得这两个地方要么都网络序要么都本地序，因为之前也是这样，但是去了之后因为这个问题头疼了半天。 实验指导书上有一些矛盾的地方，给出的一些函数（例如tcp_DiscardPkt）其实一直没用到，有些迷惑。 完整代码完整代码再次给出（包括了用于debug的语句等） 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231232233234235236237238239240241242243244245246247248249250251252253254255256257258259260261262263264265266267268269270271272273274275276277278279280281282283284285286287288289290291292293294295296297298299300301302303304305306307308309310311312313314315316317318319320321322323324325326327328329330331332333334335336337338339340341342343344345346347348349350351352353354355356357358359360361362363364365366367368369370371372373374375376377378379380381382383384385386387388389390391392393394395396397398399400401402403404405406407408409410411412413414415416417418419420421422423424425426427428429430431432433434435436437438439440441442443444445446447448449450451452453454455456457458459460461462463464465466467468/** THIS FILE IS FOR TCP TEST*//*struct sockaddr_in &#123; short sin_family; u_short sin_port; struct in_addr sin_addr; char sin_zero[8];&#125;;*/#include &quot;sysInclude.h&quot;#include &lt;cstdio&gt;#include &lt;cstring&gt;#include &lt;vector&gt;#define DEBUG#ifdef DEBUG#define DebugPrint(...) printf(__VA_ARGS__)#else#define DebugPrint(...)#endif// ?int gSrcPort = 2005;int gDstPort = 2006;int gSeqNum = 1;int gAckNum = 1;// 外部函数声明extern void tcp_DiscardPkt(char *pBuffer, int type);extern void tcp_sendReport(int type);extern void tcp_sendIpPkt(unsigned char *pData, UINT16 len, unsigned int srcAddr, unsigned int dstAddr, UINT8 ttl);extern int waitIpPacket(char *pBuffer, int timeout);extern unsigned int getIpv4Address();extern unsigned int getServerIpv4Address();// TCP的头占20个字节const int TCP_HEADER_LENGTH = 20;// TCP协议号const int TCP_PROTOCOL_NUM = 0x6;// TCP结构// 永远用网络序！！// 永远用网络序！！// 永远用网络序！！struct TCP&#123; uint16_t srcPort; uint16_t dstPort; uint32_t seqNum; uint32_t ackNum; uint8_t headLen; uint8_t flags; uint16_t windowSize; uint16_t checkSum; uint16_t urgentPointer; char data[2000]; void debugPrint() &#123;#ifdef DEBUG printf(&quot;=========== tcp struct info ===========\\n&quot;); printf(&quot;srcPort = %d\\n&quot;, ntohs(srcPort)); printf(&quot;dstPort = %d\\n&quot;, ntohs(dstPort)); printf(&quot;seqNum = %d\\n&quot;, ntohl(seqNum)); printf(&quot;ackNum = %d\\n&quot;, ntohl(ackNum)); printf(&quot;headLen = %d\\n&quot;, ((headLen &gt;&gt; 4) &amp; 0xf)); printf(&quot;flags = %d\\n&quot;, flags); printf(&quot;windowSize = %d\\n&quot;, ntohl(windowSize))); printf(&quot;checkSum = %d\\n&quot;, ntohl(checkSum)); printf(&quot;urgentPointer = %d\\n&quot;, ntohl(urgentPointer));#endif &#125;&#125;;// TCP状态enum TCPStatus&#123; CLOSED, SYN_SENT, ESTABLISHED, FIN_WAIT1, FIN_WAIT2, TIME_WAIT&#125;;// 传输控制快// 这是保存在本机的结构，永远用主机序！！！struct TCB&#123; int sockfd; // 套接字描述符 uint32_t srcAddr; // 源地址 uint16_t srcPort; // 源端口 uint32_t dstAddr; // 目的地址 uint16_t dstPort; // 目的端口 uint32_t seq; // seq uint32_t ack; // ack unsigned int ackExpect; // 应该收到的ack TCPStatus status; // 当前状态 char *data; // 数据段&#125;;vector&lt;TCB *&gt; TCBTable;TCB *currentTCB;union IpAddr&#123; unsigned int num; struct &#123; unsigned char c1; unsigned char c2; unsigned char c3; unsigned char c4; &#125; ip;&#125;;void printAddr(unsigned int addr)&#123;#ifdef DEBUG union IpAddr ip; ip.num = addr; printf(&quot;%d.%d.%d.%d&quot;, ip.ip.c4, ip.ip.c3, ip.ip.c2, ip.ip.c1);#endif&#125;// 约定传来的pBuffer是网络序// 其他几个应该都是主机序unsigned int getCheckSum(char *pBuffer, unsigned short len, unsigned int srcAddr, unsigned int dstAddr)&#123; DebugPrint(&quot;---&gt; In getCheckNum():\\n&quot;); DebugPrint(&quot;---&gt; srcAddr is :&quot;); printAddr(srcAddr); DebugPrint(&quot;\\n---&gt; dstAddr is :&quot;); printAddr(dstAddr); DebugPrint(&quot;\\n&quot;); unsigned int checkSum = 0; // 伪头部分 unsigned int srcAddr_n = htonl(srcAddr); unsigned int dstAddr_n = htonl(dstAddr); unsigned short len_n = htons(len); checkSum += (srcAddr_n &gt;&gt; 16) + (srcAddr_n &amp; 0xFFFF); // 源地址 checkSum += (dstAddr_n &gt;&gt; 16) + (dstAddr_n &amp; 0xFFFF); // 目标地址 checkSum += (TCP_PROTOCOL_NUM &lt;&lt; 8); // TCP协议号 checkSum += len_n; // TCP长度 uint16_t *TCPBuffer = (uint16_t *)pBuffer; // 计算主机序下的len // 遍历计算 for (int i = 0; i &lt; len / 2; i++) &#123; if (i == 8) continue; checkSum += TCPBuffer[i]; &#125; // 注意长度的奇偶，要特判奇数 if (len % 2) checkSum += ((uint16_t)(pBuffer[len_h]) &lt;&lt; 8); // 清除高位 while (checkSum &gt;&gt; 16) checkSum = (checkSum &amp; 0xffff) + (checkSum &gt;&gt; 16); DebugPrint(&quot;---&gt; Return from getCheckNum(), return value checkSum=%d (hex is %x):\\n&quot;, (~checkSum) &amp; 0xffff, (~checkSum) &amp; 0xffff); // 返回取反的值 return (~checkSum) &amp; 0xffff;&#125;// 传来的是网络序！// 注意这里的srcAddr和dstAddr也是网络序int stud_tcp_input(char *pBuffer, unsigned short len, unsigned int srcAddr, unsigned int dstAddr)&#123; DebugPrint(&quot;---&gt; In stud_tcp_input():\\n&quot;); DebugPrint(&quot;---&gt; len is %d:\\n&quot;, len); DebugPrint(&quot;---&gt; srcAddr is :&quot;); printAddr(srcAddr); DebugPrint(&quot;\\n---&gt; dstAddr is :&quot;); printAddr(dstAddr); DebugPrint(&quot;\\n&quot;); TCP *tcp = (TCP *)pBuffer; // 检查CheckSum if (getCheckSum(pBuffer, len, ntohl(srcAddr), ntohl(dstAddr)) != ((TCP *)pBuffer)-&gt;checkSum) &#123; DebugPrint(&quot;---&gt; check sum error\\n&quot;); tcp-&gt;debugPrint(); DebugPrint(&quot;---&gt; your ans: %d\\n&quot;, getCheckSum(pBuffer, len, ntohs(srcAddr), ntohs(dstAddr))); DebugPrint(&quot;---&gt; correct ans: %d\\n&quot;, tcp-&gt;checkSum); // 实验指导书上没定义这个错误？ // tcp_DiscardPkt(pBuffer, checksum_error); return -1; &#125; // 检查ack uint32_t ackNum = ntohl(tcp-&gt;ackNum); uint32_t seqNum = ntohl(tcp-&gt;seqNum); if (ackNum != currentTCB-&gt;ackExpect) &#123; DebugPrint(&quot;---&gt; Error!!! ackNum != currentTCB-&gt;ackExpect\\n&quot;); tcp_DiscardPkt(pBuffer, STUD_TCP_TEST_SEQNO_ERROR); return -1; &#125; // if (currentTCB-&gt;status == SYN_SENT &amp;&amp; tcp-&gt;flags == PACKET_TYPE_SYN_ACK) &#123; DebugPrint(&quot;---&gt; Status Change: SYN_SENT to ESTABLISHED\\n&quot;); currentTCB-&gt;status = ESTABLISHED; currentTCB-&gt;seq = ackNum; currentTCB-&gt;ack = seqNum + 1; stud_tcp_output(NULL, 0, PACKET_TYPE_ACK, currentTCB-&gt;srcPort, currentTCB-&gt;dstPort, currentTCB-&gt;srcAddr, currentTCB-&gt;dstAddr); return 0; &#125; if (currentTCB-&gt;status == ESTABLISHED) &#123; DebugPrint(&quot;---&gt; Transfer data at Status ESTABLISHED\\n&quot;); currentTCB-&gt;seq = ackNum; currentTCB-&gt;ack = seqNum + (len - TCP_HEADER_LENGTH); stud_tcp_output(NULL, 0, PACKET_TYPE_ACK, currentTCB-&gt;srcPort, currentTCB-&gt;dstPort, currentTCB-&gt;srcAddr, currentTCB-&gt;dstAddr); return 0; &#125; if (currentTCB-&gt;status == FIN_WAIT1 &amp;&amp; tcp-&gt;flags == PACKET_TYPE_ACK) &#123; DebugPrint(&quot;---&gt; Status Change: FIN_WAIT1 to FIN_WAIT2\\n&quot;); currentTCB-&gt;status = FIN_WAIT2; currentTCB-&gt;seq = ackNum; currentTCB-&gt;ack = seqNum + 1; return 0; &#125; if (currentTCB-&gt;status == FIN_WAIT2 &amp;&amp; tcp-&gt;flags == PACKET_TYPE_FIN_ACK) &#123; DebugPrint(&quot;---&gt; Status Change: FIN_WAIT2 to TIME_WAIT\\n&quot;); currentTCB-&gt;status = TIME_WAIT; stud_tcp_output(NULL, 0, PACKET_TYPE_ACK, currentTCB-&gt;srcPort, currentTCB-&gt;dstPort, currentTCB-&gt;srcAddr, currentTCB-&gt;dstAddr); return 0; &#125; return -1;&#125;// 约定传来的是网络序！（指pData）void stud_tcp_output(char *pData, unsigned short len, unsigned char flag, unsigned short srcPort, unsigned short dstPort, unsigned int srcAddr, unsigned int dstAddr)&#123; DebugPrint(&quot;---&gt; stud_tcp_output():\\n&quot;); DebugPrint(&quot;---&gt; srcAddr is :&quot;); printAddr(srcAddr); DebugPrint(&quot;\\n---&gt; dstAddr is :&quot;); printAddr(srcAddr); DebugPrint(&quot;\\n&quot;); if (currentTCB == NULL) &#123; currentTCB = new TCB; currentTCB-&gt;status = CLOSED; currentTCB-&gt;ack = gAckNum; currentTCB-&gt;seq = gSeqNum; currentTCB-&gt;srcAddr = srcAddr; currentTCB-&gt;dstAddr = dstAddr; currentTCB-&gt;srcPort = srcPort; currentTCB-&gt;dstPort = dstPort; &#125; TCP *tcp = new TCP; memcpy(tcp-&gt;data, pData, len); // 构造TCP头 tcp-&gt;srcPort = htons(srcPort); tcp-&gt;dstPort = htons(dstPort); tcp-&gt;seqNum = htonl(currentTCB-&gt;seq); tcp-&gt;ackNum = htonl(currentTCB-&gt;ack); // 注意低四位为空，头长度为5 * 4字节 // 二进制格式0x10010000 tcp-&gt;headLen = 0x50; tcp-&gt;flags = flag; // 注意这里也要进行一次字节序转换！ tcp-&gt;windowSize = htons(1); tcp-&gt;urgentPointer = 0; tcp-&gt;checkSum = 0; // 预清零checkSum // 这里要加上一个长度！！！！！ tcp-&gt;checkSum = getCheckSum((char *)tcp, len + TCP_HEADER_LENGTH, srcAddr, dstAddr); if (currentTCB-&gt;status == CLOSED &amp;&amp; tcp-&gt;flags == PACKET_TYPE_SYN) &#123; DebugPrint(&quot;---&gt; Status Change: CLOSED to SYN_SENT\\n&quot;); currentTCB-&gt;status = SYN_SENT; &#125; if (currentTCB-&gt;status == ESTABLISHED &amp;&amp; tcp-&gt;flags == PACKET_TYPE_FIN_ACK) &#123; DebugPrint(&quot;---&gt; Status Change: ESTABLISHED to FIN_WAIT1\\n&quot;); currentTCB-&gt;status = FIN_WAIT1; &#125; if (currentTCB-&gt;status == ESTABLISHED) &#123; currentTCB-&gt;ackExpect = currentTCB-&gt;seq + len; &#125; else &#123; DebugPrint(&quot;---&gt; Status: %d\\n&quot;, currentTCB-&gt;status); currentTCB-&gt;ackExpect = currentTCB-&gt;seq + 1; &#125; tcp_sendIpPkt((unsigned char *)tcp, 20 + len, currentTCB-&gt;srcAddr, currentTCB-&gt;dstAddr, 60);&#125;int stud_tcp_socket(int domain, int type, int protocol)&#123; DebugPrint(&quot;---&gt; stud_tcp_socket():\\n&quot;); // 如果TCB表为空，插入三个NULL // socket的返回值应该是一个文件描述符 // Linux中，文件描述符的0,1,2分别为std_in std_out std_err // 所以我们返回的值从3开始 // 另外，我们希望能根据sockfd直接定位TCB，因此这样实现 if (TCBTable.empty()) &#123; TCBTable.push_back(NULL); TCBTable.push_back(NULL); TCBTable.push_back(NULL); &#125; currentTCB = new TCB; currentTCB-&gt;ack = gAckNum; currentTCB-&gt;seq = gSeqNum; currentTCB-&gt;srcPort = gSrcPort++; currentTCB-&gt;sockfd = TCBTable.size(); currentTCB-&gt;status = CLOSED; TCBTable.push_back(currentTCB); return currentTCB-&gt;sockfd;&#125;/*struct sockaddr_in &#123; short sin_family; u_short sin_port; struct in_addr sin_addr; char sin_zero[8];&#125;;struct in_addr &#123; in_addr_t s_addr;&#125;;*/int stud_tcp_connect(int sockfd, struct sockaddr_in *addr, int addrlen)&#123; DebugPrint(&quot;---&gt; stud_tcp_connect():\\n&quot;); currentTCB = TCBTable[sockfd]; currentTCB-&gt;dstPort = ntohs(addr-&gt;sin_port); currentTCB-&gt;status = SYN_SENT; currentTCB-&gt;srcAddr = getIpv4Address(); currentTCB-&gt;dstAddr = ntohl(addr-&gt;sin_addr.s_addr); stud_tcp_output(NULL, 0, PACKET_TYPE_SYN, currentTCB-&gt;srcPort, currentTCB-&gt;dstPort, currentTCB-&gt;srcAddr, currentTCB-&gt;dstAddr); TCP *tcp = new TCP; int len = waitIpPacket((char *)tcp, 1000); while (len == -1) &#123; len = waitIpPacket((char *)tcp, 1000); &#125; return stud_tcp_input((char *)tcp, len, htonl(currentTCB-&gt;srcAddr), htonl(currentTCB-&gt;dstAddr));&#125;int stud_tcp_send(int sockfd, const unsigned char *pData, unsigned short datalen, int flags)&#123; DebugPrint(&quot;---&gt; In stud_tcp_input():\\n&quot;); currentTCB = TCBTable[sockfd]; if (currentTCB-&gt;status == ESTABLISHED) &#123; currentTCB-&gt;data = (char *)pData; stud_tcp_output((char *)currentTCB-&gt;data, datalen, PACKET_TYPE_DATA, currentTCB-&gt;srcPort, currentTCB-&gt;dstPort, currentTCB-&gt;srcAddr, currentTCB-&gt;dstAddr); TCP *tcp = new TCP; int len = waitIpPacket((char *)tcp, 1000); while (len == -1) &#123; len = waitIpPacket((char *)tcp, 1000); &#125; return stud_tcp_input((char *)tcp, len, htonl(currentTCB-&gt;srcAddr), htonl(currentTCB-&gt;dstAddr)); &#125; return -1;&#125;int stud_tcp_recv(int sockfd, unsigned char *pData, unsigned short datalen, int flags)&#123; DebugPrint(&quot;---&gt; In stud_tcp_input():\\n&quot;); currentTCB = TCBTable[sockfd]; if (currentTCB-&gt;status == ESTABLISHED) &#123; TCP *tcp = new TCP; int len = waitIpPacket((char *)tcp, 1000); while (len == -1) &#123; len = waitIpPacket((char *)tcp, 1000); &#125; memcpy(pData, tcp-&gt;data, len); return stud_tcp_input((char *)tcp, len, htonl(currentTCB-&gt;srcAddr), htonl(currentTCB-&gt;dstAddr)); &#125; return -1;&#125;int stud_tcp_close(int sockfd)&#123; DebugPrint(&quot;---&gt; In stud_tcp_input():\\n&quot;); currentTCB = TCBTable[sockfd]; if (currentTCB-&gt;status == ESTABLISHED) &#123; stud_tcp_output(NULL, 0, PACKET_TYPE_FIN_ACK, currentTCB-&gt;srcPort, currentTCB-&gt;dstPort, currentTCB-&gt;srcAddr, currentTCB-&gt;dstAddr); TCP *tcp = new TCP; int len = waitIpPacket((char *)tcp, 1000); while (len == -1) &#123; len = waitIpPacket((char *)tcp, 1000); &#125; stud_tcp_input((char *)tcp, len, htonl(currentTCB-&gt;srcAddr), htonl(currentTCB-&gt;dstAddr)); tcp = new TCP; len = waitIpPacket((char *)tcp, 1000); while (len == -1) &#123; len = waitIpPacket((char *)tcp, 1000); &#125; return stud_tcp_input((char *)tcp, len, htonl(currentTCB-&gt;srcAddr), htonl(currentTCB-&gt;dstAddr)); &#125; return -1;&#125;","categories":[{"name":"课程作业","slug":"课程作业","permalink":"http://www.kinami.cc/categories/%E8%AF%BE%E7%A8%8B%E4%BD%9C%E4%B8%9A/"},{"name":"计算机网络","slug":"课程作业/计算机网络","permalink":"http://www.kinami.cc/categories/%E8%AF%BE%E7%A8%8B%E4%BD%9C%E4%B8%9A/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"}],"tags":[{"name":"作业","slug":"作业","permalink":"http://www.kinami.cc/tags/%E4%BD%9C%E4%B8%9A/"},{"name":"计算机网络","slug":"计算机网络","permalink":"http://www.kinami.cc/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"}]},{"title":"《计算机网络概论》lab 3 ipv4路由","slug":"《计算机网络概论》lab-3-ipv4路由","date":"2021-04-13T16:43:33.000Z","updated":"2021-04-13T17:09:58.982Z","comments":true,"path":"2021/04/14/《计算机网络概论》lab-3-ipv4路由/","link":"","permalink":"http://www.kinami.cc/2021/04/14/%E3%80%8A%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E6%A6%82%E8%AE%BA%E3%80%8Blab-3-ipv4%E8%B7%AF%E7%94%B1/","excerpt":"","text":"实验流程实验要求在前面IPv4分组收发实验的基础上，增加分组转发功能。具体来说，对于每一个到达本机的IPv4分组，根据其目的IPv4地址决定分组的处理行为，对该分组进行如下的几类操作： 向上层协议上交目的地址为本机地址的分组； 根据路由查找结果，丢弃查不到路由的分组； 根据路由查找结果，向相应接口转发不是本机接收的分组。 实验思路在本次实验中，我们首先需要定义一个路由表结构，并且实现一个增加路由的函数。在实验指导书中给出了一种路由结构如下： 123456typedef struct stud_route_msg&#123; unsigned int dest; unsigned int masklen; unsigned int nexthop;&#125; stud_route_msg; 其中，masklen应当指子网掩码中从左往右数的1的个数而不是子网掩码的内容，这一点需要注意。因此，我们的路由表也仿照这样的结构设计即可。需要注意的是，由上层传来的路由表的数据是网络序，为了方便我们转换成本地序处理。 在接受分组时，首先应该查看目的地址是否为本机，然后查看该分组是否已经失效（例如TTL值小于等于0），然后在路由表中查找，查找不到则丢弃。 实验细节路由表的设计路由表设计如下，和实验系统中的设计一致。 123456789struct RouteInfo &#123; unsigned int dest; unsigned int masklen; // 子网掩码的长度（1的个数） unsigned int nexthop; RouteInfo(int d, int m, int n) &#123; dest = d, masklen = m, nexthop = n; &#125;&#125;;vector&lt;RouteInfo&gt; routeTable; //路由表 初始化路由表函数初始化时清空路由表即可。 12345// 初始化路由表void stud_Route_Init() &#123; routeTable.clear(); return;&#125; 增加一条新的路由信息注意需要将网络序转换为本地序。 123456// 增加路由void stud_route_add(stud_route_msg *proute) &#123; RouteInfo t(ntohl(proute-&gt;dest), proute-&gt;masklen, ntohl(proute-&gt;nexthop)); routeTable.push_back(t); return;&#125; 系统处理收到的IP分组的函数 首先，读取我们感兴趣的头部信息 12345678// 头部长度 int headerLength = pBuffer[0] &amp; 0xf; // timeToLive int timeToLive = (int) pBuffer[8]; // 头部校验和 int IHL = ntohs(*(unsigned short *) (pBuffer + 10)); // 目的IP地址 int dstAddr = ntohl(*(unsigned int *) (pBuffer + 16)); 判断timeToLive值是否出错 123456// 判断timeToLiveif (timeToLive &lt;= 0) &#123; // 错误 fwd_DiscardPkt(pBuffer,STUD_FORWARD_TEST_TTLERROR); return 1;&#125; 遍历路由表进行查找 1234567891011121314151617181920212223242526272829303132333435// 遍历路由表for (vector&lt;RouteInfo&gt;::iterator it = routeTable.begin(); it != routeTable.end(); it++) &#123; // 计算子网掩码 unsigned int subnetMask = 0xffffffff &lt;&lt; (32 - it-&gt;masklen); // 查找路由表 if ((it-&gt;dest &amp; subnetMask) == (dstAddr &amp; subnetMask)) &#123; // 如果找到了应该更新新的head信息 // 构造新的ipv4头部内容 char *buffer = new char[length]; memcpy(buffer, pBuffer, length); // timeToLive-1 buffer[8]--; // 清空checksum，便于之后求和计算 buffer[10] = buffer[11] = 0; // 计算校验和 // sum为计算的和 unsigned short sum = 0; // temp用于辅助计算 unsigned short temp = 0; // 每16字节为一组 for (int i = 0; i &lt; headLength * 2; i++) &#123; // 注意字节序，前8位为高位，后8位为低位 temp = (((unsigned char) buffer[i * 2]) &lt;&lt; 8) + ((unsigned char) buffer[i * 2 + 1]); // 如果相加之后进1，将进的1位加上 0xffff - sum &lt; temp ? sum = sum + temp + 1 : sum = sum + temp; &#125; // 计算并填充checkNum unsigned short headCheckSum = htons(0xffff - sum); memcpy(buffer + 10, &amp;headCheckSum, 2); // 发送信息 fwd_SendtoLower(buffer, length, it-&gt;nexthop); return 0; &#125;&#125; 如果遍历之后还没返回，说明没找到路由信息，丢弃。 123// 没有路由器fwd_DiscardPkt(pBuffer, STUD_FORWARD_TEST_NOROUTE);return 1; 至此，实验代码结束，在测试平台上测试通过。 实验中遇到的问题 本次实验较为顺利，没遇到太多的疑难问题。 完整代码完整代码在这里给出。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899#include &quot;sysInclude.h&quot;#include &lt;vector&gt;using std::vector;// system supportextern void fwd_LocalRcv(char *pBuffer, int length);extern void fwd_SendtoLower(char *pBuffer, int length, unsigned int nexthop);extern void fwd_DiscardPkt(char *pBuffer, int type);extern unsigned int getIpv4Address();struct RouteInfo &#123; unsigned int dest; unsigned int masklen; // 子网掩码的长度（1的个数） unsigned int nexthop; RouteInfo(int d, int m, int n) &#123; dest = d, masklen = m, nexthop = n; &#125;&#125;;vector&lt;RouteInfo&gt; routeTable; //路由表// 初始化路由表void stud_Route_Init() &#123; routeTable.clear(); return;&#125;// 增加路由void stud_route_add(stud_route_msg *proute) &#123; RouteInfo t(ntohl(proute-&gt;dest), proute-&gt;masklen, ntohl(proute-&gt;nexthop)); routeTable.push_back(t); return;&#125;int stud_fwd_deal(char *pBuffer, int length) &#123; // 头部长度 int headerLength = pBuffer[0] &amp; 0xf; // timeToLive int timeToLive = (int) pBuffer[8]; // 头部校验和 int Head_Checksum = ntohs(*(unsigned short *) (pBuffer + 10)); // 目的IP地址 int dstAddr = ntohl(*(unsigned int *) (pBuffer + 16)); // 如果本机地址等于目的IP地址， 接收 if (dstAddr == getIpv4Address()) &#123; fwd_LocalRcv(pBuffer, length); return 0; &#125; // 判断timeToLive if (timeToLive &lt;= 0) &#123; // 错误 fwd_DiscardPkt(pBuffer, STUD_FORWARD_TEST_TTLERROR); return 1; &#125; // 遍历路由表 for (vector&lt;RouteInfo&gt;::iterator it = routeTable.begin(); it != routeTable.end(); it++) &#123; // 计算子网掩码 unsigned int subnetMask = 0xffffffff &lt;&lt; (32 - it-&gt;masklen); // 查找路由表 if ((it-&gt;dest &amp; subnetMask) == (dstAddr &amp; subnetMask)) &#123; // 构造新的ipv4头部内容 char *buffer = new char[length]; memcpy(buffer, pBuffer, length); // timeToLive-1 buffer[8]--; // 清空checksum buffer[10] = buffer[11] = 0; // 计算校验和 // sum为计算的和 unsigned short sum = 0; // temp用于辅助计算 unsigned short temp = 0; // 每16字节为一组 for (int i = 0; i &lt; headLength * 2; i++) &#123; // 注意字节序，前8位为高位，后8位为低位 temp = (((unsigned char) buffer[i * 2]) &lt;&lt; 8) + ((unsigned char) buffer[i * 2 + 1]); // 如果相加之后进1，将进的1位加上 0xffff - sum &lt; temp ? sum = sum + temp + 1 : sum = sum + temp; // if (0xffff - sum &lt; temp) // sum = sum + temp + 1; // else // sum = sum + temp; &#125; unsigned short headCheckSum = htons(0xffff - sum); memcpy(buffer + 10, &amp;headCheckSum, 2); fwd_SendtoLower(buffer, length, it-&gt;nexthop); return 0; &#125; &#125; // 没有路由器 fwd_DiscardPkt(pBuffer, STUD_FORWARD_TEST_NOROUTE); return 1;&#125;","categories":[{"name":"课程作业","slug":"课程作业","permalink":"http://www.kinami.cc/categories/%E8%AF%BE%E7%A8%8B%E4%BD%9C%E4%B8%9A/"},{"name":"计算机网络","slug":"课程作业/计算机网络","permalink":"http://www.kinami.cc/categories/%E8%AF%BE%E7%A8%8B%E4%BD%9C%E4%B8%9A/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"}],"tags":[{"name":"作业","slug":"作业","permalink":"http://www.kinami.cc/tags/%E4%BD%9C%E4%B8%9A/"},{"name":"计算机网络","slug":"计算机网络","permalink":"http://www.kinami.cc/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"}]},{"title":"《计算机网络概论》lab 2 ipv4分组收发","slug":"《计算机网络概论》lab-2-ipv4分组收发","date":"2021-04-13T16:38:41.000Z","updated":"2021-04-13T17:09:53.008Z","comments":true,"path":"2021/04/14/《计算机网络概论》lab-2-ipv4分组收发/","link":"","permalink":"http://www.kinami.cc/2021/04/14/%E3%80%8A%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E6%A6%82%E8%AE%BA%E3%80%8Blab-2-ipv4%E5%88%86%E7%BB%84%E6%94%B6%E5%8F%91/","excerpt":"","text":"实验流程实验要求根据计算机网络实验系统所提供的上下层接口函数和协议中分组收发的主要流程，独立设计实现一个简单的IPv4分组收发模块。要求实现的主要功能包括： IPv4分组的基本接收处理； IPv4分组的封装发送。 实验思路在本次实验中，最重要的部分是理解IPv4的头部结构，应当使用合适的方法对头部信息进行读取、校验、写入等操作。在实验指导书中给出的头部信息结构如下： 在接收时，使用合适的方法读取并验证头部信息，写入时用合适的方法写入正确的值，就是我们本次实验需要完成的内容。 实验细节IPv4分组的基本接收处理正如之前所述，本次实验的关键在于读取头部信息，首先我们对头部信息进行读取，代码如下： 读取头部信息 在本次实验中，只需读取下列我们感兴趣的信息即可。需要注意的是在读取超过1个字节的值时需要将网络序转换为本地序。 123456// 读取头部信息int version = pBuffer[0] &gt;&gt; 4;int headLength = pBuffer[0] &amp; 0xf; //0b00001111int timeToLive = (unsigned short) pBuffer[8];int headCheckSum = ntohs(*(unsigned short *) (pBuffer + 10));int dstAddr = ntohl(*(unsigned int *) (pBuffer + 16)); 判断timeToLive值是否出错 12345// TTL值出错if (timeToLive &lt;= 0) &#123; ip_DiscardPkt(pBuffer, STUD_IP_TEST_TTL_ERROR); return 1;&#125; 判断IP版本号是否出错 12345// IP版本号错if (version != 4) &#123; ip_DiscardPkt(pBuffer, STUD_IP_TEST_VERSION_ERROR); return 1;&#125; 判断头部长度是否出错 12345// 头部长度错if (headLength &lt; 5) &#123; ip_DiscardPkt(pBuffer, STUD_IP_TEST_HEADLEN_ERROR); return 1;&#125; 校验checksum，直接把头部的长度按照规则相加，和应该为0xffff 这里要注意的细节是，由于我们用unsigned short进行计算，而checksum的规则要求如果相加大于0xffff，需要把高16位的值加到低16位上，因此，每次相加前我们需要判断相加是否大于0xffff，需要采用判断0xffff - sum和temp的关系来实现来避免溢出，如代码的11行所示。 1234567891011121314151617// 校验checksum// sum为计算的和unsigned short sum = 0;// temp用于辅助计算unsigned short temp = 0;// 每16字节为一组for (int i = 0; i &lt; headLength * 2; i++) &#123; // 注意字节序，前8位为高位，后8位为低位 temp = (((unsigned char) pBuffer[i * 2]) &lt;&lt; 8) + ((unsigned char) pBuffer[i * 2 + 1]); // 如果相加之后进1，将进的1位加上 0xffff - sum &lt; temp ? sum = sum + temp + 1 : sum = sum + temp;&#125;// 如果和不为0xffff，说明出错if (sum != 0xffff) &#123; ip_DiscardPkt(pBuffer, STUD_IP_TEST_CHECKSUM_ERROR); return 1;&#125; 如果经过上面的操作都没有返回，说明该分组没有问题，可以接受，如下 123//成功接受ip_SendtoUp(pBuffer, length);return 0; IPv4分组的封装发送该部分主要需要实现对头部信息的写入。流程如下： 首先，需要创建一个完整的分组结构 1234// 分配空间，头需要20字节，内容字节数为lenchar *IPBuffer = (char *) malloc((20 + len) * sizeof(char));// 将数据初始化为0memset(IPBuffer, 0, len + 20); 填充Version和IHL，内容为0b10001001=0x45，如下 1IPBuffer[0] = 0x45; 计算分组长度，转换成网络序后填写 1234 //分组总长度，需要转换成网络序unsigned short totalLength = htons(len + 20); // 填写total_length信息memcpy(IPBuffer + 2, &amp;totalLength, 2); 填写timeToLive和protocol 12IPBuffer[8] = timeToLive; //timeToLiveIPBuffer[9] = protocol; //协议 填写源地址和目标地址，注意转换成网络序 1234unsigned int src = htonl(srcAddr);unsigned int dst = htonl(dstAddr);memcpy(IPBuffer + 12, &amp;src, 4);memcpy(IPBuffer + 16, &amp;dst, 4); 计算checksum，由于我们在刚开始就使用memset将所有位初始化为了0，因此我们在这里可以用和第一个实验一模一样的代码来计算checksum，放置checksum的字节现在值为0，并不会影响计算，之后，用0xffff减去我们计算的结果就是应该填充的checksum。代码如下： 12345678unsigned short sum = 0;unsigned short temp = 0;// 计算sum// 此时原本的header checksum部分为0，因为已经memset过了，所以直接加就可以for (int i = 0; i &lt; 10; i++) &#123; temp = (((unsigned char) IPBuffer[i * 2]) &lt;&lt; 8) + ((unsigned char) IPBuffer[i * 2 + 1]); 0xffff - sum &lt; temp ? sum = sum + temp + 1 : sum = sum + temp;&#125; 以上代码为求和，以下为填充。 1234unsigned short headCheckSum = 0;headCheckSum = htons(0xffff - sum);// 填充checksum值memcpy(IPBuffer + 10, &amp;headCheckSum, 2); 最后，将携带的信息填充并发送即可 123memcpy(IPBuffer + 20, pBuffer, len);ip_SendtoLower(IPBuffer, len + 20);return 0; 至此，实验代码结束，在测试平台上测试通过。 实验中遇到的问题 本次实验较为顺利，没遇到太多的疑难问题。 完整代码完整代码即为将实验细节部分的代码拼凑而成，但还是在这里给出。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116#include &quot;sysInclude.h&quot;#include &lt;malloc.h&gt;#include &lt;stdio.h&gt;extern void ip_DiscardPkt(char *pBuffer, int type);extern void ip_SendtoLower(char *pBuffer, int length);extern void ip_SendtoUp(char *pBuffer, int length);extern unsigned int getIpv4Address();// 头部一共有20个字节，以字节为单位结构如下:// pBuffer[0] 高4位为Version 低4位为IHL// pBuffer[1] 高6位为TypeOfService// pBuffer[2]-pBuffer[3] Total Length// pBuffer[4]-pBuffer[5] Identification// pBuffer[6]的第6位第7位分别为MF和DF// pBuffer[6]的前5位+pBuffer[7] 为Fragment offset// pBuffer[8] : time to live// pBuffer[9]: Protocol// pBuffer[10]-pBuffer[11] Header checksum// pBuffer[12]-pBuffer[15] source address // pBuffer[16]-pBuffer[19] destination addressint stud_ip_recv(char *pBuffer, unsigned short length) &#123; // 读取头部信息 int version = pBuffer[0] &gt;&gt; 4; int headLength = pBuffer[0] &amp; 0xf; //0b00001111 int timeToLive = (unsigned short) pBuffer[8]; int headCheckSum = ntohs(*(unsigned short *) (pBuffer + 10)); int dstAddr = ntohl(*(unsigned int *) (pBuffer + 16)); // TTL值出错 if (timeToLive &lt;= 0) &#123; ip_DiscardPkt(pBuffer, STUD_IP_TEST_TTL_ERROR); return 1; &#125; // IP版本号错 if (version != 4) &#123; ip_DiscardPkt(pBuffer, STUD_IP_TEST_VERSION_ERROR); return 1; &#125; // 头部长度错 if (headLength &lt; 5) &#123; ip_DiscardPkt(pBuffer, STUD_IP_TEST_HEADLEN_ERROR); return 1; &#125; // 目的地址错 if (dstAddr != getIpv4Address() &amp;&amp; dstAddr != 0xffff) &#123; ip_DiscardPkt(pBuffer, STUD_IP_TEST_DESTINATION_ERROR); return 1; &#125; // 校验checksum // sum为计算的和 unsigned short sum = 0; // temp用于辅助计算 unsigned short temp = 0; // 每16字节为一组 for (int i = 0; i &lt; headLength * 2; i++) &#123; // 注意字节序，前8位为高位，后8位为低位 temp = (((unsigned char) pBuffer[i * 2]) &lt;&lt; 8) + ((unsigned char) pBuffer[i * 2 + 1]); // 如果相加之后进1，将进的1位加上 0xffff - sum &lt; temp ? sum = sum + temp + 1 : sum = sum + temp; &#125; if (sum != 0xffff) &#123; ip_DiscardPkt(pBuffer, STUD_IP_TEST_CHECKSUM_ERROR); return 1; &#125; //成功接受 ip_SendtoUp(pBuffer, length); return 0;&#125;int stud_ip_Upsend(char *pBuffer, unsigned short len, unsigned int srcAddr, unsigned int dstAddr, byte protocol, byte timeToLive) &#123; // 分配空间，头需要20字节，内容字节数为len char *IPBuffer = (char *) malloc((20 + len) * sizeof(char)); memset(IPBuffer, 0, len + 20); // pBuffer[0] 高4位为Version 低4位为IHL // 0b10001001 IPBuffer[0] = 0x45; //分组总长度，需要转换成网络序 unsigned short totalLength = htons(len + 20); // 填写total_length信息 memcpy(IPBuffer + 2, &amp;totalLength, 2); IPBuffer[8] = timeToLive; //timeToLive IPBuffer[9] = protocol; //协议 unsigned int src = htonl(srcAddr); unsigned int dst = htonl(dstAddr); memcpy(IPBuffer + 12, &amp;src, 4); //源与目的IP地址 memcpy(IPBuffer + 16, &amp;dst, 4); unsigned short sum = 0; unsigned short temp = 0; // 计算checksum // 此时原本的header checksum部分为0，因为已经memset过了，所以直接加就可以 for (int i = 0; i &lt; 10; i++) &#123; temp = (((unsigned char) IPBuffer[i * 2]) &lt;&lt; 8) + ((unsigned char) IPBuffer[i * 2 + 1]); 0xffff - sum &lt; temp ? sum = sum + temp + 1 : sum = sum + temp; &#125; unsigned short headCheckSum = 0; headCheckSum = htons(0xffff - sum); memcpy(IPBuffer + 10, &amp;headCheckSum, 2); memcpy(IPBuffer + 20, pBuffer, len); ip_SendtoLower(IPBuffer, len + 20); return 0;&#125;","categories":[{"name":"课程作业","slug":"课程作业","permalink":"http://www.kinami.cc/categories/%E8%AF%BE%E7%A8%8B%E4%BD%9C%E4%B8%9A/"},{"name":"计算机网络","slug":"课程作业/计算机网络","permalink":"http://www.kinami.cc/categories/%E8%AF%BE%E7%A8%8B%E4%BD%9C%E4%B8%9A/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"}],"tags":[{"name":"作业","slug":"作业","permalink":"http://www.kinami.cc/tags/%E4%BD%9C%E4%B8%9A/"},{"name":"计算机网络","slug":"计算机网络","permalink":"http://www.kinami.cc/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"}]},{"title":"《计算机网络概论》lab 1 滑动窗口","slug":"《计算机网络概论》lab-1-滑动窗口","date":"2021-04-13T12:51:26.000Z","updated":"2021-04-13T17:09:45.303Z","comments":true,"path":"2021/04/13/《计算机网络概论》lab-1-滑动窗口/","link":"","permalink":"http://www.kinami.cc/2021/04/13/%E3%80%8A%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E6%A6%82%E8%AE%BA%E3%80%8Blab-1-%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3/","excerpt":"","text":"实验流程实验要求本次实验要求在一个数据链路层的模拟实现环境下，用C语言实现三个数据链路层协议：1比特滑动窗口协议、回退N帧滑动窗口协议、选择性重传协议。 实验思路通过阅读实验指导书可以发现，回退N帧滑动窗口协议是最重要的一个，其他两个协议都可以看作在此基础上的一点小修改，所以本次实验中最重要的一点是实现回退N帧滑动窗口协议。在回退N帧实验中，系统和我需要实现的函数的函数交互方式如下： 等停协议和回退N帧协议：当发送端需要发送帧时，会调用学生测试函数，并置参数messageType为MSG_TYPE_SEND，测试函数应该将该帧缓存，存入发送队列中。若发送窗口还未打开到规定限度，则打开一个窗口，并将调用SendFRAMEPacket函数将该帧发送。若发送窗口已开到限度，则直接返回，相当于直接进入等待状态。 当发送端收到接收端的ACK 后，会调用学生测试函数，并置参数messageType为MSG_TYPE_RECEIVE，测试函数应该检查ACK值后，将该ACK 对应的窗口关闭。由于关闭了窗口，等待发送的帧可以进入窗口并发送，因此，此时若发送队列中存在等待发送的帧应该将一个等待发送的帧发送并打开一个新的窗口。 发送每发送一个帧，系统都会为他创建一个定时器，当被成功ACK 后，定时器会被取消，若某个帧在定时器超时时间仍未被ACK，系统则会调用测试函数，并置参数messageType 为MSG_TYPE_TIMEOUT，告知测试函数某帧超时，测试函数应该将根据帧序号将该帧以及后面发送过的帧重新发送。 可见，系统通过反复调用我实现的函数，通过messageType来标注是什么样的操作要求。因此我们可以考虑通过switch来区分开不同的操作，每个操作进行单独的实现。除此之外，在运行过程中，还有数据保存要求，所以我们需要全局变量或者静态变量来存储一些数据，考虑到每个函数功能的单独性，用静态变量实现会更优雅，在本次实验中选择这样实现。 实验细节正如之前所述，我将以回退N帧数函数为基础完成整个实验，在此部分进行一些代码细节的说明。首先，定义的一些常量以及结构如下： 两个窗口大小的常量 12#define WINDOW_SIZE_STOP_WAIT 1#define WINDOW_SIZE_BACK_N_FRAME 4 表示帧状态的枚举型 12345typedef enum &#123; data, ack, nak&#125; frame_kind; 系统中定义的frame结构 12345678910typedef struct frame_head &#123; frame_kind kind; // 帧类型 unsigned int seq; // 序列号 unsigned int ack; // 确认号 unsigned char data[100];//数据&#125;;typedef struct frame &#123; frame_head head; //帧头 unsigned int size; //帧的大小&#125;; 自定义的用于存储帧的Buffer结构。其中pBuffer和pFrame指针指向同一片地方只是生命的类型不同，主要是便于之后调用时不再手动强制类型转换。 123456789101112131415161718typedef struct Buffer &#123; unsigned char *pBuffer; // 向`SendFRAMEPacket`函数传的第一个参数 frame *pFrame; // 存储的frame的指针 int bufferSize; // size，向`SendFRAMEPacket`函数传的第二个参数 Buffer() &#123; // 分配一块储存frame的空间 pFrame = new frame(); // 将分配的地址指针赋值给pBuffer pBuffer = (unsigned char *) pFrame; &#125; // 用于储存frame的工具成员函数 void save(char *_pBuffer, int _bufferSize) &#123; // 注意不能是复制指针，而是需要把内容复制过来 (*pFrame) = *((frame *) _pBuffer); bufferSize = _bufferSize; &#125;&#125;; 一个用于通过指针获得ACK的宏函数 1#define GET_ACK(pBuffer) ntohl(((frame *) pBuffer)-&gt;head.ack) 之后，回退N帧测试函数stud_slide_window_back_n_frame内定义的用于存储数据的静态变量如下： 12345678910int stud_slide_window_back_n_frame(char *pBuffer, int bufferSize, UINT8 messageType) &#123; static int lower = 0, upper = 0; static queue&lt;Buffer&gt; wait_queue; const static int WINDOW_SIZE = WINDOW_SIZE_BACK_N_FRAME; static Buffer windows[WINDOW_SIZE]; switch (messageType) &#123; // switch body ....... &#125;&#125; 其中各变量的意义如下： lower: 滑动窗口的下界 upper: 滑动窗口上界的下一个 wait_queue: 由于窗口打开到上限不能直接send的帧的等待队列 WINDOW_SIZE: 在本函数中的窗口大小，每个函数中可能不一样 windows[WINDOW_SIZE]: 用于存储各窗口发出的帧的数组，大小和窗口大小一样 此外，需要注意的是，实际打开的窗口的窗口号下界为lower % WINDOW_SIZE，上界的下一个窗口号为(upper + 1) % WINDOW_SIZE。因为实际窗口号是在一定范围内轮流使用，例如0,1,2,3,0,1,2,...这样，但是如果将下界和上界直接这样表示有时会带来额外的麻烦，例如当窗口大小为1时，只存在一个窗口号0，此时上界的下一个窗口号也还是0，刚开始实现时就是因为这样，导致回退N帧测试函数不能直接修改WINDOW_SIZE来用在等停测试函数中。 之后便是swtich中各个功能的实现，实现细节如下： MSG_TYPE_SEND 123456789101112131415161718case MSG_TYPE_SEND: &#123; // 保存帧的内容 Buffer buffer; buffer.save(pBuffer, bufferSize); wait_queue.push(buffer); // 发送等待序列中的帧 // 当队列不为空且窗口大小小于最大大小时进行发送。 while (!wait_queue.empty() &amp;&amp; (upper - lower &lt; WINDOW_SIZE)) &#123; // 从队列头取出一个并发送 Buffer buffer = wait_queue.front(); wait_queue.pop(); SendFRAMEPacket(buffer.pBuffer, buffer.bufferSize); // 将发送的帧储存在对应窗口中 windows[upper % WINDOW_SIZE] = buffer; upper++; &#125; break;&#125; MSG_TYPE_RECEIVE 123456789101112131415161718192021case MSG_TYPE_RECEIVE: &#123; // 读取收到的ack int ack = GET_ACK(pBuffer); // 从目前的打开的窗口中寻找seq=ack的窗口 for (int i = lower; i &lt; upper; i++) &#123; if (ntohl(windows[i % WINDOW_SIZE].pFrame-&gt;head.seq) == ack) &#123; // 如果找到，说明i窗口以及之前的窗口已经被成功接受，则下界应当更新为i + 1 lower = i + 1; break; &#125; &#125; // 此时如果能继续发送则继续发送，该部分发送函数的逻辑和`case MSG_TYPE_SEND`中的对应部分一模一样 while (!wait_queue.empty() &amp;&amp; (upper - lower &lt; WINDOW_SIZE)) &#123; Buffer buffer = wait_queue.front(); wait_queue.pop(); SendFRAMEPacket(buffer.pBuffer, buffer.bufferSize); windows[upper % WINDOW_SIZE] = buffer; upper++; &#125; break;&#125; MSG_TYPE_TIMEOUT: 1234567case MSG_TYPE_TIMEOUT: &#123; for (int i = lower; i &lt; upper; i++) &#123; Buffer buffer = windows[i % WINDOW_SIZE]; SendFRAMEPacket(buffer.pBuffer, buffer.bufferSize); &#125; break;&#125; 以上便是回退N帧协议的实现细节。在实现中要注意的几个点，从pFrame中读取数据时（在本次实验中要读取的为seq、ack、kind），要注意大小端的转换，直接用ntohl()函数即可。在这种实现中，实现等停协议只需要将WINDOW_SIZE设置成WINDOW_SIZE_STOP_WAIT（即为1）即可，此外不需要任何的修改。 选择性重传函数中，取消了MSG_TYPE_TIMEOUT这种类型，只需要对case MSG_TYPE_RECEIVE做一些修改即可，修改如下： 123456789101112131415161718192021case MSG_TYPE_RECEIVE: &#123; // 读取`kind`区分是`ack`还是`nak` int kind = ntohl(((frame *) pBuffer)-&gt;head.kind); // 如果kind是`ack`，和之前的处理一模一样，此处略 if (kind == ack) &#123; /* ... */ &#125; // 如果kind是`nak`，则将帧中的`ack`表示的帧号找出来重发 else if (kind == nak) &#123; int nak = GET_ACK(pBuffer); for (int i = lower; i &lt; upper; i++) &#123; // 遍历找到缓存的帧中seq等于读出的ack（在这里用变量nak表示）的帧 if (ntohl(windows[i % WINDOW_SIZE].pFrame-&gt;head.seq) == nak) &#123; Buffer buffer = windows[i % WINDOW_SIZE]; SendFRAMEPacket(buffer.pBuffer, buffer.bufferSize); break; &#125; &#125; &#125; break;&#125; 至此，该实验结束。 实验中遇到的问题 不熟悉实验系统，实验系统对一些错误也不能很好的反馈。例如刚开始的时候，由于代码实现中将Buffer这个辅助结构当成一个class来使用，写了析构函数，并在析构函数中进行了delete操作，但是由于忽略了局部变量作用域的问题，导致了某些指针被重复释放，出了错误，但是在实验系统中并没有报错，只是单纯的卡住不动，最后因为过去的一点点经验想到了可能是指针相关的错误，最后才找到了这个问题。 还没找到很方便的debug方法，在做实验时还是通过最原始的输出log来寻找问题，实验系统中的单步调试功能也没太用习惯。 对大小端转换的问题还没有形成习惯，漏了好几次转换，运行出错了才发现没写。 完整代码由于三个函数的代码重复性很高，而且前面已经给出了详解，因此在完整代码部分删去了注释。代码说明见前面实验细节部分。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212#include &quot;sysinclude.h&quot;#include &lt;queue&gt;extern void SendFRAMEPacket(unsigned char *pData, unsigned int len);#define WINDOW_SIZE_STOP_WAIT 1#define WINDOW_SIZE_BACK_N_FRAME 4typedef enum &#123; data, ack, nak&#125; frame_kind;typedef struct frame_head &#123; frame_kind kind; unsigned int seq; unsigned int ack; unsigned char data[100];&#125;;typedef struct frame &#123; frame_head head; unsigned int size;&#125;;typedef struct Buffer &#123; unsigned char *pBuffer; frame *pFrame; int bufferSize; Buffer() &#123; pFrame = new frame(); pBuffer = (unsigned char *) pFrame; &#125; void save(char *_pBuffer, int _bufferSize) &#123; (*pFrame) = *((frame *) _pBuffer); bufferSize = _bufferSize; &#125;&#125;;#define GET_ACK(pBuffer) ntohl(((frame *) pBuffer)-&gt;head.ack)/** 停等协议测试函数*/int stud_slide_window_stop_and_wait(char *pBuffer, int bufferSize, UINT8 messageType) &#123; // 使用static变量来持久化 static int lower = 0, upper = 0; static queue&lt;Buffer&gt; wait_queue; const static int WINDOW_SIZE = WINDOW_SIZE_STOP_WAIT; static Buffer windows[WINDOW_SIZE]; switch (messageType) &#123; case MSG_TYPE_SEND: &#123; Buffer buffer; buffer.save(pBuffer, bufferSize); wait_queue.push(buffer); while (!wait_queue.empty() &amp;&amp; (upper - lower &lt; WINDOW_SIZE)) &#123; Buffer buffer = wait_queue.front(); wait_queue.pop(); SendFRAMEPacket(buffer.pBuffer, buffer.bufferSize); windows[upper % WINDOW_SIZE] = buffer; upper++; &#125; break; &#125; case MSG_TYPE_RECEIVE: &#123; int ack = GET_ACK(pBuffer); for (int i = lower; i &lt; upper; i++) &#123; if (ntohl(windows[i % WINDOW_SIZE].pFrame-&gt;head.seq) == ack) &#123; lower++; break; &#125; &#125; while (!wait_queue.empty() &amp;&amp; (upper - lower &lt; WINDOW_SIZE)) &#123; Buffer buffer = wait_queue.front(); wait_queue.pop(); SendFRAMEPacket(buffer.pBuffer, buffer.bufferSize); windows[upper % WINDOW_SIZE] = buffer; upper++; &#125; break; &#125; case MSG_TYPE_TIMEOUT: &#123; for (int i = lower; i &lt; upper; i++) &#123; Buffer buffer = windows[i % WINDOW_SIZE]; SendFRAMEPacket(buffer.pBuffer, buffer.bufferSize); &#125; break; &#125; default: break; &#125; return 0;&#125;/** 回退n帧测试函数*/int stud_slide_window_back_n_frame(char *pBuffer, int bufferSize, UINT8 messageType) &#123; // 使用static变量来持久化 static int lower = 0, upper = 0; static queue&lt;Buffer&gt; wait_queue; const static int WINDOW_SIZE = WINDOW_SIZE_BACK_N_FRAME; static Buffer windows[WINDOW_SIZE]; switch (messageType) &#123; case MSG_TYPE_SEND: &#123; Buffer buffer; buffer.save(pBuffer, bufferSize); wait_queue.push(buffer); while (!wait_queue.empty() &amp;&amp; (upper - lower &lt; WINDOW_SIZE)) &#123; Buffer buffer = wait_queue.front(); wait_queue.pop(); SendFRAMEPacket(buffer.pBuffer, buffer.bufferSize); windows[upper % WINDOW_SIZE] = buffer; upper++; &#125; break; &#125; case MSG_TYPE_RECEIVE: &#123; int ack = GET_ACK(pBuffer); for (int i = lower; i &lt; upper; i++) &#123; if (ntohl(windows[i % WINDOW_SIZE].pFrame-&gt;head.seq) == ack) &#123; lower = i + 1; break; &#125; &#125; while (!wait_queue.empty() &amp;&amp; (upper - lower &lt; WINDOW_SIZE)) &#123; Buffer buffer = wait_queue.front(); wait_queue.pop(); SendFRAMEPacket(buffer.pBuffer, buffer.bufferSize); windows[upper % WINDOW_SIZE] = buffer; upper++; &#125; break; &#125; case MSG_TYPE_TIMEOUT: &#123; for (int i = lower; i &lt; upper; i++) &#123; Buffer buffer = windows[i % WINDOW_SIZE]; SendFRAMEPacket(buffer.pBuffer, buffer.bufferSize); &#125; break; &#125; default: break; &#125; return 0;&#125;/** 选择性重传测试函数*/int stud_slide_window_choice_frame_resend(char *pBuffer, int bufferSize, UINT8 messageType) &#123; static int lower = 0, upper = 0; static queue&lt;Buffer&gt; wait_queue; const static int WINDOW_SIZE = WINDOW_SIZE_BACK_N_FRAME; static Buffer windows[WINDOW_SIZE]; switch (messageType) &#123; case MSG_TYPE_SEND: &#123; Buffer buffer; buffer.save(pBuffer, bufferSize); wait_queue.push(buffer); while (!wait_queue.empty() &amp;&amp; (upper - lower &lt; WINDOW_SIZE)) &#123; Buffer buffer = wait_queue.front(); wait_queue.pop(); SendFRAMEPacket(buffer.pBuffer, buffer.bufferSize); windows[upper % WINDOW_SIZE] = buffer; upper++; &#125; break; &#125; case MSG_TYPE_RECEIVE: &#123; int kind = ntohl(((frame *) pBuffer)-&gt;head.kind); if (kind == ack) &#123; int ack = GET_ACK(pBuffer); for (int i = lower; i &lt; upper; i++) &#123; if (ntohl(windows[i % WINDOW_SIZE].pFrame-&gt;head.seq) == ack) &#123; lower = i + 1; break; &#125; &#125; while (!wait_queue.empty() &amp;&amp; (upper - lower &lt; WINDOW_SIZE)) &#123; Buffer buffer = wait_queue.front(); wait_queue.pop(); SendFRAMEPacket(buffer.pBuffer, buffer.bufferSize); windows[upper % WINDOW_SIZE] = buffer; upper++; &#125; &#125; else if (kind == nak) &#123; int nak = GET_ACK(pBuffer); for (int i = lower; i &lt; upper; i++) &#123; if (ntohl(windows[i % WINDOW_SIZE].pFrame-&gt;head.seq) == nak) &#123; Buffer buffer = windows[i % WINDOW_SIZE]; SendFRAMEPacket(buffer.pBuffer, buffer.bufferSize); break; &#125; &#125; &#125; break; &#125; default: break; &#125; return 0;&#125;","categories":[{"name":"课程作业","slug":"课程作业","permalink":"http://www.kinami.cc/categories/%E8%AF%BE%E7%A8%8B%E4%BD%9C%E4%B8%9A/"},{"name":"计算机网络","slug":"课程作业/计算机网络","permalink":"http://www.kinami.cc/categories/%E8%AF%BE%E7%A8%8B%E4%BD%9C%E4%B8%9A/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"}],"tags":[{"name":"作业","slug":"作业","permalink":"http://www.kinami.cc/tags/%E4%BD%9C%E4%B8%9A/"},{"name":"计算机网络","slug":"计算机网络","permalink":"http://www.kinami.cc/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"}]}],"categories":[{"name":"计算概论C","slug":"计算概论C","permalink":"http://www.kinami.cc/categories/%E8%AE%A1%E7%AE%97%E6%A6%82%E8%AE%BAC/"},{"name":"计算概论C(21 fall)","slug":"计算概论C/计算概论C-21-fall","permalink":"http://www.kinami.cc/categories/%E8%AE%A1%E7%AE%97%E6%A6%82%E8%AE%BAC/%E8%AE%A1%E7%AE%97%E6%A6%82%E8%AE%BAC-21-fall/"},{"name":"课程作业","slug":"课程作业","permalink":"http://www.kinami.cc/categories/%E8%AF%BE%E7%A8%8B%E4%BD%9C%E4%B8%9A/"},{"name":"操作系统","slug":"课程作业/操作系统","permalink":"http://www.kinami.cc/categories/%E8%AF%BE%E7%A8%8B%E4%BD%9C%E4%B8%9A/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"},{"name":"计算机网络","slug":"课程作业/计算机网络","permalink":"http://www.kinami.cc/categories/%E8%AF%BE%E7%A8%8B%E4%BD%9C%E4%B8%9A/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"}],"tags":[{"name":"计算概论C","slug":"计算概论C","permalink":"http://www.kinami.cc/tags/%E8%AE%A1%E7%AE%97%E6%A6%82%E8%AE%BAC/"},{"name":"计算概论C专题","slug":"计算概论C专题","permalink":"http://www.kinami.cc/tags/%E8%AE%A1%E7%AE%97%E6%A6%82%E8%AE%BAC%E4%B8%93%E9%A2%98/"},{"name":"计算概论C(21 fall)","slug":"计算概论C-21-fall","permalink":"http://www.kinami.cc/tags/%E8%AE%A1%E7%AE%97%E6%A6%82%E8%AE%BAC-21-fall/"},{"name":"操作系统","slug":"操作系统","permalink":"http://www.kinami.cc/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"},{"name":"作业","slug":"作业","permalink":"http://www.kinami.cc/tags/%E4%BD%9C%E4%B8%9A/"},{"name":"计算机网络","slug":"计算机网络","permalink":"http://www.kinami.cc/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"}]}